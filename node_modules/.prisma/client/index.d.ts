
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export interface PrismaPromise<A> extends Promise<A> {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model dashboard_statuses
 * 
 */
export type dashboard_statuses = {
  id: number
  status: string | null
}

/**
 * Model platforms
 * 
 */
export type platforms = {
  id: number
  platform: string | null
}

/**
 * Model widget_templates
 * 
 */
export type widget_templates = {
  id: number
  widget_title: string | null
  widget_description: string | null
  platform_id: number | null
  default_settings: Prisma.JsonValue | null
  widget_sizes: Prisma.JsonValue | null
  widget_types: Prisma.JsonValue | null
}

/**
 * Model dashboards
 * 
 */
export type dashboards = {
  id: number
  user_id: number | null
  dashboard_name: string | null
  dashboard_status_id: number | null
  start_ts: Date | null
  end_ts: Date | null
  dashboard_settings: Prisma.JsonValue | null
  dashboard_type_id: number | null
  reference_id: number | null
}

/**
 * Model sharing_info
 * 
 */
export type sharing_info = {
  id: number
  dashboard_id: number | null
  email: string | null
  user_id: number | null
}

/**
 * Model widgets
 * 
 */
export type widgets = {
  id: number
  dashboard_id: number | null
  platform_id: number | null
  widget_template_id: number | null
  widget_account_id: string | null
  widget_property_id: string | null
  widget_start_ts: Date | null
  widget_end_ts: Date | null
  widget_settings: Prisma.JsonValue | null
  widget_size: widget_size | null
  widget_type: widget_type | null
  is_hidden: boolean | null
  widget_name: string | null
}

/**
 * Model dashboard_type
 * 
 */
export type dashboard_type = {
  id: number
  dashboard_type: string | null
}

/**
 * Model collection_configs
 * 
 */
export type collection_configs = {
  id: number
  title: string
  value: number
}

/**
 * Model collection_admin_configs
 * 
 */
export type collection_admin_configs = {
  id: number
  workspace_id: number
  total_posts: number | null
  total_comments: number | null
  profile_collection_freq: number | null
  posts_collection_freq: number | null
  campaign_post_collection_freq: number | null
  stories_collection_freq: number | null
  created_by_user_id: number
  created_ts: Date | null
  updated_ts: Date | null
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const widget_size: {
  default: 'default',
  large: 'large',
  medium: 'medium',
  small: 'small'
};

export type widget_size = (typeof widget_size)[keyof typeof widget_size]


export const widget_type: {
  piechart: 'piechart',
  barchart: 'barchart',
  linegraph: 'linegraph',
  counter: 'counter',
  table: 'table',
  areachart: 'areachart'
};

export type widget_type = (typeof widget_type)[keyof typeof widget_type]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Dashboard_statuses
 * const dashboard_statuses = await prisma.dashboard_statuses.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Dashboard_statuses
   * const dashboard_statuses = await prisma.dashboard_statuses.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.dashboard_statuses`: Exposes CRUD operations for the **dashboard_statuses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dashboard_statuses
    * const dashboard_statuses = await prisma.dashboard_statuses.findMany()
    * ```
    */
  get dashboard_statuses(): Prisma.dashboard_statusesDelegate<GlobalReject>;

  /**
   * `prisma.platforms`: Exposes CRUD operations for the **platforms** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Platforms
    * const platforms = await prisma.platforms.findMany()
    * ```
    */
  get platforms(): Prisma.platformsDelegate<GlobalReject>;

  /**
   * `prisma.widget_templates`: Exposes CRUD operations for the **widget_templates** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Widget_templates
    * const widget_templates = await prisma.widget_templates.findMany()
    * ```
    */
  get widget_templates(): Prisma.widget_templatesDelegate<GlobalReject>;

  /**
   * `prisma.dashboards`: Exposes CRUD operations for the **dashboards** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dashboards
    * const dashboards = await prisma.dashboards.findMany()
    * ```
    */
  get dashboards(): Prisma.dashboardsDelegate<GlobalReject>;

  /**
   * `prisma.sharing_info`: Exposes CRUD operations for the **sharing_info** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sharing_infos
    * const sharing_infos = await prisma.sharing_info.findMany()
    * ```
    */
  get sharing_info(): Prisma.sharing_infoDelegate<GlobalReject>;

  /**
   * `prisma.widgets`: Exposes CRUD operations for the **widgets** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Widgets
    * const widgets = await prisma.widgets.findMany()
    * ```
    */
  get widgets(): Prisma.widgetsDelegate<GlobalReject>;

  /**
   * `prisma.dashboard_type`: Exposes CRUD operations for the **dashboard_type** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dashboard_types
    * const dashboard_types = await prisma.dashboard_type.findMany()
    * ```
    */
  get dashboard_type(): Prisma.dashboard_typeDelegate<GlobalReject>;

  /**
   * `prisma.collection_configs`: Exposes CRUD operations for the **collection_configs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Collection_configs
    * const collection_configs = await prisma.collection_configs.findMany()
    * ```
    */
  get collection_configs(): Prisma.collection_configsDelegate<GlobalReject>;

  /**
   * `prisma.collection_admin_configs`: Exposes CRUD operations for the **collection_admin_configs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Collection_admin_configs
    * const collection_admin_configs = await prisma.collection_admin_configs.findMany()
    * ```
    */
  get collection_admin_configs(): Prisma.collection_admin_configsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.9.0
   * Query Engine version: ceb5c99003b99c9ee2c1d2e618e359c14aef2ea5
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    dashboard_statuses: 'dashboard_statuses',
    platforms: 'platforms',
    widget_templates: 'widget_templates',
    dashboards: 'dashboards',
    sharing_info: 'sharing_info',
    widgets: 'widgets',
    dashboard_type: 'dashboard_type',
    collection_configs: 'collection_configs',
    collection_admin_configs: 'collection_admin_configs'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type Dashboard_statusesCountOutputType
   */


  export type Dashboard_statusesCountOutputType = {
    dashboards: number
  }

  export type Dashboard_statusesCountOutputTypeSelect = {
    dashboards?: boolean
  }

  export type Dashboard_statusesCountOutputTypeGetPayload<S extends boolean | null | undefined | Dashboard_statusesCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Dashboard_statusesCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (Dashboard_statusesCountOutputTypeArgs)
    ? Dashboard_statusesCountOutputType 
    : S extends { select: any } & (Dashboard_statusesCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Dashboard_statusesCountOutputType ? Dashboard_statusesCountOutputType[P] : never
  } 
      : Dashboard_statusesCountOutputType




  // Custom InputTypes

  /**
   * Dashboard_statusesCountOutputType without action
   */
  export type Dashboard_statusesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Dashboard_statusesCountOutputType
     */
    select?: Dashboard_statusesCountOutputTypeSelect | null
  }



  /**
   * Count Type PlatformsCountOutputType
   */


  export type PlatformsCountOutputType = {
    widget_templates: number
    widgets: number
  }

  export type PlatformsCountOutputTypeSelect = {
    widget_templates?: boolean
    widgets?: boolean
  }

  export type PlatformsCountOutputTypeGetPayload<S extends boolean | null | undefined | PlatformsCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PlatformsCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (PlatformsCountOutputTypeArgs)
    ? PlatformsCountOutputType 
    : S extends { select: any } & (PlatformsCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof PlatformsCountOutputType ? PlatformsCountOutputType[P] : never
  } 
      : PlatformsCountOutputType




  // Custom InputTypes

  /**
   * PlatformsCountOutputType without action
   */
  export type PlatformsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PlatformsCountOutputType
     */
    select?: PlatformsCountOutputTypeSelect | null
  }



  /**
   * Count Type Widget_templatesCountOutputType
   */


  export type Widget_templatesCountOutputType = {
    widgets: number
  }

  export type Widget_templatesCountOutputTypeSelect = {
    widgets?: boolean
  }

  export type Widget_templatesCountOutputTypeGetPayload<S extends boolean | null | undefined | Widget_templatesCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Widget_templatesCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (Widget_templatesCountOutputTypeArgs)
    ? Widget_templatesCountOutputType 
    : S extends { select: any } & (Widget_templatesCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Widget_templatesCountOutputType ? Widget_templatesCountOutputType[P] : never
  } 
      : Widget_templatesCountOutputType




  // Custom InputTypes

  /**
   * Widget_templatesCountOutputType without action
   */
  export type Widget_templatesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Widget_templatesCountOutputType
     */
    select?: Widget_templatesCountOutputTypeSelect | null
  }



  /**
   * Count Type DashboardsCountOutputType
   */


  export type DashboardsCountOutputType = {
    sharing_info: number
    widgets: number
  }

  export type DashboardsCountOutputTypeSelect = {
    sharing_info?: boolean
    widgets?: boolean
  }

  export type DashboardsCountOutputTypeGetPayload<S extends boolean | null | undefined | DashboardsCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? DashboardsCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (DashboardsCountOutputTypeArgs)
    ? DashboardsCountOutputType 
    : S extends { select: any } & (DashboardsCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof DashboardsCountOutputType ? DashboardsCountOutputType[P] : never
  } 
      : DashboardsCountOutputType




  // Custom InputTypes

  /**
   * DashboardsCountOutputType without action
   */
  export type DashboardsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DashboardsCountOutputType
     */
    select?: DashboardsCountOutputTypeSelect | null
  }



  /**
   * Count Type Dashboard_typeCountOutputType
   */


  export type Dashboard_typeCountOutputType = {
    dashboards: number
  }

  export type Dashboard_typeCountOutputTypeSelect = {
    dashboards?: boolean
  }

  export type Dashboard_typeCountOutputTypeGetPayload<S extends boolean | null | undefined | Dashboard_typeCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Dashboard_typeCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (Dashboard_typeCountOutputTypeArgs)
    ? Dashboard_typeCountOutputType 
    : S extends { select: any } & (Dashboard_typeCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Dashboard_typeCountOutputType ? Dashboard_typeCountOutputType[P] : never
  } 
      : Dashboard_typeCountOutputType




  // Custom InputTypes

  /**
   * Dashboard_typeCountOutputType without action
   */
  export type Dashboard_typeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Dashboard_typeCountOutputType
     */
    select?: Dashboard_typeCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model dashboard_statuses
   */


  export type AggregateDashboard_statuses = {
    _count: Dashboard_statusesCountAggregateOutputType | null
    _avg: Dashboard_statusesAvgAggregateOutputType | null
    _sum: Dashboard_statusesSumAggregateOutputType | null
    _min: Dashboard_statusesMinAggregateOutputType | null
    _max: Dashboard_statusesMaxAggregateOutputType | null
  }

  export type Dashboard_statusesAvgAggregateOutputType = {
    id: number | null
  }

  export type Dashboard_statusesSumAggregateOutputType = {
    id: number | null
  }

  export type Dashboard_statusesMinAggregateOutputType = {
    id: number | null
    status: string | null
  }

  export type Dashboard_statusesMaxAggregateOutputType = {
    id: number | null
    status: string | null
  }

  export type Dashboard_statusesCountAggregateOutputType = {
    id: number
    status: number
    _all: number
  }


  export type Dashboard_statusesAvgAggregateInputType = {
    id?: true
  }

  export type Dashboard_statusesSumAggregateInputType = {
    id?: true
  }

  export type Dashboard_statusesMinAggregateInputType = {
    id?: true
    status?: true
  }

  export type Dashboard_statusesMaxAggregateInputType = {
    id?: true
    status?: true
  }

  export type Dashboard_statusesCountAggregateInputType = {
    id?: true
    status?: true
    _all?: true
  }

  export type Dashboard_statusesAggregateArgs = {
    /**
     * Filter which dashboard_statuses to aggregate.
     */
    where?: dashboard_statusesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dashboard_statuses to fetch.
     */
    orderBy?: Enumerable<dashboard_statusesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: dashboard_statusesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dashboard_statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dashboard_statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned dashboard_statuses
    **/
    _count?: true | Dashboard_statusesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Dashboard_statusesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Dashboard_statusesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Dashboard_statusesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Dashboard_statusesMaxAggregateInputType
  }

  export type GetDashboard_statusesAggregateType<T extends Dashboard_statusesAggregateArgs> = {
        [P in keyof T & keyof AggregateDashboard_statuses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDashboard_statuses[P]>
      : GetScalarType<T[P], AggregateDashboard_statuses[P]>
  }




  export type Dashboard_statusesGroupByArgs = {
    where?: dashboard_statusesWhereInput
    orderBy?: Enumerable<dashboard_statusesOrderByWithAggregationInput>
    by: Dashboard_statusesScalarFieldEnum[]
    having?: dashboard_statusesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Dashboard_statusesCountAggregateInputType | true
    _avg?: Dashboard_statusesAvgAggregateInputType
    _sum?: Dashboard_statusesSumAggregateInputType
    _min?: Dashboard_statusesMinAggregateInputType
    _max?: Dashboard_statusesMaxAggregateInputType
  }


  export type Dashboard_statusesGroupByOutputType = {
    id: number
    status: string | null
    _count: Dashboard_statusesCountAggregateOutputType | null
    _avg: Dashboard_statusesAvgAggregateOutputType | null
    _sum: Dashboard_statusesSumAggregateOutputType | null
    _min: Dashboard_statusesMinAggregateOutputType | null
    _max: Dashboard_statusesMaxAggregateOutputType | null
  }

  type GetDashboard_statusesGroupByPayload<T extends Dashboard_statusesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Dashboard_statusesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Dashboard_statusesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Dashboard_statusesGroupByOutputType[P]>
            : GetScalarType<T[P], Dashboard_statusesGroupByOutputType[P]>
        }
      >
    >


  export type dashboard_statusesSelect = {
    id?: boolean
    status?: boolean
    dashboards?: boolean | dashboard_statuses$dashboardsArgs
    _count?: boolean | Dashboard_statusesCountOutputTypeArgs
  }


  export type dashboard_statusesInclude = {
    dashboards?: boolean | dashboard_statuses$dashboardsArgs
    _count?: boolean | Dashboard_statusesCountOutputTypeArgs
  }

  export type dashboard_statusesGetPayload<S extends boolean | null | undefined | dashboard_statusesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? dashboard_statuses :
    S extends undefined ? never :
    S extends { include: any } & (dashboard_statusesArgs | dashboard_statusesFindManyArgs)
    ? dashboard_statuses  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'dashboards' ? Array < dashboardsGetPayload<S['include'][P]>>  :
        P extends '_count' ? Dashboard_statusesCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (dashboard_statusesArgs | dashboard_statusesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'dashboards' ? Array < dashboardsGetPayload<S['select'][P]>>  :
        P extends '_count' ? Dashboard_statusesCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof dashboard_statuses ? dashboard_statuses[P] : never
  } 
      : dashboard_statuses


  type dashboard_statusesCountArgs = 
    Omit<dashboard_statusesFindManyArgs, 'select' | 'include'> & {
      select?: Dashboard_statusesCountAggregateInputType | true
    }

  export interface dashboard_statusesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Dashboard_statuses that matches the filter.
     * @param {dashboard_statusesFindUniqueArgs} args - Arguments to find a Dashboard_statuses
     * @example
     * // Get one Dashboard_statuses
     * const dashboard_statuses = await prisma.dashboard_statuses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends dashboard_statusesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, dashboard_statusesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'dashboard_statuses'> extends True ? Prisma__dashboard_statusesClient<dashboard_statusesGetPayload<T>> : Prisma__dashboard_statusesClient<dashboard_statusesGetPayload<T> | null, null>

    /**
     * Find one Dashboard_statuses that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {dashboard_statusesFindUniqueOrThrowArgs} args - Arguments to find a Dashboard_statuses
     * @example
     * // Get one Dashboard_statuses
     * const dashboard_statuses = await prisma.dashboard_statuses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends dashboard_statusesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, dashboard_statusesFindUniqueOrThrowArgs>
    ): Prisma__dashboard_statusesClient<dashboard_statusesGetPayload<T>>

    /**
     * Find the first Dashboard_statuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dashboard_statusesFindFirstArgs} args - Arguments to find a Dashboard_statuses
     * @example
     * // Get one Dashboard_statuses
     * const dashboard_statuses = await prisma.dashboard_statuses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends dashboard_statusesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, dashboard_statusesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'dashboard_statuses'> extends True ? Prisma__dashboard_statusesClient<dashboard_statusesGetPayload<T>> : Prisma__dashboard_statusesClient<dashboard_statusesGetPayload<T> | null, null>

    /**
     * Find the first Dashboard_statuses that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dashboard_statusesFindFirstOrThrowArgs} args - Arguments to find a Dashboard_statuses
     * @example
     * // Get one Dashboard_statuses
     * const dashboard_statuses = await prisma.dashboard_statuses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends dashboard_statusesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, dashboard_statusesFindFirstOrThrowArgs>
    ): Prisma__dashboard_statusesClient<dashboard_statusesGetPayload<T>>

    /**
     * Find zero or more Dashboard_statuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dashboard_statusesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dashboard_statuses
     * const dashboard_statuses = await prisma.dashboard_statuses.findMany()
     * 
     * // Get first 10 Dashboard_statuses
     * const dashboard_statuses = await prisma.dashboard_statuses.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dashboard_statusesWithIdOnly = await prisma.dashboard_statuses.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends dashboard_statusesFindManyArgs>(
      args?: SelectSubset<T, dashboard_statusesFindManyArgs>
    ): PrismaPromise<Array<dashboard_statusesGetPayload<T>>>

    /**
     * Create a Dashboard_statuses.
     * @param {dashboard_statusesCreateArgs} args - Arguments to create a Dashboard_statuses.
     * @example
     * // Create one Dashboard_statuses
     * const Dashboard_statuses = await prisma.dashboard_statuses.create({
     *   data: {
     *     // ... data to create a Dashboard_statuses
     *   }
     * })
     * 
    **/
    create<T extends dashboard_statusesCreateArgs>(
      args: SelectSubset<T, dashboard_statusesCreateArgs>
    ): Prisma__dashboard_statusesClient<dashboard_statusesGetPayload<T>>

    /**
     * Create many Dashboard_statuses.
     *     @param {dashboard_statusesCreateManyArgs} args - Arguments to create many Dashboard_statuses.
     *     @example
     *     // Create many Dashboard_statuses
     *     const dashboard_statuses = await prisma.dashboard_statuses.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends dashboard_statusesCreateManyArgs>(
      args?: SelectSubset<T, dashboard_statusesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Dashboard_statuses.
     * @param {dashboard_statusesDeleteArgs} args - Arguments to delete one Dashboard_statuses.
     * @example
     * // Delete one Dashboard_statuses
     * const Dashboard_statuses = await prisma.dashboard_statuses.delete({
     *   where: {
     *     // ... filter to delete one Dashboard_statuses
     *   }
     * })
     * 
    **/
    delete<T extends dashboard_statusesDeleteArgs>(
      args: SelectSubset<T, dashboard_statusesDeleteArgs>
    ): Prisma__dashboard_statusesClient<dashboard_statusesGetPayload<T>>

    /**
     * Update one Dashboard_statuses.
     * @param {dashboard_statusesUpdateArgs} args - Arguments to update one Dashboard_statuses.
     * @example
     * // Update one Dashboard_statuses
     * const dashboard_statuses = await prisma.dashboard_statuses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends dashboard_statusesUpdateArgs>(
      args: SelectSubset<T, dashboard_statusesUpdateArgs>
    ): Prisma__dashboard_statusesClient<dashboard_statusesGetPayload<T>>

    /**
     * Delete zero or more Dashboard_statuses.
     * @param {dashboard_statusesDeleteManyArgs} args - Arguments to filter Dashboard_statuses to delete.
     * @example
     * // Delete a few Dashboard_statuses
     * const { count } = await prisma.dashboard_statuses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends dashboard_statusesDeleteManyArgs>(
      args?: SelectSubset<T, dashboard_statusesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dashboard_statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dashboard_statusesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dashboard_statuses
     * const dashboard_statuses = await prisma.dashboard_statuses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends dashboard_statusesUpdateManyArgs>(
      args: SelectSubset<T, dashboard_statusesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Dashboard_statuses.
     * @param {dashboard_statusesUpsertArgs} args - Arguments to update or create a Dashboard_statuses.
     * @example
     * // Update or create a Dashboard_statuses
     * const dashboard_statuses = await prisma.dashboard_statuses.upsert({
     *   create: {
     *     // ... data to create a Dashboard_statuses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dashboard_statuses we want to update
     *   }
     * })
    **/
    upsert<T extends dashboard_statusesUpsertArgs>(
      args: SelectSubset<T, dashboard_statusesUpsertArgs>
    ): Prisma__dashboard_statusesClient<dashboard_statusesGetPayload<T>>

    /**
     * Count the number of Dashboard_statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dashboard_statusesCountArgs} args - Arguments to filter Dashboard_statuses to count.
     * @example
     * // Count the number of Dashboard_statuses
     * const count = await prisma.dashboard_statuses.count({
     *   where: {
     *     // ... the filter for the Dashboard_statuses we want to count
     *   }
     * })
    **/
    count<T extends dashboard_statusesCountArgs>(
      args?: Subset<T, dashboard_statusesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Dashboard_statusesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dashboard_statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dashboard_statusesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Dashboard_statusesAggregateArgs>(args: Subset<T, Dashboard_statusesAggregateArgs>): PrismaPromise<GetDashboard_statusesAggregateType<T>>

    /**
     * Group by Dashboard_statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dashboard_statusesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Dashboard_statusesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Dashboard_statusesGroupByArgs['orderBy'] }
        : { orderBy?: Dashboard_statusesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Dashboard_statusesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDashboard_statusesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for dashboard_statuses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__dashboard_statusesClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    dashboards<T extends dashboard_statuses$dashboardsArgs= {}>(args?: Subset<T, dashboard_statuses$dashboardsArgs>): PrismaPromise<Array<dashboardsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * dashboard_statuses base type for findUnique actions
   */
  export type dashboard_statusesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the dashboard_statuses
     */
    select?: dashboard_statusesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboard_statusesInclude | null
    /**
     * Filter, which dashboard_statuses to fetch.
     */
    where: dashboard_statusesWhereUniqueInput
  }

  /**
   * dashboard_statuses findUnique
   */
  export interface dashboard_statusesFindUniqueArgs extends dashboard_statusesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * dashboard_statuses findUniqueOrThrow
   */
  export type dashboard_statusesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the dashboard_statuses
     */
    select?: dashboard_statusesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboard_statusesInclude | null
    /**
     * Filter, which dashboard_statuses to fetch.
     */
    where: dashboard_statusesWhereUniqueInput
  }


  /**
   * dashboard_statuses base type for findFirst actions
   */
  export type dashboard_statusesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the dashboard_statuses
     */
    select?: dashboard_statusesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboard_statusesInclude | null
    /**
     * Filter, which dashboard_statuses to fetch.
     */
    where?: dashboard_statusesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dashboard_statuses to fetch.
     */
    orderBy?: Enumerable<dashboard_statusesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for dashboard_statuses.
     */
    cursor?: dashboard_statusesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dashboard_statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dashboard_statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of dashboard_statuses.
     */
    distinct?: Enumerable<Dashboard_statusesScalarFieldEnum>
  }

  /**
   * dashboard_statuses findFirst
   */
  export interface dashboard_statusesFindFirstArgs extends dashboard_statusesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * dashboard_statuses findFirstOrThrow
   */
  export type dashboard_statusesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the dashboard_statuses
     */
    select?: dashboard_statusesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboard_statusesInclude | null
    /**
     * Filter, which dashboard_statuses to fetch.
     */
    where?: dashboard_statusesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dashboard_statuses to fetch.
     */
    orderBy?: Enumerable<dashboard_statusesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for dashboard_statuses.
     */
    cursor?: dashboard_statusesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dashboard_statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dashboard_statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of dashboard_statuses.
     */
    distinct?: Enumerable<Dashboard_statusesScalarFieldEnum>
  }


  /**
   * dashboard_statuses findMany
   */
  export type dashboard_statusesFindManyArgs = {
    /**
     * Select specific fields to fetch from the dashboard_statuses
     */
    select?: dashboard_statusesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboard_statusesInclude | null
    /**
     * Filter, which dashboard_statuses to fetch.
     */
    where?: dashboard_statusesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dashboard_statuses to fetch.
     */
    orderBy?: Enumerable<dashboard_statusesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing dashboard_statuses.
     */
    cursor?: dashboard_statusesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dashboard_statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dashboard_statuses.
     */
    skip?: number
    distinct?: Enumerable<Dashboard_statusesScalarFieldEnum>
  }


  /**
   * dashboard_statuses create
   */
  export type dashboard_statusesCreateArgs = {
    /**
     * Select specific fields to fetch from the dashboard_statuses
     */
    select?: dashboard_statusesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboard_statusesInclude | null
    /**
     * The data needed to create a dashboard_statuses.
     */
    data: XOR<dashboard_statusesCreateInput, dashboard_statusesUncheckedCreateInput>
  }


  /**
   * dashboard_statuses createMany
   */
  export type dashboard_statusesCreateManyArgs = {
    /**
     * The data used to create many dashboard_statuses.
     */
    data: Enumerable<dashboard_statusesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * dashboard_statuses update
   */
  export type dashboard_statusesUpdateArgs = {
    /**
     * Select specific fields to fetch from the dashboard_statuses
     */
    select?: dashboard_statusesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboard_statusesInclude | null
    /**
     * The data needed to update a dashboard_statuses.
     */
    data: XOR<dashboard_statusesUpdateInput, dashboard_statusesUncheckedUpdateInput>
    /**
     * Choose, which dashboard_statuses to update.
     */
    where: dashboard_statusesWhereUniqueInput
  }


  /**
   * dashboard_statuses updateMany
   */
  export type dashboard_statusesUpdateManyArgs = {
    /**
     * The data used to update dashboard_statuses.
     */
    data: XOR<dashboard_statusesUpdateManyMutationInput, dashboard_statusesUncheckedUpdateManyInput>
    /**
     * Filter which dashboard_statuses to update
     */
    where?: dashboard_statusesWhereInput
  }


  /**
   * dashboard_statuses upsert
   */
  export type dashboard_statusesUpsertArgs = {
    /**
     * Select specific fields to fetch from the dashboard_statuses
     */
    select?: dashboard_statusesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboard_statusesInclude | null
    /**
     * The filter to search for the dashboard_statuses to update in case it exists.
     */
    where: dashboard_statusesWhereUniqueInput
    /**
     * In case the dashboard_statuses found by the `where` argument doesn't exist, create a new dashboard_statuses with this data.
     */
    create: XOR<dashboard_statusesCreateInput, dashboard_statusesUncheckedCreateInput>
    /**
     * In case the dashboard_statuses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<dashboard_statusesUpdateInput, dashboard_statusesUncheckedUpdateInput>
  }


  /**
   * dashboard_statuses delete
   */
  export type dashboard_statusesDeleteArgs = {
    /**
     * Select specific fields to fetch from the dashboard_statuses
     */
    select?: dashboard_statusesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboard_statusesInclude | null
    /**
     * Filter which dashboard_statuses to delete.
     */
    where: dashboard_statusesWhereUniqueInput
  }


  /**
   * dashboard_statuses deleteMany
   */
  export type dashboard_statusesDeleteManyArgs = {
    /**
     * Filter which dashboard_statuses to delete
     */
    where?: dashboard_statusesWhereInput
  }


  /**
   * dashboard_statuses.dashboards
   */
  export type dashboard_statuses$dashboardsArgs = {
    /**
     * Select specific fields to fetch from the dashboards
     */
    select?: dashboardsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboardsInclude | null
    where?: dashboardsWhereInput
    orderBy?: Enumerable<dashboardsOrderByWithRelationInput>
    cursor?: dashboardsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DashboardsScalarFieldEnum>
  }


  /**
   * dashboard_statuses without action
   */
  export type dashboard_statusesArgs = {
    /**
     * Select specific fields to fetch from the dashboard_statuses
     */
    select?: dashboard_statusesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboard_statusesInclude | null
  }



  /**
   * Model platforms
   */


  export type AggregatePlatforms = {
    _count: PlatformsCountAggregateOutputType | null
    _avg: PlatformsAvgAggregateOutputType | null
    _sum: PlatformsSumAggregateOutputType | null
    _min: PlatformsMinAggregateOutputType | null
    _max: PlatformsMaxAggregateOutputType | null
  }

  export type PlatformsAvgAggregateOutputType = {
    id: number | null
  }

  export type PlatformsSumAggregateOutputType = {
    id: number | null
  }

  export type PlatformsMinAggregateOutputType = {
    id: number | null
    platform: string | null
  }

  export type PlatformsMaxAggregateOutputType = {
    id: number | null
    platform: string | null
  }

  export type PlatformsCountAggregateOutputType = {
    id: number
    platform: number
    _all: number
  }


  export type PlatformsAvgAggregateInputType = {
    id?: true
  }

  export type PlatformsSumAggregateInputType = {
    id?: true
  }

  export type PlatformsMinAggregateInputType = {
    id?: true
    platform?: true
  }

  export type PlatformsMaxAggregateInputType = {
    id?: true
    platform?: true
  }

  export type PlatformsCountAggregateInputType = {
    id?: true
    platform?: true
    _all?: true
  }

  export type PlatformsAggregateArgs = {
    /**
     * Filter which platforms to aggregate.
     */
    where?: platformsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of platforms to fetch.
     */
    orderBy?: Enumerable<platformsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: platformsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` platforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned platforms
    **/
    _count?: true | PlatformsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlatformsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlatformsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlatformsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlatformsMaxAggregateInputType
  }

  export type GetPlatformsAggregateType<T extends PlatformsAggregateArgs> = {
        [P in keyof T & keyof AggregatePlatforms]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlatforms[P]>
      : GetScalarType<T[P], AggregatePlatforms[P]>
  }




  export type PlatformsGroupByArgs = {
    where?: platformsWhereInput
    orderBy?: Enumerable<platformsOrderByWithAggregationInput>
    by: PlatformsScalarFieldEnum[]
    having?: platformsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlatformsCountAggregateInputType | true
    _avg?: PlatformsAvgAggregateInputType
    _sum?: PlatformsSumAggregateInputType
    _min?: PlatformsMinAggregateInputType
    _max?: PlatformsMaxAggregateInputType
  }


  export type PlatformsGroupByOutputType = {
    id: number
    platform: string | null
    _count: PlatformsCountAggregateOutputType | null
    _avg: PlatformsAvgAggregateOutputType | null
    _sum: PlatformsSumAggregateOutputType | null
    _min: PlatformsMinAggregateOutputType | null
    _max: PlatformsMaxAggregateOutputType | null
  }

  type GetPlatformsGroupByPayload<T extends PlatformsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PlatformsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlatformsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlatformsGroupByOutputType[P]>
            : GetScalarType<T[P], PlatformsGroupByOutputType[P]>
        }
      >
    >


  export type platformsSelect = {
    id?: boolean
    platform?: boolean
    widget_templates?: boolean | platforms$widget_templatesArgs
    widgets?: boolean | platforms$widgetsArgs
    _count?: boolean | PlatformsCountOutputTypeArgs
  }


  export type platformsInclude = {
    widget_templates?: boolean | platforms$widget_templatesArgs
    widgets?: boolean | platforms$widgetsArgs
    _count?: boolean | PlatformsCountOutputTypeArgs
  }

  export type platformsGetPayload<S extends boolean | null | undefined | platformsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? platforms :
    S extends undefined ? never :
    S extends { include: any } & (platformsArgs | platformsFindManyArgs)
    ? platforms  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'widget_templates' ? Array < widget_templatesGetPayload<S['include'][P]>>  :
        P extends 'widgets' ? Array < widgetsGetPayload<S['include'][P]>>  :
        P extends '_count' ? PlatformsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (platformsArgs | platformsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'widget_templates' ? Array < widget_templatesGetPayload<S['select'][P]>>  :
        P extends 'widgets' ? Array < widgetsGetPayload<S['select'][P]>>  :
        P extends '_count' ? PlatformsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof platforms ? platforms[P] : never
  } 
      : platforms


  type platformsCountArgs = 
    Omit<platformsFindManyArgs, 'select' | 'include'> & {
      select?: PlatformsCountAggregateInputType | true
    }

  export interface platformsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Platforms that matches the filter.
     * @param {platformsFindUniqueArgs} args - Arguments to find a Platforms
     * @example
     * // Get one Platforms
     * const platforms = await prisma.platforms.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends platformsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, platformsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'platforms'> extends True ? Prisma__platformsClient<platformsGetPayload<T>> : Prisma__platformsClient<platformsGetPayload<T> | null, null>

    /**
     * Find one Platforms that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {platformsFindUniqueOrThrowArgs} args - Arguments to find a Platforms
     * @example
     * // Get one Platforms
     * const platforms = await prisma.platforms.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends platformsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, platformsFindUniqueOrThrowArgs>
    ): Prisma__platformsClient<platformsGetPayload<T>>

    /**
     * Find the first Platforms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {platformsFindFirstArgs} args - Arguments to find a Platforms
     * @example
     * // Get one Platforms
     * const platforms = await prisma.platforms.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends platformsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, platformsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'platforms'> extends True ? Prisma__platformsClient<platformsGetPayload<T>> : Prisma__platformsClient<platformsGetPayload<T> | null, null>

    /**
     * Find the first Platforms that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {platformsFindFirstOrThrowArgs} args - Arguments to find a Platforms
     * @example
     * // Get one Platforms
     * const platforms = await prisma.platforms.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends platformsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, platformsFindFirstOrThrowArgs>
    ): Prisma__platformsClient<platformsGetPayload<T>>

    /**
     * Find zero or more Platforms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {platformsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Platforms
     * const platforms = await prisma.platforms.findMany()
     * 
     * // Get first 10 Platforms
     * const platforms = await prisma.platforms.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const platformsWithIdOnly = await prisma.platforms.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends platformsFindManyArgs>(
      args?: SelectSubset<T, platformsFindManyArgs>
    ): PrismaPromise<Array<platformsGetPayload<T>>>

    /**
     * Create a Platforms.
     * @param {platformsCreateArgs} args - Arguments to create a Platforms.
     * @example
     * // Create one Platforms
     * const Platforms = await prisma.platforms.create({
     *   data: {
     *     // ... data to create a Platforms
     *   }
     * })
     * 
    **/
    create<T extends platformsCreateArgs>(
      args: SelectSubset<T, platformsCreateArgs>
    ): Prisma__platformsClient<platformsGetPayload<T>>

    /**
     * Create many Platforms.
     *     @param {platformsCreateManyArgs} args - Arguments to create many Platforms.
     *     @example
     *     // Create many Platforms
     *     const platforms = await prisma.platforms.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends platformsCreateManyArgs>(
      args?: SelectSubset<T, platformsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Platforms.
     * @param {platformsDeleteArgs} args - Arguments to delete one Platforms.
     * @example
     * // Delete one Platforms
     * const Platforms = await prisma.platforms.delete({
     *   where: {
     *     // ... filter to delete one Platforms
     *   }
     * })
     * 
    **/
    delete<T extends platformsDeleteArgs>(
      args: SelectSubset<T, platformsDeleteArgs>
    ): Prisma__platformsClient<platformsGetPayload<T>>

    /**
     * Update one Platforms.
     * @param {platformsUpdateArgs} args - Arguments to update one Platforms.
     * @example
     * // Update one Platforms
     * const platforms = await prisma.platforms.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends platformsUpdateArgs>(
      args: SelectSubset<T, platformsUpdateArgs>
    ): Prisma__platformsClient<platformsGetPayload<T>>

    /**
     * Delete zero or more Platforms.
     * @param {platformsDeleteManyArgs} args - Arguments to filter Platforms to delete.
     * @example
     * // Delete a few Platforms
     * const { count } = await prisma.platforms.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends platformsDeleteManyArgs>(
      args?: SelectSubset<T, platformsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Platforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {platformsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Platforms
     * const platforms = await prisma.platforms.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends platformsUpdateManyArgs>(
      args: SelectSubset<T, platformsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Platforms.
     * @param {platformsUpsertArgs} args - Arguments to update or create a Platforms.
     * @example
     * // Update or create a Platforms
     * const platforms = await prisma.platforms.upsert({
     *   create: {
     *     // ... data to create a Platforms
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Platforms we want to update
     *   }
     * })
    **/
    upsert<T extends platformsUpsertArgs>(
      args: SelectSubset<T, platformsUpsertArgs>
    ): Prisma__platformsClient<platformsGetPayload<T>>

    /**
     * Count the number of Platforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {platformsCountArgs} args - Arguments to filter Platforms to count.
     * @example
     * // Count the number of Platforms
     * const count = await prisma.platforms.count({
     *   where: {
     *     // ... the filter for the Platforms we want to count
     *   }
     * })
    **/
    count<T extends platformsCountArgs>(
      args?: Subset<T, platformsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlatformsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Platforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlatformsAggregateArgs>(args: Subset<T, PlatformsAggregateArgs>): PrismaPromise<GetPlatformsAggregateType<T>>

    /**
     * Group by Platforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlatformsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlatformsGroupByArgs['orderBy'] }
        : { orderBy?: PlatformsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlatformsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlatformsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for platforms.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__platformsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    widget_templates<T extends platforms$widget_templatesArgs= {}>(args?: Subset<T, platforms$widget_templatesArgs>): PrismaPromise<Array<widget_templatesGetPayload<T>>| Null>;

    widgets<T extends platforms$widgetsArgs= {}>(args?: Subset<T, platforms$widgetsArgs>): PrismaPromise<Array<widgetsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * platforms base type for findUnique actions
   */
  export type platformsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the platforms
     */
    select?: platformsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: platformsInclude | null
    /**
     * Filter, which platforms to fetch.
     */
    where: platformsWhereUniqueInput
  }

  /**
   * platforms findUnique
   */
  export interface platformsFindUniqueArgs extends platformsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * platforms findUniqueOrThrow
   */
  export type platformsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the platforms
     */
    select?: platformsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: platformsInclude | null
    /**
     * Filter, which platforms to fetch.
     */
    where: platformsWhereUniqueInput
  }


  /**
   * platforms base type for findFirst actions
   */
  export type platformsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the platforms
     */
    select?: platformsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: platformsInclude | null
    /**
     * Filter, which platforms to fetch.
     */
    where?: platformsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of platforms to fetch.
     */
    orderBy?: Enumerable<platformsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for platforms.
     */
    cursor?: platformsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` platforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of platforms.
     */
    distinct?: Enumerable<PlatformsScalarFieldEnum>
  }

  /**
   * platforms findFirst
   */
  export interface platformsFindFirstArgs extends platformsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * platforms findFirstOrThrow
   */
  export type platformsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the platforms
     */
    select?: platformsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: platformsInclude | null
    /**
     * Filter, which platforms to fetch.
     */
    where?: platformsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of platforms to fetch.
     */
    orderBy?: Enumerable<platformsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for platforms.
     */
    cursor?: platformsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` platforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of platforms.
     */
    distinct?: Enumerable<PlatformsScalarFieldEnum>
  }


  /**
   * platforms findMany
   */
  export type platformsFindManyArgs = {
    /**
     * Select specific fields to fetch from the platforms
     */
    select?: platformsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: platformsInclude | null
    /**
     * Filter, which platforms to fetch.
     */
    where?: platformsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of platforms to fetch.
     */
    orderBy?: Enumerable<platformsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing platforms.
     */
    cursor?: platformsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` platforms.
     */
    skip?: number
    distinct?: Enumerable<PlatformsScalarFieldEnum>
  }


  /**
   * platforms create
   */
  export type platformsCreateArgs = {
    /**
     * Select specific fields to fetch from the platforms
     */
    select?: platformsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: platformsInclude | null
    /**
     * The data needed to create a platforms.
     */
    data: XOR<platformsCreateInput, platformsUncheckedCreateInput>
  }


  /**
   * platforms createMany
   */
  export type platformsCreateManyArgs = {
    /**
     * The data used to create many platforms.
     */
    data: Enumerable<platformsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * platforms update
   */
  export type platformsUpdateArgs = {
    /**
     * Select specific fields to fetch from the platforms
     */
    select?: platformsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: platformsInclude | null
    /**
     * The data needed to update a platforms.
     */
    data: XOR<platformsUpdateInput, platformsUncheckedUpdateInput>
    /**
     * Choose, which platforms to update.
     */
    where: platformsWhereUniqueInput
  }


  /**
   * platforms updateMany
   */
  export type platformsUpdateManyArgs = {
    /**
     * The data used to update platforms.
     */
    data: XOR<platformsUpdateManyMutationInput, platformsUncheckedUpdateManyInput>
    /**
     * Filter which platforms to update
     */
    where?: platformsWhereInput
  }


  /**
   * platforms upsert
   */
  export type platformsUpsertArgs = {
    /**
     * Select specific fields to fetch from the platforms
     */
    select?: platformsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: platformsInclude | null
    /**
     * The filter to search for the platforms to update in case it exists.
     */
    where: platformsWhereUniqueInput
    /**
     * In case the platforms found by the `where` argument doesn't exist, create a new platforms with this data.
     */
    create: XOR<platformsCreateInput, platformsUncheckedCreateInput>
    /**
     * In case the platforms was found with the provided `where` argument, update it with this data.
     */
    update: XOR<platformsUpdateInput, platformsUncheckedUpdateInput>
  }


  /**
   * platforms delete
   */
  export type platformsDeleteArgs = {
    /**
     * Select specific fields to fetch from the platforms
     */
    select?: platformsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: platformsInclude | null
    /**
     * Filter which platforms to delete.
     */
    where: platformsWhereUniqueInput
  }


  /**
   * platforms deleteMany
   */
  export type platformsDeleteManyArgs = {
    /**
     * Filter which platforms to delete
     */
    where?: platformsWhereInput
  }


  /**
   * platforms.widget_templates
   */
  export type platforms$widget_templatesArgs = {
    /**
     * Select specific fields to fetch from the widget_templates
     */
    select?: widget_templatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: widget_templatesInclude | null
    where?: widget_templatesWhereInput
    orderBy?: Enumerable<widget_templatesOrderByWithRelationInput>
    cursor?: widget_templatesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Widget_templatesScalarFieldEnum>
  }


  /**
   * platforms.widgets
   */
  export type platforms$widgetsArgs = {
    /**
     * Select specific fields to fetch from the widgets
     */
    select?: widgetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: widgetsInclude | null
    where?: widgetsWhereInput
    orderBy?: Enumerable<widgetsOrderByWithRelationInput>
    cursor?: widgetsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<WidgetsScalarFieldEnum>
  }


  /**
   * platforms without action
   */
  export type platformsArgs = {
    /**
     * Select specific fields to fetch from the platforms
     */
    select?: platformsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: platformsInclude | null
  }



  /**
   * Model widget_templates
   */


  export type AggregateWidget_templates = {
    _count: Widget_templatesCountAggregateOutputType | null
    _avg: Widget_templatesAvgAggregateOutputType | null
    _sum: Widget_templatesSumAggregateOutputType | null
    _min: Widget_templatesMinAggregateOutputType | null
    _max: Widget_templatesMaxAggregateOutputType | null
  }

  export type Widget_templatesAvgAggregateOutputType = {
    id: number | null
    platform_id: number | null
  }

  export type Widget_templatesSumAggregateOutputType = {
    id: number | null
    platform_id: number | null
  }

  export type Widget_templatesMinAggregateOutputType = {
    id: number | null
    widget_title: string | null
    widget_description: string | null
    platform_id: number | null
  }

  export type Widget_templatesMaxAggregateOutputType = {
    id: number | null
    widget_title: string | null
    widget_description: string | null
    platform_id: number | null
  }

  export type Widget_templatesCountAggregateOutputType = {
    id: number
    widget_title: number
    widget_description: number
    platform_id: number
    default_settings: number
    widget_sizes: number
    widget_types: number
    _all: number
  }


  export type Widget_templatesAvgAggregateInputType = {
    id?: true
    platform_id?: true
  }

  export type Widget_templatesSumAggregateInputType = {
    id?: true
    platform_id?: true
  }

  export type Widget_templatesMinAggregateInputType = {
    id?: true
    widget_title?: true
    widget_description?: true
    platform_id?: true
  }

  export type Widget_templatesMaxAggregateInputType = {
    id?: true
    widget_title?: true
    widget_description?: true
    platform_id?: true
  }

  export type Widget_templatesCountAggregateInputType = {
    id?: true
    widget_title?: true
    widget_description?: true
    platform_id?: true
    default_settings?: true
    widget_sizes?: true
    widget_types?: true
    _all?: true
  }

  export type Widget_templatesAggregateArgs = {
    /**
     * Filter which widget_templates to aggregate.
     */
    where?: widget_templatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of widget_templates to fetch.
     */
    orderBy?: Enumerable<widget_templatesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: widget_templatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` widget_templates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` widget_templates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned widget_templates
    **/
    _count?: true | Widget_templatesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Widget_templatesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Widget_templatesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Widget_templatesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Widget_templatesMaxAggregateInputType
  }

  export type GetWidget_templatesAggregateType<T extends Widget_templatesAggregateArgs> = {
        [P in keyof T & keyof AggregateWidget_templates]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWidget_templates[P]>
      : GetScalarType<T[P], AggregateWidget_templates[P]>
  }




  export type Widget_templatesGroupByArgs = {
    where?: widget_templatesWhereInput
    orderBy?: Enumerable<widget_templatesOrderByWithAggregationInput>
    by: Widget_templatesScalarFieldEnum[]
    having?: widget_templatesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Widget_templatesCountAggregateInputType | true
    _avg?: Widget_templatesAvgAggregateInputType
    _sum?: Widget_templatesSumAggregateInputType
    _min?: Widget_templatesMinAggregateInputType
    _max?: Widget_templatesMaxAggregateInputType
  }


  export type Widget_templatesGroupByOutputType = {
    id: number
    widget_title: string | null
    widget_description: string | null
    platform_id: number | null
    default_settings: JsonValue | null
    widget_sizes: JsonValue | null
    widget_types: JsonValue | null
    _count: Widget_templatesCountAggregateOutputType | null
    _avg: Widget_templatesAvgAggregateOutputType | null
    _sum: Widget_templatesSumAggregateOutputType | null
    _min: Widget_templatesMinAggregateOutputType | null
    _max: Widget_templatesMaxAggregateOutputType | null
  }

  type GetWidget_templatesGroupByPayload<T extends Widget_templatesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Widget_templatesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Widget_templatesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Widget_templatesGroupByOutputType[P]>
            : GetScalarType<T[P], Widget_templatesGroupByOutputType[P]>
        }
      >
    >


  export type widget_templatesSelect = {
    id?: boolean
    widget_title?: boolean
    widget_description?: boolean
    platform_id?: boolean
    default_settings?: boolean
    widget_sizes?: boolean
    widget_types?: boolean
    platforms?: boolean | platformsArgs
    widgets?: boolean | widget_templates$widgetsArgs
    _count?: boolean | Widget_templatesCountOutputTypeArgs
  }


  export type widget_templatesInclude = {
    platforms?: boolean | platformsArgs
    widgets?: boolean | widget_templates$widgetsArgs
    _count?: boolean | Widget_templatesCountOutputTypeArgs
  }

  export type widget_templatesGetPayload<S extends boolean | null | undefined | widget_templatesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? widget_templates :
    S extends undefined ? never :
    S extends { include: any } & (widget_templatesArgs | widget_templatesFindManyArgs)
    ? widget_templates  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'platforms' ? platformsGetPayload<S['include'][P]> | null :
        P extends 'widgets' ? Array < widgetsGetPayload<S['include'][P]>>  :
        P extends '_count' ? Widget_templatesCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (widget_templatesArgs | widget_templatesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'platforms' ? platformsGetPayload<S['select'][P]> | null :
        P extends 'widgets' ? Array < widgetsGetPayload<S['select'][P]>>  :
        P extends '_count' ? Widget_templatesCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof widget_templates ? widget_templates[P] : never
  } 
      : widget_templates


  type widget_templatesCountArgs = 
    Omit<widget_templatesFindManyArgs, 'select' | 'include'> & {
      select?: Widget_templatesCountAggregateInputType | true
    }

  export interface widget_templatesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Widget_templates that matches the filter.
     * @param {widget_templatesFindUniqueArgs} args - Arguments to find a Widget_templates
     * @example
     * // Get one Widget_templates
     * const widget_templates = await prisma.widget_templates.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends widget_templatesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, widget_templatesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'widget_templates'> extends True ? Prisma__widget_templatesClient<widget_templatesGetPayload<T>> : Prisma__widget_templatesClient<widget_templatesGetPayload<T> | null, null>

    /**
     * Find one Widget_templates that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {widget_templatesFindUniqueOrThrowArgs} args - Arguments to find a Widget_templates
     * @example
     * // Get one Widget_templates
     * const widget_templates = await prisma.widget_templates.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends widget_templatesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, widget_templatesFindUniqueOrThrowArgs>
    ): Prisma__widget_templatesClient<widget_templatesGetPayload<T>>

    /**
     * Find the first Widget_templates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {widget_templatesFindFirstArgs} args - Arguments to find a Widget_templates
     * @example
     * // Get one Widget_templates
     * const widget_templates = await prisma.widget_templates.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends widget_templatesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, widget_templatesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'widget_templates'> extends True ? Prisma__widget_templatesClient<widget_templatesGetPayload<T>> : Prisma__widget_templatesClient<widget_templatesGetPayload<T> | null, null>

    /**
     * Find the first Widget_templates that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {widget_templatesFindFirstOrThrowArgs} args - Arguments to find a Widget_templates
     * @example
     * // Get one Widget_templates
     * const widget_templates = await prisma.widget_templates.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends widget_templatesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, widget_templatesFindFirstOrThrowArgs>
    ): Prisma__widget_templatesClient<widget_templatesGetPayload<T>>

    /**
     * Find zero or more Widget_templates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {widget_templatesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Widget_templates
     * const widget_templates = await prisma.widget_templates.findMany()
     * 
     * // Get first 10 Widget_templates
     * const widget_templates = await prisma.widget_templates.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const widget_templatesWithIdOnly = await prisma.widget_templates.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends widget_templatesFindManyArgs>(
      args?: SelectSubset<T, widget_templatesFindManyArgs>
    ): PrismaPromise<Array<widget_templatesGetPayload<T>>>

    /**
     * Create a Widget_templates.
     * @param {widget_templatesCreateArgs} args - Arguments to create a Widget_templates.
     * @example
     * // Create one Widget_templates
     * const Widget_templates = await prisma.widget_templates.create({
     *   data: {
     *     // ... data to create a Widget_templates
     *   }
     * })
     * 
    **/
    create<T extends widget_templatesCreateArgs>(
      args: SelectSubset<T, widget_templatesCreateArgs>
    ): Prisma__widget_templatesClient<widget_templatesGetPayload<T>>

    /**
     * Create many Widget_templates.
     *     @param {widget_templatesCreateManyArgs} args - Arguments to create many Widget_templates.
     *     @example
     *     // Create many Widget_templates
     *     const widget_templates = await prisma.widget_templates.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends widget_templatesCreateManyArgs>(
      args?: SelectSubset<T, widget_templatesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Widget_templates.
     * @param {widget_templatesDeleteArgs} args - Arguments to delete one Widget_templates.
     * @example
     * // Delete one Widget_templates
     * const Widget_templates = await prisma.widget_templates.delete({
     *   where: {
     *     // ... filter to delete one Widget_templates
     *   }
     * })
     * 
    **/
    delete<T extends widget_templatesDeleteArgs>(
      args: SelectSubset<T, widget_templatesDeleteArgs>
    ): Prisma__widget_templatesClient<widget_templatesGetPayload<T>>

    /**
     * Update one Widget_templates.
     * @param {widget_templatesUpdateArgs} args - Arguments to update one Widget_templates.
     * @example
     * // Update one Widget_templates
     * const widget_templates = await prisma.widget_templates.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends widget_templatesUpdateArgs>(
      args: SelectSubset<T, widget_templatesUpdateArgs>
    ): Prisma__widget_templatesClient<widget_templatesGetPayload<T>>

    /**
     * Delete zero or more Widget_templates.
     * @param {widget_templatesDeleteManyArgs} args - Arguments to filter Widget_templates to delete.
     * @example
     * // Delete a few Widget_templates
     * const { count } = await prisma.widget_templates.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends widget_templatesDeleteManyArgs>(
      args?: SelectSubset<T, widget_templatesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Widget_templates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {widget_templatesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Widget_templates
     * const widget_templates = await prisma.widget_templates.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends widget_templatesUpdateManyArgs>(
      args: SelectSubset<T, widget_templatesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Widget_templates.
     * @param {widget_templatesUpsertArgs} args - Arguments to update or create a Widget_templates.
     * @example
     * // Update or create a Widget_templates
     * const widget_templates = await prisma.widget_templates.upsert({
     *   create: {
     *     // ... data to create a Widget_templates
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Widget_templates we want to update
     *   }
     * })
    **/
    upsert<T extends widget_templatesUpsertArgs>(
      args: SelectSubset<T, widget_templatesUpsertArgs>
    ): Prisma__widget_templatesClient<widget_templatesGetPayload<T>>

    /**
     * Count the number of Widget_templates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {widget_templatesCountArgs} args - Arguments to filter Widget_templates to count.
     * @example
     * // Count the number of Widget_templates
     * const count = await prisma.widget_templates.count({
     *   where: {
     *     // ... the filter for the Widget_templates we want to count
     *   }
     * })
    **/
    count<T extends widget_templatesCountArgs>(
      args?: Subset<T, widget_templatesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Widget_templatesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Widget_templates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Widget_templatesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Widget_templatesAggregateArgs>(args: Subset<T, Widget_templatesAggregateArgs>): PrismaPromise<GetWidget_templatesAggregateType<T>>

    /**
     * Group by Widget_templates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Widget_templatesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Widget_templatesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Widget_templatesGroupByArgs['orderBy'] }
        : { orderBy?: Widget_templatesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Widget_templatesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWidget_templatesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for widget_templates.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__widget_templatesClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    platforms<T extends platformsArgs= {}>(args?: Subset<T, platformsArgs>): Prisma__platformsClient<platformsGetPayload<T> | Null>;

    widgets<T extends widget_templates$widgetsArgs= {}>(args?: Subset<T, widget_templates$widgetsArgs>): PrismaPromise<Array<widgetsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * widget_templates base type for findUnique actions
   */
  export type widget_templatesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the widget_templates
     */
    select?: widget_templatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: widget_templatesInclude | null
    /**
     * Filter, which widget_templates to fetch.
     */
    where: widget_templatesWhereUniqueInput
  }

  /**
   * widget_templates findUnique
   */
  export interface widget_templatesFindUniqueArgs extends widget_templatesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * widget_templates findUniqueOrThrow
   */
  export type widget_templatesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the widget_templates
     */
    select?: widget_templatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: widget_templatesInclude | null
    /**
     * Filter, which widget_templates to fetch.
     */
    where: widget_templatesWhereUniqueInput
  }


  /**
   * widget_templates base type for findFirst actions
   */
  export type widget_templatesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the widget_templates
     */
    select?: widget_templatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: widget_templatesInclude | null
    /**
     * Filter, which widget_templates to fetch.
     */
    where?: widget_templatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of widget_templates to fetch.
     */
    orderBy?: Enumerable<widget_templatesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for widget_templates.
     */
    cursor?: widget_templatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` widget_templates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` widget_templates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of widget_templates.
     */
    distinct?: Enumerable<Widget_templatesScalarFieldEnum>
  }

  /**
   * widget_templates findFirst
   */
  export interface widget_templatesFindFirstArgs extends widget_templatesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * widget_templates findFirstOrThrow
   */
  export type widget_templatesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the widget_templates
     */
    select?: widget_templatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: widget_templatesInclude | null
    /**
     * Filter, which widget_templates to fetch.
     */
    where?: widget_templatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of widget_templates to fetch.
     */
    orderBy?: Enumerable<widget_templatesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for widget_templates.
     */
    cursor?: widget_templatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` widget_templates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` widget_templates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of widget_templates.
     */
    distinct?: Enumerable<Widget_templatesScalarFieldEnum>
  }


  /**
   * widget_templates findMany
   */
  export type widget_templatesFindManyArgs = {
    /**
     * Select specific fields to fetch from the widget_templates
     */
    select?: widget_templatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: widget_templatesInclude | null
    /**
     * Filter, which widget_templates to fetch.
     */
    where?: widget_templatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of widget_templates to fetch.
     */
    orderBy?: Enumerable<widget_templatesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing widget_templates.
     */
    cursor?: widget_templatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` widget_templates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` widget_templates.
     */
    skip?: number
    distinct?: Enumerable<Widget_templatesScalarFieldEnum>
  }


  /**
   * widget_templates create
   */
  export type widget_templatesCreateArgs = {
    /**
     * Select specific fields to fetch from the widget_templates
     */
    select?: widget_templatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: widget_templatesInclude | null
    /**
     * The data needed to create a widget_templates.
     */
    data: XOR<widget_templatesCreateInput, widget_templatesUncheckedCreateInput>
  }


  /**
   * widget_templates createMany
   */
  export type widget_templatesCreateManyArgs = {
    /**
     * The data used to create many widget_templates.
     */
    data: Enumerable<widget_templatesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * widget_templates update
   */
  export type widget_templatesUpdateArgs = {
    /**
     * Select specific fields to fetch from the widget_templates
     */
    select?: widget_templatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: widget_templatesInclude | null
    /**
     * The data needed to update a widget_templates.
     */
    data: XOR<widget_templatesUpdateInput, widget_templatesUncheckedUpdateInput>
    /**
     * Choose, which widget_templates to update.
     */
    where: widget_templatesWhereUniqueInput
  }


  /**
   * widget_templates updateMany
   */
  export type widget_templatesUpdateManyArgs = {
    /**
     * The data used to update widget_templates.
     */
    data: XOR<widget_templatesUpdateManyMutationInput, widget_templatesUncheckedUpdateManyInput>
    /**
     * Filter which widget_templates to update
     */
    where?: widget_templatesWhereInput
  }


  /**
   * widget_templates upsert
   */
  export type widget_templatesUpsertArgs = {
    /**
     * Select specific fields to fetch from the widget_templates
     */
    select?: widget_templatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: widget_templatesInclude | null
    /**
     * The filter to search for the widget_templates to update in case it exists.
     */
    where: widget_templatesWhereUniqueInput
    /**
     * In case the widget_templates found by the `where` argument doesn't exist, create a new widget_templates with this data.
     */
    create: XOR<widget_templatesCreateInput, widget_templatesUncheckedCreateInput>
    /**
     * In case the widget_templates was found with the provided `where` argument, update it with this data.
     */
    update: XOR<widget_templatesUpdateInput, widget_templatesUncheckedUpdateInput>
  }


  /**
   * widget_templates delete
   */
  export type widget_templatesDeleteArgs = {
    /**
     * Select specific fields to fetch from the widget_templates
     */
    select?: widget_templatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: widget_templatesInclude | null
    /**
     * Filter which widget_templates to delete.
     */
    where: widget_templatesWhereUniqueInput
  }


  /**
   * widget_templates deleteMany
   */
  export type widget_templatesDeleteManyArgs = {
    /**
     * Filter which widget_templates to delete
     */
    where?: widget_templatesWhereInput
  }


  /**
   * widget_templates.widgets
   */
  export type widget_templates$widgetsArgs = {
    /**
     * Select specific fields to fetch from the widgets
     */
    select?: widgetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: widgetsInclude | null
    where?: widgetsWhereInput
    orderBy?: Enumerable<widgetsOrderByWithRelationInput>
    cursor?: widgetsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<WidgetsScalarFieldEnum>
  }


  /**
   * widget_templates without action
   */
  export type widget_templatesArgs = {
    /**
     * Select specific fields to fetch from the widget_templates
     */
    select?: widget_templatesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: widget_templatesInclude | null
  }



  /**
   * Model dashboards
   */


  export type AggregateDashboards = {
    _count: DashboardsCountAggregateOutputType | null
    _avg: DashboardsAvgAggregateOutputType | null
    _sum: DashboardsSumAggregateOutputType | null
    _min: DashboardsMinAggregateOutputType | null
    _max: DashboardsMaxAggregateOutputType | null
  }

  export type DashboardsAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    dashboard_status_id: number | null
    dashboard_type_id: number | null
    reference_id: number | null
  }

  export type DashboardsSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    dashboard_status_id: number | null
    dashboard_type_id: number | null
    reference_id: number | null
  }

  export type DashboardsMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    dashboard_name: string | null
    dashboard_status_id: number | null
    start_ts: Date | null
    end_ts: Date | null
    dashboard_type_id: number | null
    reference_id: number | null
  }

  export type DashboardsMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    dashboard_name: string | null
    dashboard_status_id: number | null
    start_ts: Date | null
    end_ts: Date | null
    dashboard_type_id: number | null
    reference_id: number | null
  }

  export type DashboardsCountAggregateOutputType = {
    id: number
    user_id: number
    dashboard_name: number
    dashboard_status_id: number
    start_ts: number
    end_ts: number
    dashboard_settings: number
    dashboard_type_id: number
    reference_id: number
    _all: number
  }


  export type DashboardsAvgAggregateInputType = {
    id?: true
    user_id?: true
    dashboard_status_id?: true
    dashboard_type_id?: true
    reference_id?: true
  }

  export type DashboardsSumAggregateInputType = {
    id?: true
    user_id?: true
    dashboard_status_id?: true
    dashboard_type_id?: true
    reference_id?: true
  }

  export type DashboardsMinAggregateInputType = {
    id?: true
    user_id?: true
    dashboard_name?: true
    dashboard_status_id?: true
    start_ts?: true
    end_ts?: true
    dashboard_type_id?: true
    reference_id?: true
  }

  export type DashboardsMaxAggregateInputType = {
    id?: true
    user_id?: true
    dashboard_name?: true
    dashboard_status_id?: true
    start_ts?: true
    end_ts?: true
    dashboard_type_id?: true
    reference_id?: true
  }

  export type DashboardsCountAggregateInputType = {
    id?: true
    user_id?: true
    dashboard_name?: true
    dashboard_status_id?: true
    start_ts?: true
    end_ts?: true
    dashboard_settings?: true
    dashboard_type_id?: true
    reference_id?: true
    _all?: true
  }

  export type DashboardsAggregateArgs = {
    /**
     * Filter which dashboards to aggregate.
     */
    where?: dashboardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dashboards to fetch.
     */
    orderBy?: Enumerable<dashboardsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: dashboardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dashboards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dashboards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned dashboards
    **/
    _count?: true | DashboardsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DashboardsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DashboardsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DashboardsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DashboardsMaxAggregateInputType
  }

  export type GetDashboardsAggregateType<T extends DashboardsAggregateArgs> = {
        [P in keyof T & keyof AggregateDashboards]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDashboards[P]>
      : GetScalarType<T[P], AggregateDashboards[P]>
  }




  export type DashboardsGroupByArgs = {
    where?: dashboardsWhereInput
    orderBy?: Enumerable<dashboardsOrderByWithAggregationInput>
    by: DashboardsScalarFieldEnum[]
    having?: dashboardsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DashboardsCountAggregateInputType | true
    _avg?: DashboardsAvgAggregateInputType
    _sum?: DashboardsSumAggregateInputType
    _min?: DashboardsMinAggregateInputType
    _max?: DashboardsMaxAggregateInputType
  }


  export type DashboardsGroupByOutputType = {
    id: number
    user_id: number | null
    dashboard_name: string | null
    dashboard_status_id: number | null
    start_ts: Date | null
    end_ts: Date | null
    dashboard_settings: JsonValue | null
    dashboard_type_id: number | null
    reference_id: number | null
    _count: DashboardsCountAggregateOutputType | null
    _avg: DashboardsAvgAggregateOutputType | null
    _sum: DashboardsSumAggregateOutputType | null
    _min: DashboardsMinAggregateOutputType | null
    _max: DashboardsMaxAggregateOutputType | null
  }

  type GetDashboardsGroupByPayload<T extends DashboardsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<DashboardsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DashboardsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DashboardsGroupByOutputType[P]>
            : GetScalarType<T[P], DashboardsGroupByOutputType[P]>
        }
      >
    >


  export type dashboardsSelect = {
    id?: boolean
    user_id?: boolean
    dashboard_name?: boolean
    dashboard_status_id?: boolean
    start_ts?: boolean
    end_ts?: boolean
    dashboard_settings?: boolean
    dashboard_type_id?: boolean
    reference_id?: boolean
    dashboard_statuses?: boolean | dashboard_statusesArgs
    dashboard_type?: boolean | dashboard_typeArgs
    sharing_info?: boolean | dashboards$sharing_infoArgs
    widgets?: boolean | dashboards$widgetsArgs
    _count?: boolean | DashboardsCountOutputTypeArgs
  }


  export type dashboardsInclude = {
    dashboard_statuses?: boolean | dashboard_statusesArgs
    dashboard_type?: boolean | dashboard_typeArgs
    sharing_info?: boolean | dashboards$sharing_infoArgs
    widgets?: boolean | dashboards$widgetsArgs
    _count?: boolean | DashboardsCountOutputTypeArgs
  }

  export type dashboardsGetPayload<S extends boolean | null | undefined | dashboardsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? dashboards :
    S extends undefined ? never :
    S extends { include: any } & (dashboardsArgs | dashboardsFindManyArgs)
    ? dashboards  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'dashboard_statuses' ? dashboard_statusesGetPayload<S['include'][P]> | null :
        P extends 'dashboard_type' ? dashboard_typeGetPayload<S['include'][P]> | null :
        P extends 'sharing_info' ? Array < sharing_infoGetPayload<S['include'][P]>>  :
        P extends 'widgets' ? Array < widgetsGetPayload<S['include'][P]>>  :
        P extends '_count' ? DashboardsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (dashboardsArgs | dashboardsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'dashboard_statuses' ? dashboard_statusesGetPayload<S['select'][P]> | null :
        P extends 'dashboard_type' ? dashboard_typeGetPayload<S['select'][P]> | null :
        P extends 'sharing_info' ? Array < sharing_infoGetPayload<S['select'][P]>>  :
        P extends 'widgets' ? Array < widgetsGetPayload<S['select'][P]>>  :
        P extends '_count' ? DashboardsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof dashboards ? dashboards[P] : never
  } 
      : dashboards


  type dashboardsCountArgs = 
    Omit<dashboardsFindManyArgs, 'select' | 'include'> & {
      select?: DashboardsCountAggregateInputType | true
    }

  export interface dashboardsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Dashboards that matches the filter.
     * @param {dashboardsFindUniqueArgs} args - Arguments to find a Dashboards
     * @example
     * // Get one Dashboards
     * const dashboards = await prisma.dashboards.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends dashboardsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, dashboardsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'dashboards'> extends True ? Prisma__dashboardsClient<dashboardsGetPayload<T>> : Prisma__dashboardsClient<dashboardsGetPayload<T> | null, null>

    /**
     * Find one Dashboards that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {dashboardsFindUniqueOrThrowArgs} args - Arguments to find a Dashboards
     * @example
     * // Get one Dashboards
     * const dashboards = await prisma.dashboards.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends dashboardsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, dashboardsFindUniqueOrThrowArgs>
    ): Prisma__dashboardsClient<dashboardsGetPayload<T>>

    /**
     * Find the first Dashboards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dashboardsFindFirstArgs} args - Arguments to find a Dashboards
     * @example
     * // Get one Dashboards
     * const dashboards = await prisma.dashboards.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends dashboardsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, dashboardsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'dashboards'> extends True ? Prisma__dashboardsClient<dashboardsGetPayload<T>> : Prisma__dashboardsClient<dashboardsGetPayload<T> | null, null>

    /**
     * Find the first Dashboards that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dashboardsFindFirstOrThrowArgs} args - Arguments to find a Dashboards
     * @example
     * // Get one Dashboards
     * const dashboards = await prisma.dashboards.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends dashboardsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, dashboardsFindFirstOrThrowArgs>
    ): Prisma__dashboardsClient<dashboardsGetPayload<T>>

    /**
     * Find zero or more Dashboards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dashboardsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dashboards
     * const dashboards = await prisma.dashboards.findMany()
     * 
     * // Get first 10 Dashboards
     * const dashboards = await prisma.dashboards.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dashboardsWithIdOnly = await prisma.dashboards.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends dashboardsFindManyArgs>(
      args?: SelectSubset<T, dashboardsFindManyArgs>
    ): PrismaPromise<Array<dashboardsGetPayload<T>>>

    /**
     * Create a Dashboards.
     * @param {dashboardsCreateArgs} args - Arguments to create a Dashboards.
     * @example
     * // Create one Dashboards
     * const Dashboards = await prisma.dashboards.create({
     *   data: {
     *     // ... data to create a Dashboards
     *   }
     * })
     * 
    **/
    create<T extends dashboardsCreateArgs>(
      args: SelectSubset<T, dashboardsCreateArgs>
    ): Prisma__dashboardsClient<dashboardsGetPayload<T>>

    /**
     * Create many Dashboards.
     *     @param {dashboardsCreateManyArgs} args - Arguments to create many Dashboards.
     *     @example
     *     // Create many Dashboards
     *     const dashboards = await prisma.dashboards.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends dashboardsCreateManyArgs>(
      args?: SelectSubset<T, dashboardsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Dashboards.
     * @param {dashboardsDeleteArgs} args - Arguments to delete one Dashboards.
     * @example
     * // Delete one Dashboards
     * const Dashboards = await prisma.dashboards.delete({
     *   where: {
     *     // ... filter to delete one Dashboards
     *   }
     * })
     * 
    **/
    delete<T extends dashboardsDeleteArgs>(
      args: SelectSubset<T, dashboardsDeleteArgs>
    ): Prisma__dashboardsClient<dashboardsGetPayload<T>>

    /**
     * Update one Dashboards.
     * @param {dashboardsUpdateArgs} args - Arguments to update one Dashboards.
     * @example
     * // Update one Dashboards
     * const dashboards = await prisma.dashboards.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends dashboardsUpdateArgs>(
      args: SelectSubset<T, dashboardsUpdateArgs>
    ): Prisma__dashboardsClient<dashboardsGetPayload<T>>

    /**
     * Delete zero or more Dashboards.
     * @param {dashboardsDeleteManyArgs} args - Arguments to filter Dashboards to delete.
     * @example
     * // Delete a few Dashboards
     * const { count } = await prisma.dashboards.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends dashboardsDeleteManyArgs>(
      args?: SelectSubset<T, dashboardsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dashboards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dashboardsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dashboards
     * const dashboards = await prisma.dashboards.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends dashboardsUpdateManyArgs>(
      args: SelectSubset<T, dashboardsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Dashboards.
     * @param {dashboardsUpsertArgs} args - Arguments to update or create a Dashboards.
     * @example
     * // Update or create a Dashboards
     * const dashboards = await prisma.dashboards.upsert({
     *   create: {
     *     // ... data to create a Dashboards
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dashboards we want to update
     *   }
     * })
    **/
    upsert<T extends dashboardsUpsertArgs>(
      args: SelectSubset<T, dashboardsUpsertArgs>
    ): Prisma__dashboardsClient<dashboardsGetPayload<T>>

    /**
     * Count the number of Dashboards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dashboardsCountArgs} args - Arguments to filter Dashboards to count.
     * @example
     * // Count the number of Dashboards
     * const count = await prisma.dashboards.count({
     *   where: {
     *     // ... the filter for the Dashboards we want to count
     *   }
     * })
    **/
    count<T extends dashboardsCountArgs>(
      args?: Subset<T, dashboardsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DashboardsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dashboards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DashboardsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DashboardsAggregateArgs>(args: Subset<T, DashboardsAggregateArgs>): PrismaPromise<GetDashboardsAggregateType<T>>

    /**
     * Group by Dashboards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DashboardsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DashboardsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DashboardsGroupByArgs['orderBy'] }
        : { orderBy?: DashboardsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DashboardsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDashboardsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for dashboards.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__dashboardsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    dashboard_statuses<T extends dashboard_statusesArgs= {}>(args?: Subset<T, dashboard_statusesArgs>): Prisma__dashboard_statusesClient<dashboard_statusesGetPayload<T> | Null>;

    dashboard_type<T extends dashboard_typeArgs= {}>(args?: Subset<T, dashboard_typeArgs>): Prisma__dashboard_typeClient<dashboard_typeGetPayload<T> | Null>;

    sharing_info<T extends dashboards$sharing_infoArgs= {}>(args?: Subset<T, dashboards$sharing_infoArgs>): PrismaPromise<Array<sharing_infoGetPayload<T>>| Null>;

    widgets<T extends dashboards$widgetsArgs= {}>(args?: Subset<T, dashboards$widgetsArgs>): PrismaPromise<Array<widgetsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * dashboards base type for findUnique actions
   */
  export type dashboardsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the dashboards
     */
    select?: dashboardsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboardsInclude | null
    /**
     * Filter, which dashboards to fetch.
     */
    where: dashboardsWhereUniqueInput
  }

  /**
   * dashboards findUnique
   */
  export interface dashboardsFindUniqueArgs extends dashboardsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * dashboards findUniqueOrThrow
   */
  export type dashboardsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the dashboards
     */
    select?: dashboardsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboardsInclude | null
    /**
     * Filter, which dashboards to fetch.
     */
    where: dashboardsWhereUniqueInput
  }


  /**
   * dashboards base type for findFirst actions
   */
  export type dashboardsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the dashboards
     */
    select?: dashboardsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboardsInclude | null
    /**
     * Filter, which dashboards to fetch.
     */
    where?: dashboardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dashboards to fetch.
     */
    orderBy?: Enumerable<dashboardsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for dashboards.
     */
    cursor?: dashboardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dashboards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dashboards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of dashboards.
     */
    distinct?: Enumerable<DashboardsScalarFieldEnum>
  }

  /**
   * dashboards findFirst
   */
  export interface dashboardsFindFirstArgs extends dashboardsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * dashboards findFirstOrThrow
   */
  export type dashboardsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the dashboards
     */
    select?: dashboardsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboardsInclude | null
    /**
     * Filter, which dashboards to fetch.
     */
    where?: dashboardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dashboards to fetch.
     */
    orderBy?: Enumerable<dashboardsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for dashboards.
     */
    cursor?: dashboardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dashboards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dashboards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of dashboards.
     */
    distinct?: Enumerable<DashboardsScalarFieldEnum>
  }


  /**
   * dashboards findMany
   */
  export type dashboardsFindManyArgs = {
    /**
     * Select specific fields to fetch from the dashboards
     */
    select?: dashboardsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboardsInclude | null
    /**
     * Filter, which dashboards to fetch.
     */
    where?: dashboardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dashboards to fetch.
     */
    orderBy?: Enumerable<dashboardsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing dashboards.
     */
    cursor?: dashboardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dashboards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dashboards.
     */
    skip?: number
    distinct?: Enumerable<DashboardsScalarFieldEnum>
  }


  /**
   * dashboards create
   */
  export type dashboardsCreateArgs = {
    /**
     * Select specific fields to fetch from the dashboards
     */
    select?: dashboardsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboardsInclude | null
    /**
     * The data needed to create a dashboards.
     */
    data: XOR<dashboardsCreateInput, dashboardsUncheckedCreateInput>
  }


  /**
   * dashboards createMany
   */
  export type dashboardsCreateManyArgs = {
    /**
     * The data used to create many dashboards.
     */
    data: Enumerable<dashboardsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * dashboards update
   */
  export type dashboardsUpdateArgs = {
    /**
     * Select specific fields to fetch from the dashboards
     */
    select?: dashboardsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboardsInclude | null
    /**
     * The data needed to update a dashboards.
     */
    data: XOR<dashboardsUpdateInput, dashboardsUncheckedUpdateInput>
    /**
     * Choose, which dashboards to update.
     */
    where: dashboardsWhereUniqueInput
  }


  /**
   * dashboards updateMany
   */
  export type dashboardsUpdateManyArgs = {
    /**
     * The data used to update dashboards.
     */
    data: XOR<dashboardsUpdateManyMutationInput, dashboardsUncheckedUpdateManyInput>
    /**
     * Filter which dashboards to update
     */
    where?: dashboardsWhereInput
  }


  /**
   * dashboards upsert
   */
  export type dashboardsUpsertArgs = {
    /**
     * Select specific fields to fetch from the dashboards
     */
    select?: dashboardsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboardsInclude | null
    /**
     * The filter to search for the dashboards to update in case it exists.
     */
    where: dashboardsWhereUniqueInput
    /**
     * In case the dashboards found by the `where` argument doesn't exist, create a new dashboards with this data.
     */
    create: XOR<dashboardsCreateInput, dashboardsUncheckedCreateInput>
    /**
     * In case the dashboards was found with the provided `where` argument, update it with this data.
     */
    update: XOR<dashboardsUpdateInput, dashboardsUncheckedUpdateInput>
  }


  /**
   * dashboards delete
   */
  export type dashboardsDeleteArgs = {
    /**
     * Select specific fields to fetch from the dashboards
     */
    select?: dashboardsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboardsInclude | null
    /**
     * Filter which dashboards to delete.
     */
    where: dashboardsWhereUniqueInput
  }


  /**
   * dashboards deleteMany
   */
  export type dashboardsDeleteManyArgs = {
    /**
     * Filter which dashboards to delete
     */
    where?: dashboardsWhereInput
  }


  /**
   * dashboards.sharing_info
   */
  export type dashboards$sharing_infoArgs = {
    /**
     * Select specific fields to fetch from the sharing_info
     */
    select?: sharing_infoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sharing_infoInclude | null
    where?: sharing_infoWhereInput
    orderBy?: Enumerable<sharing_infoOrderByWithRelationInput>
    cursor?: sharing_infoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Sharing_infoScalarFieldEnum>
  }


  /**
   * dashboards.widgets
   */
  export type dashboards$widgetsArgs = {
    /**
     * Select specific fields to fetch from the widgets
     */
    select?: widgetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: widgetsInclude | null
    where?: widgetsWhereInput
    orderBy?: Enumerable<widgetsOrderByWithRelationInput>
    cursor?: widgetsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<WidgetsScalarFieldEnum>
  }


  /**
   * dashboards without action
   */
  export type dashboardsArgs = {
    /**
     * Select specific fields to fetch from the dashboards
     */
    select?: dashboardsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboardsInclude | null
  }



  /**
   * Model sharing_info
   */


  export type AggregateSharing_info = {
    _count: Sharing_infoCountAggregateOutputType | null
    _avg: Sharing_infoAvgAggregateOutputType | null
    _sum: Sharing_infoSumAggregateOutputType | null
    _min: Sharing_infoMinAggregateOutputType | null
    _max: Sharing_infoMaxAggregateOutputType | null
  }

  export type Sharing_infoAvgAggregateOutputType = {
    id: number | null
    dashboard_id: number | null
    user_id: number | null
  }

  export type Sharing_infoSumAggregateOutputType = {
    id: number | null
    dashboard_id: number | null
    user_id: number | null
  }

  export type Sharing_infoMinAggregateOutputType = {
    id: number | null
    dashboard_id: number | null
    email: string | null
    user_id: number | null
  }

  export type Sharing_infoMaxAggregateOutputType = {
    id: number | null
    dashboard_id: number | null
    email: string | null
    user_id: number | null
  }

  export type Sharing_infoCountAggregateOutputType = {
    id: number
    dashboard_id: number
    email: number
    user_id: number
    _all: number
  }


  export type Sharing_infoAvgAggregateInputType = {
    id?: true
    dashboard_id?: true
    user_id?: true
  }

  export type Sharing_infoSumAggregateInputType = {
    id?: true
    dashboard_id?: true
    user_id?: true
  }

  export type Sharing_infoMinAggregateInputType = {
    id?: true
    dashboard_id?: true
    email?: true
    user_id?: true
  }

  export type Sharing_infoMaxAggregateInputType = {
    id?: true
    dashboard_id?: true
    email?: true
    user_id?: true
  }

  export type Sharing_infoCountAggregateInputType = {
    id?: true
    dashboard_id?: true
    email?: true
    user_id?: true
    _all?: true
  }

  export type Sharing_infoAggregateArgs = {
    /**
     * Filter which sharing_info to aggregate.
     */
    where?: sharing_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sharing_infos to fetch.
     */
    orderBy?: Enumerable<sharing_infoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: sharing_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sharing_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sharing_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sharing_infos
    **/
    _count?: true | Sharing_infoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Sharing_infoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Sharing_infoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Sharing_infoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Sharing_infoMaxAggregateInputType
  }

  export type GetSharing_infoAggregateType<T extends Sharing_infoAggregateArgs> = {
        [P in keyof T & keyof AggregateSharing_info]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSharing_info[P]>
      : GetScalarType<T[P], AggregateSharing_info[P]>
  }




  export type Sharing_infoGroupByArgs = {
    where?: sharing_infoWhereInput
    orderBy?: Enumerable<sharing_infoOrderByWithAggregationInput>
    by: Sharing_infoScalarFieldEnum[]
    having?: sharing_infoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Sharing_infoCountAggregateInputType | true
    _avg?: Sharing_infoAvgAggregateInputType
    _sum?: Sharing_infoSumAggregateInputType
    _min?: Sharing_infoMinAggregateInputType
    _max?: Sharing_infoMaxAggregateInputType
  }


  export type Sharing_infoGroupByOutputType = {
    id: number
    dashboard_id: number | null
    email: string | null
    user_id: number | null
    _count: Sharing_infoCountAggregateOutputType | null
    _avg: Sharing_infoAvgAggregateOutputType | null
    _sum: Sharing_infoSumAggregateOutputType | null
    _min: Sharing_infoMinAggregateOutputType | null
    _max: Sharing_infoMaxAggregateOutputType | null
  }

  type GetSharing_infoGroupByPayload<T extends Sharing_infoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Sharing_infoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Sharing_infoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Sharing_infoGroupByOutputType[P]>
            : GetScalarType<T[P], Sharing_infoGroupByOutputType[P]>
        }
      >
    >


  export type sharing_infoSelect = {
    id?: boolean
    dashboard_id?: boolean
    email?: boolean
    user_id?: boolean
    dashboards?: boolean | dashboardsArgs
  }


  export type sharing_infoInclude = {
    dashboards?: boolean | dashboardsArgs
  }

  export type sharing_infoGetPayload<S extends boolean | null | undefined | sharing_infoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? sharing_info :
    S extends undefined ? never :
    S extends { include: any } & (sharing_infoArgs | sharing_infoFindManyArgs)
    ? sharing_info  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'dashboards' ? dashboardsGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (sharing_infoArgs | sharing_infoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'dashboards' ? dashboardsGetPayload<S['select'][P]> | null :  P extends keyof sharing_info ? sharing_info[P] : never
  } 
      : sharing_info


  type sharing_infoCountArgs = 
    Omit<sharing_infoFindManyArgs, 'select' | 'include'> & {
      select?: Sharing_infoCountAggregateInputType | true
    }

  export interface sharing_infoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Sharing_info that matches the filter.
     * @param {sharing_infoFindUniqueArgs} args - Arguments to find a Sharing_info
     * @example
     * // Get one Sharing_info
     * const sharing_info = await prisma.sharing_info.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends sharing_infoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, sharing_infoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'sharing_info'> extends True ? Prisma__sharing_infoClient<sharing_infoGetPayload<T>> : Prisma__sharing_infoClient<sharing_infoGetPayload<T> | null, null>

    /**
     * Find one Sharing_info that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {sharing_infoFindUniqueOrThrowArgs} args - Arguments to find a Sharing_info
     * @example
     * // Get one Sharing_info
     * const sharing_info = await prisma.sharing_info.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends sharing_infoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, sharing_infoFindUniqueOrThrowArgs>
    ): Prisma__sharing_infoClient<sharing_infoGetPayload<T>>

    /**
     * Find the first Sharing_info that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sharing_infoFindFirstArgs} args - Arguments to find a Sharing_info
     * @example
     * // Get one Sharing_info
     * const sharing_info = await prisma.sharing_info.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends sharing_infoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, sharing_infoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'sharing_info'> extends True ? Prisma__sharing_infoClient<sharing_infoGetPayload<T>> : Prisma__sharing_infoClient<sharing_infoGetPayload<T> | null, null>

    /**
     * Find the first Sharing_info that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sharing_infoFindFirstOrThrowArgs} args - Arguments to find a Sharing_info
     * @example
     * // Get one Sharing_info
     * const sharing_info = await prisma.sharing_info.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends sharing_infoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, sharing_infoFindFirstOrThrowArgs>
    ): Prisma__sharing_infoClient<sharing_infoGetPayload<T>>

    /**
     * Find zero or more Sharing_infos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sharing_infoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sharing_infos
     * const sharing_infos = await prisma.sharing_info.findMany()
     * 
     * // Get first 10 Sharing_infos
     * const sharing_infos = await prisma.sharing_info.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sharing_infoWithIdOnly = await prisma.sharing_info.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends sharing_infoFindManyArgs>(
      args?: SelectSubset<T, sharing_infoFindManyArgs>
    ): PrismaPromise<Array<sharing_infoGetPayload<T>>>

    /**
     * Create a Sharing_info.
     * @param {sharing_infoCreateArgs} args - Arguments to create a Sharing_info.
     * @example
     * // Create one Sharing_info
     * const Sharing_info = await prisma.sharing_info.create({
     *   data: {
     *     // ... data to create a Sharing_info
     *   }
     * })
     * 
    **/
    create<T extends sharing_infoCreateArgs>(
      args: SelectSubset<T, sharing_infoCreateArgs>
    ): Prisma__sharing_infoClient<sharing_infoGetPayload<T>>

    /**
     * Create many Sharing_infos.
     *     @param {sharing_infoCreateManyArgs} args - Arguments to create many Sharing_infos.
     *     @example
     *     // Create many Sharing_infos
     *     const sharing_info = await prisma.sharing_info.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends sharing_infoCreateManyArgs>(
      args?: SelectSubset<T, sharing_infoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Sharing_info.
     * @param {sharing_infoDeleteArgs} args - Arguments to delete one Sharing_info.
     * @example
     * // Delete one Sharing_info
     * const Sharing_info = await prisma.sharing_info.delete({
     *   where: {
     *     // ... filter to delete one Sharing_info
     *   }
     * })
     * 
    **/
    delete<T extends sharing_infoDeleteArgs>(
      args: SelectSubset<T, sharing_infoDeleteArgs>
    ): Prisma__sharing_infoClient<sharing_infoGetPayload<T>>

    /**
     * Update one Sharing_info.
     * @param {sharing_infoUpdateArgs} args - Arguments to update one Sharing_info.
     * @example
     * // Update one Sharing_info
     * const sharing_info = await prisma.sharing_info.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends sharing_infoUpdateArgs>(
      args: SelectSubset<T, sharing_infoUpdateArgs>
    ): Prisma__sharing_infoClient<sharing_infoGetPayload<T>>

    /**
     * Delete zero or more Sharing_infos.
     * @param {sharing_infoDeleteManyArgs} args - Arguments to filter Sharing_infos to delete.
     * @example
     * // Delete a few Sharing_infos
     * const { count } = await prisma.sharing_info.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends sharing_infoDeleteManyArgs>(
      args?: SelectSubset<T, sharing_infoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sharing_infos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sharing_infoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sharing_infos
     * const sharing_info = await prisma.sharing_info.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends sharing_infoUpdateManyArgs>(
      args: SelectSubset<T, sharing_infoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Sharing_info.
     * @param {sharing_infoUpsertArgs} args - Arguments to update or create a Sharing_info.
     * @example
     * // Update or create a Sharing_info
     * const sharing_info = await prisma.sharing_info.upsert({
     *   create: {
     *     // ... data to create a Sharing_info
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sharing_info we want to update
     *   }
     * })
    **/
    upsert<T extends sharing_infoUpsertArgs>(
      args: SelectSubset<T, sharing_infoUpsertArgs>
    ): Prisma__sharing_infoClient<sharing_infoGetPayload<T>>

    /**
     * Count the number of Sharing_infos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sharing_infoCountArgs} args - Arguments to filter Sharing_infos to count.
     * @example
     * // Count the number of Sharing_infos
     * const count = await prisma.sharing_info.count({
     *   where: {
     *     // ... the filter for the Sharing_infos we want to count
     *   }
     * })
    **/
    count<T extends sharing_infoCountArgs>(
      args?: Subset<T, sharing_infoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Sharing_infoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sharing_info.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Sharing_infoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Sharing_infoAggregateArgs>(args: Subset<T, Sharing_infoAggregateArgs>): PrismaPromise<GetSharing_infoAggregateType<T>>

    /**
     * Group by Sharing_info.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Sharing_infoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Sharing_infoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Sharing_infoGroupByArgs['orderBy'] }
        : { orderBy?: Sharing_infoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Sharing_infoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSharing_infoGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for sharing_info.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__sharing_infoClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    dashboards<T extends dashboardsArgs= {}>(args?: Subset<T, dashboardsArgs>): Prisma__dashboardsClient<dashboardsGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * sharing_info base type for findUnique actions
   */
  export type sharing_infoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the sharing_info
     */
    select?: sharing_infoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sharing_infoInclude | null
    /**
     * Filter, which sharing_info to fetch.
     */
    where: sharing_infoWhereUniqueInput
  }

  /**
   * sharing_info findUnique
   */
  export interface sharing_infoFindUniqueArgs extends sharing_infoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * sharing_info findUniqueOrThrow
   */
  export type sharing_infoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the sharing_info
     */
    select?: sharing_infoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sharing_infoInclude | null
    /**
     * Filter, which sharing_info to fetch.
     */
    where: sharing_infoWhereUniqueInput
  }


  /**
   * sharing_info base type for findFirst actions
   */
  export type sharing_infoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the sharing_info
     */
    select?: sharing_infoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sharing_infoInclude | null
    /**
     * Filter, which sharing_info to fetch.
     */
    where?: sharing_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sharing_infos to fetch.
     */
    orderBy?: Enumerable<sharing_infoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sharing_infos.
     */
    cursor?: sharing_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sharing_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sharing_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sharing_infos.
     */
    distinct?: Enumerable<Sharing_infoScalarFieldEnum>
  }

  /**
   * sharing_info findFirst
   */
  export interface sharing_infoFindFirstArgs extends sharing_infoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * sharing_info findFirstOrThrow
   */
  export type sharing_infoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the sharing_info
     */
    select?: sharing_infoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sharing_infoInclude | null
    /**
     * Filter, which sharing_info to fetch.
     */
    where?: sharing_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sharing_infos to fetch.
     */
    orderBy?: Enumerable<sharing_infoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sharing_infos.
     */
    cursor?: sharing_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sharing_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sharing_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sharing_infos.
     */
    distinct?: Enumerable<Sharing_infoScalarFieldEnum>
  }


  /**
   * sharing_info findMany
   */
  export type sharing_infoFindManyArgs = {
    /**
     * Select specific fields to fetch from the sharing_info
     */
    select?: sharing_infoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sharing_infoInclude | null
    /**
     * Filter, which sharing_infos to fetch.
     */
    where?: sharing_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sharing_infos to fetch.
     */
    orderBy?: Enumerable<sharing_infoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sharing_infos.
     */
    cursor?: sharing_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sharing_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sharing_infos.
     */
    skip?: number
    distinct?: Enumerable<Sharing_infoScalarFieldEnum>
  }


  /**
   * sharing_info create
   */
  export type sharing_infoCreateArgs = {
    /**
     * Select specific fields to fetch from the sharing_info
     */
    select?: sharing_infoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sharing_infoInclude | null
    /**
     * The data needed to create a sharing_info.
     */
    data: XOR<sharing_infoCreateInput, sharing_infoUncheckedCreateInput>
  }


  /**
   * sharing_info createMany
   */
  export type sharing_infoCreateManyArgs = {
    /**
     * The data used to create many sharing_infos.
     */
    data: Enumerable<sharing_infoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * sharing_info update
   */
  export type sharing_infoUpdateArgs = {
    /**
     * Select specific fields to fetch from the sharing_info
     */
    select?: sharing_infoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sharing_infoInclude | null
    /**
     * The data needed to update a sharing_info.
     */
    data: XOR<sharing_infoUpdateInput, sharing_infoUncheckedUpdateInput>
    /**
     * Choose, which sharing_info to update.
     */
    where: sharing_infoWhereUniqueInput
  }


  /**
   * sharing_info updateMany
   */
  export type sharing_infoUpdateManyArgs = {
    /**
     * The data used to update sharing_infos.
     */
    data: XOR<sharing_infoUpdateManyMutationInput, sharing_infoUncheckedUpdateManyInput>
    /**
     * Filter which sharing_infos to update
     */
    where?: sharing_infoWhereInput
  }


  /**
   * sharing_info upsert
   */
  export type sharing_infoUpsertArgs = {
    /**
     * Select specific fields to fetch from the sharing_info
     */
    select?: sharing_infoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sharing_infoInclude | null
    /**
     * The filter to search for the sharing_info to update in case it exists.
     */
    where: sharing_infoWhereUniqueInput
    /**
     * In case the sharing_info found by the `where` argument doesn't exist, create a new sharing_info with this data.
     */
    create: XOR<sharing_infoCreateInput, sharing_infoUncheckedCreateInput>
    /**
     * In case the sharing_info was found with the provided `where` argument, update it with this data.
     */
    update: XOR<sharing_infoUpdateInput, sharing_infoUncheckedUpdateInput>
  }


  /**
   * sharing_info delete
   */
  export type sharing_infoDeleteArgs = {
    /**
     * Select specific fields to fetch from the sharing_info
     */
    select?: sharing_infoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sharing_infoInclude | null
    /**
     * Filter which sharing_info to delete.
     */
    where: sharing_infoWhereUniqueInput
  }


  /**
   * sharing_info deleteMany
   */
  export type sharing_infoDeleteManyArgs = {
    /**
     * Filter which sharing_infos to delete
     */
    where?: sharing_infoWhereInput
  }


  /**
   * sharing_info without action
   */
  export type sharing_infoArgs = {
    /**
     * Select specific fields to fetch from the sharing_info
     */
    select?: sharing_infoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sharing_infoInclude | null
  }



  /**
   * Model widgets
   */


  export type AggregateWidgets = {
    _count: WidgetsCountAggregateOutputType | null
    _avg: WidgetsAvgAggregateOutputType | null
    _sum: WidgetsSumAggregateOutputType | null
    _min: WidgetsMinAggregateOutputType | null
    _max: WidgetsMaxAggregateOutputType | null
  }

  export type WidgetsAvgAggregateOutputType = {
    id: number | null
    dashboard_id: number | null
    platform_id: number | null
    widget_template_id: number | null
  }

  export type WidgetsSumAggregateOutputType = {
    id: number | null
    dashboard_id: number | null
    platform_id: number | null
    widget_template_id: number | null
  }

  export type WidgetsMinAggregateOutputType = {
    id: number | null
    dashboard_id: number | null
    platform_id: number | null
    widget_template_id: number | null
    widget_account_id: string | null
    widget_property_id: string | null
    widget_start_ts: Date | null
    widget_end_ts: Date | null
    widget_size: widget_size | null
    widget_type: widget_type | null
    is_hidden: boolean | null
    widget_name: string | null
  }

  export type WidgetsMaxAggregateOutputType = {
    id: number | null
    dashboard_id: number | null
    platform_id: number | null
    widget_template_id: number | null
    widget_account_id: string | null
    widget_property_id: string | null
    widget_start_ts: Date | null
    widget_end_ts: Date | null
    widget_size: widget_size | null
    widget_type: widget_type | null
    is_hidden: boolean | null
    widget_name: string | null
  }

  export type WidgetsCountAggregateOutputType = {
    id: number
    dashboard_id: number
    platform_id: number
    widget_template_id: number
    widget_account_id: number
    widget_property_id: number
    widget_start_ts: number
    widget_end_ts: number
    widget_settings: number
    widget_size: number
    widget_type: number
    is_hidden: number
    widget_name: number
    _all: number
  }


  export type WidgetsAvgAggregateInputType = {
    id?: true
    dashboard_id?: true
    platform_id?: true
    widget_template_id?: true
  }

  export type WidgetsSumAggregateInputType = {
    id?: true
    dashboard_id?: true
    platform_id?: true
    widget_template_id?: true
  }

  export type WidgetsMinAggregateInputType = {
    id?: true
    dashboard_id?: true
    platform_id?: true
    widget_template_id?: true
    widget_account_id?: true
    widget_property_id?: true
    widget_start_ts?: true
    widget_end_ts?: true
    widget_size?: true
    widget_type?: true
    is_hidden?: true
    widget_name?: true
  }

  export type WidgetsMaxAggregateInputType = {
    id?: true
    dashboard_id?: true
    platform_id?: true
    widget_template_id?: true
    widget_account_id?: true
    widget_property_id?: true
    widget_start_ts?: true
    widget_end_ts?: true
    widget_size?: true
    widget_type?: true
    is_hidden?: true
    widget_name?: true
  }

  export type WidgetsCountAggregateInputType = {
    id?: true
    dashboard_id?: true
    platform_id?: true
    widget_template_id?: true
    widget_account_id?: true
    widget_property_id?: true
    widget_start_ts?: true
    widget_end_ts?: true
    widget_settings?: true
    widget_size?: true
    widget_type?: true
    is_hidden?: true
    widget_name?: true
    _all?: true
  }

  export type WidgetsAggregateArgs = {
    /**
     * Filter which widgets to aggregate.
     */
    where?: widgetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of widgets to fetch.
     */
    orderBy?: Enumerable<widgetsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: widgetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` widgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` widgets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned widgets
    **/
    _count?: true | WidgetsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WidgetsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WidgetsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WidgetsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WidgetsMaxAggregateInputType
  }

  export type GetWidgetsAggregateType<T extends WidgetsAggregateArgs> = {
        [P in keyof T & keyof AggregateWidgets]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWidgets[P]>
      : GetScalarType<T[P], AggregateWidgets[P]>
  }




  export type WidgetsGroupByArgs = {
    where?: widgetsWhereInput
    orderBy?: Enumerable<widgetsOrderByWithAggregationInput>
    by: WidgetsScalarFieldEnum[]
    having?: widgetsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WidgetsCountAggregateInputType | true
    _avg?: WidgetsAvgAggregateInputType
    _sum?: WidgetsSumAggregateInputType
    _min?: WidgetsMinAggregateInputType
    _max?: WidgetsMaxAggregateInputType
  }


  export type WidgetsGroupByOutputType = {
    id: number
    dashboard_id: number | null
    platform_id: number | null
    widget_template_id: number | null
    widget_account_id: string | null
    widget_property_id: string | null
    widget_start_ts: Date | null
    widget_end_ts: Date | null
    widget_settings: JsonValue | null
    widget_size: widget_size | null
    widget_type: widget_type | null
    is_hidden: boolean | null
    widget_name: string | null
    _count: WidgetsCountAggregateOutputType | null
    _avg: WidgetsAvgAggregateOutputType | null
    _sum: WidgetsSumAggregateOutputType | null
    _min: WidgetsMinAggregateOutputType | null
    _max: WidgetsMaxAggregateOutputType | null
  }

  type GetWidgetsGroupByPayload<T extends WidgetsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<WidgetsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WidgetsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WidgetsGroupByOutputType[P]>
            : GetScalarType<T[P], WidgetsGroupByOutputType[P]>
        }
      >
    >


  export type widgetsSelect = {
    id?: boolean
    dashboard_id?: boolean
    platform_id?: boolean
    widget_template_id?: boolean
    widget_account_id?: boolean
    widget_property_id?: boolean
    widget_start_ts?: boolean
    widget_end_ts?: boolean
    widget_settings?: boolean
    widget_size?: boolean
    widget_type?: boolean
    is_hidden?: boolean
    widget_name?: boolean
    platforms?: boolean | platformsArgs
    widget_templates?: boolean | widget_templatesArgs
    dashboards?: boolean | dashboardsArgs
  }


  export type widgetsInclude = {
    platforms?: boolean | platformsArgs
    widget_templates?: boolean | widget_templatesArgs
    dashboards?: boolean | dashboardsArgs
  }

  export type widgetsGetPayload<S extends boolean | null | undefined | widgetsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? widgets :
    S extends undefined ? never :
    S extends { include: any } & (widgetsArgs | widgetsFindManyArgs)
    ? widgets  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'platforms' ? platformsGetPayload<S['include'][P]> | null :
        P extends 'widget_templates' ? widget_templatesGetPayload<S['include'][P]> | null :
        P extends 'dashboards' ? dashboardsGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (widgetsArgs | widgetsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'platforms' ? platformsGetPayload<S['select'][P]> | null :
        P extends 'widget_templates' ? widget_templatesGetPayload<S['select'][P]> | null :
        P extends 'dashboards' ? dashboardsGetPayload<S['select'][P]> | null :  P extends keyof widgets ? widgets[P] : never
  } 
      : widgets


  type widgetsCountArgs = 
    Omit<widgetsFindManyArgs, 'select' | 'include'> & {
      select?: WidgetsCountAggregateInputType | true
    }

  export interface widgetsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Widgets that matches the filter.
     * @param {widgetsFindUniqueArgs} args - Arguments to find a Widgets
     * @example
     * // Get one Widgets
     * const widgets = await prisma.widgets.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends widgetsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, widgetsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'widgets'> extends True ? Prisma__widgetsClient<widgetsGetPayload<T>> : Prisma__widgetsClient<widgetsGetPayload<T> | null, null>

    /**
     * Find one Widgets that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {widgetsFindUniqueOrThrowArgs} args - Arguments to find a Widgets
     * @example
     * // Get one Widgets
     * const widgets = await prisma.widgets.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends widgetsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, widgetsFindUniqueOrThrowArgs>
    ): Prisma__widgetsClient<widgetsGetPayload<T>>

    /**
     * Find the first Widgets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {widgetsFindFirstArgs} args - Arguments to find a Widgets
     * @example
     * // Get one Widgets
     * const widgets = await prisma.widgets.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends widgetsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, widgetsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'widgets'> extends True ? Prisma__widgetsClient<widgetsGetPayload<T>> : Prisma__widgetsClient<widgetsGetPayload<T> | null, null>

    /**
     * Find the first Widgets that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {widgetsFindFirstOrThrowArgs} args - Arguments to find a Widgets
     * @example
     * // Get one Widgets
     * const widgets = await prisma.widgets.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends widgetsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, widgetsFindFirstOrThrowArgs>
    ): Prisma__widgetsClient<widgetsGetPayload<T>>

    /**
     * Find zero or more Widgets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {widgetsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Widgets
     * const widgets = await prisma.widgets.findMany()
     * 
     * // Get first 10 Widgets
     * const widgets = await prisma.widgets.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const widgetsWithIdOnly = await prisma.widgets.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends widgetsFindManyArgs>(
      args?: SelectSubset<T, widgetsFindManyArgs>
    ): PrismaPromise<Array<widgetsGetPayload<T>>>

    /**
     * Create a Widgets.
     * @param {widgetsCreateArgs} args - Arguments to create a Widgets.
     * @example
     * // Create one Widgets
     * const Widgets = await prisma.widgets.create({
     *   data: {
     *     // ... data to create a Widgets
     *   }
     * })
     * 
    **/
    create<T extends widgetsCreateArgs>(
      args: SelectSubset<T, widgetsCreateArgs>
    ): Prisma__widgetsClient<widgetsGetPayload<T>>

    /**
     * Create many Widgets.
     *     @param {widgetsCreateManyArgs} args - Arguments to create many Widgets.
     *     @example
     *     // Create many Widgets
     *     const widgets = await prisma.widgets.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends widgetsCreateManyArgs>(
      args?: SelectSubset<T, widgetsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Widgets.
     * @param {widgetsDeleteArgs} args - Arguments to delete one Widgets.
     * @example
     * // Delete one Widgets
     * const Widgets = await prisma.widgets.delete({
     *   where: {
     *     // ... filter to delete one Widgets
     *   }
     * })
     * 
    **/
    delete<T extends widgetsDeleteArgs>(
      args: SelectSubset<T, widgetsDeleteArgs>
    ): Prisma__widgetsClient<widgetsGetPayload<T>>

    /**
     * Update one Widgets.
     * @param {widgetsUpdateArgs} args - Arguments to update one Widgets.
     * @example
     * // Update one Widgets
     * const widgets = await prisma.widgets.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends widgetsUpdateArgs>(
      args: SelectSubset<T, widgetsUpdateArgs>
    ): Prisma__widgetsClient<widgetsGetPayload<T>>

    /**
     * Delete zero or more Widgets.
     * @param {widgetsDeleteManyArgs} args - Arguments to filter Widgets to delete.
     * @example
     * // Delete a few Widgets
     * const { count } = await prisma.widgets.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends widgetsDeleteManyArgs>(
      args?: SelectSubset<T, widgetsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Widgets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {widgetsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Widgets
     * const widgets = await prisma.widgets.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends widgetsUpdateManyArgs>(
      args: SelectSubset<T, widgetsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Widgets.
     * @param {widgetsUpsertArgs} args - Arguments to update or create a Widgets.
     * @example
     * // Update or create a Widgets
     * const widgets = await prisma.widgets.upsert({
     *   create: {
     *     // ... data to create a Widgets
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Widgets we want to update
     *   }
     * })
    **/
    upsert<T extends widgetsUpsertArgs>(
      args: SelectSubset<T, widgetsUpsertArgs>
    ): Prisma__widgetsClient<widgetsGetPayload<T>>

    /**
     * Count the number of Widgets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {widgetsCountArgs} args - Arguments to filter Widgets to count.
     * @example
     * // Count the number of Widgets
     * const count = await prisma.widgets.count({
     *   where: {
     *     // ... the filter for the Widgets we want to count
     *   }
     * })
    **/
    count<T extends widgetsCountArgs>(
      args?: Subset<T, widgetsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WidgetsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Widgets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WidgetsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WidgetsAggregateArgs>(args: Subset<T, WidgetsAggregateArgs>): PrismaPromise<GetWidgetsAggregateType<T>>

    /**
     * Group by Widgets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WidgetsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WidgetsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WidgetsGroupByArgs['orderBy'] }
        : { orderBy?: WidgetsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WidgetsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWidgetsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for widgets.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__widgetsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    platforms<T extends platformsArgs= {}>(args?: Subset<T, platformsArgs>): Prisma__platformsClient<platformsGetPayload<T> | Null>;

    widget_templates<T extends widget_templatesArgs= {}>(args?: Subset<T, widget_templatesArgs>): Prisma__widget_templatesClient<widget_templatesGetPayload<T> | Null>;

    dashboards<T extends dashboardsArgs= {}>(args?: Subset<T, dashboardsArgs>): Prisma__dashboardsClient<dashboardsGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * widgets base type for findUnique actions
   */
  export type widgetsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the widgets
     */
    select?: widgetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: widgetsInclude | null
    /**
     * Filter, which widgets to fetch.
     */
    where: widgetsWhereUniqueInput
  }

  /**
   * widgets findUnique
   */
  export interface widgetsFindUniqueArgs extends widgetsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * widgets findUniqueOrThrow
   */
  export type widgetsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the widgets
     */
    select?: widgetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: widgetsInclude | null
    /**
     * Filter, which widgets to fetch.
     */
    where: widgetsWhereUniqueInput
  }


  /**
   * widgets base type for findFirst actions
   */
  export type widgetsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the widgets
     */
    select?: widgetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: widgetsInclude | null
    /**
     * Filter, which widgets to fetch.
     */
    where?: widgetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of widgets to fetch.
     */
    orderBy?: Enumerable<widgetsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for widgets.
     */
    cursor?: widgetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` widgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` widgets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of widgets.
     */
    distinct?: Enumerable<WidgetsScalarFieldEnum>
  }

  /**
   * widgets findFirst
   */
  export interface widgetsFindFirstArgs extends widgetsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * widgets findFirstOrThrow
   */
  export type widgetsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the widgets
     */
    select?: widgetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: widgetsInclude | null
    /**
     * Filter, which widgets to fetch.
     */
    where?: widgetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of widgets to fetch.
     */
    orderBy?: Enumerable<widgetsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for widgets.
     */
    cursor?: widgetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` widgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` widgets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of widgets.
     */
    distinct?: Enumerable<WidgetsScalarFieldEnum>
  }


  /**
   * widgets findMany
   */
  export type widgetsFindManyArgs = {
    /**
     * Select specific fields to fetch from the widgets
     */
    select?: widgetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: widgetsInclude | null
    /**
     * Filter, which widgets to fetch.
     */
    where?: widgetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of widgets to fetch.
     */
    orderBy?: Enumerable<widgetsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing widgets.
     */
    cursor?: widgetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` widgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` widgets.
     */
    skip?: number
    distinct?: Enumerable<WidgetsScalarFieldEnum>
  }


  /**
   * widgets create
   */
  export type widgetsCreateArgs = {
    /**
     * Select specific fields to fetch from the widgets
     */
    select?: widgetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: widgetsInclude | null
    /**
     * The data needed to create a widgets.
     */
    data: XOR<widgetsCreateInput, widgetsUncheckedCreateInput>
  }


  /**
   * widgets createMany
   */
  export type widgetsCreateManyArgs = {
    /**
     * The data used to create many widgets.
     */
    data: Enumerable<widgetsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * widgets update
   */
  export type widgetsUpdateArgs = {
    /**
     * Select specific fields to fetch from the widgets
     */
    select?: widgetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: widgetsInclude | null
    /**
     * The data needed to update a widgets.
     */
    data: XOR<widgetsUpdateInput, widgetsUncheckedUpdateInput>
    /**
     * Choose, which widgets to update.
     */
    where: widgetsWhereUniqueInput
  }


  /**
   * widgets updateMany
   */
  export type widgetsUpdateManyArgs = {
    /**
     * The data used to update widgets.
     */
    data: XOR<widgetsUpdateManyMutationInput, widgetsUncheckedUpdateManyInput>
    /**
     * Filter which widgets to update
     */
    where?: widgetsWhereInput
  }


  /**
   * widgets upsert
   */
  export type widgetsUpsertArgs = {
    /**
     * Select specific fields to fetch from the widgets
     */
    select?: widgetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: widgetsInclude | null
    /**
     * The filter to search for the widgets to update in case it exists.
     */
    where: widgetsWhereUniqueInput
    /**
     * In case the widgets found by the `where` argument doesn't exist, create a new widgets with this data.
     */
    create: XOR<widgetsCreateInput, widgetsUncheckedCreateInput>
    /**
     * In case the widgets was found with the provided `where` argument, update it with this data.
     */
    update: XOR<widgetsUpdateInput, widgetsUncheckedUpdateInput>
  }


  /**
   * widgets delete
   */
  export type widgetsDeleteArgs = {
    /**
     * Select specific fields to fetch from the widgets
     */
    select?: widgetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: widgetsInclude | null
    /**
     * Filter which widgets to delete.
     */
    where: widgetsWhereUniqueInput
  }


  /**
   * widgets deleteMany
   */
  export type widgetsDeleteManyArgs = {
    /**
     * Filter which widgets to delete
     */
    where?: widgetsWhereInput
  }


  /**
   * widgets without action
   */
  export type widgetsArgs = {
    /**
     * Select specific fields to fetch from the widgets
     */
    select?: widgetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: widgetsInclude | null
  }



  /**
   * Model dashboard_type
   */


  export type AggregateDashboard_type = {
    _count: Dashboard_typeCountAggregateOutputType | null
    _avg: Dashboard_typeAvgAggregateOutputType | null
    _sum: Dashboard_typeSumAggregateOutputType | null
    _min: Dashboard_typeMinAggregateOutputType | null
    _max: Dashboard_typeMaxAggregateOutputType | null
  }

  export type Dashboard_typeAvgAggregateOutputType = {
    id: number | null
  }

  export type Dashboard_typeSumAggregateOutputType = {
    id: number | null
  }

  export type Dashboard_typeMinAggregateOutputType = {
    id: number | null
    dashboard_type: string | null
  }

  export type Dashboard_typeMaxAggregateOutputType = {
    id: number | null
    dashboard_type: string | null
  }

  export type Dashboard_typeCountAggregateOutputType = {
    id: number
    dashboard_type: number
    _all: number
  }


  export type Dashboard_typeAvgAggregateInputType = {
    id?: true
  }

  export type Dashboard_typeSumAggregateInputType = {
    id?: true
  }

  export type Dashboard_typeMinAggregateInputType = {
    id?: true
    dashboard_type?: true
  }

  export type Dashboard_typeMaxAggregateInputType = {
    id?: true
    dashboard_type?: true
  }

  export type Dashboard_typeCountAggregateInputType = {
    id?: true
    dashboard_type?: true
    _all?: true
  }

  export type Dashboard_typeAggregateArgs = {
    /**
     * Filter which dashboard_type to aggregate.
     */
    where?: dashboard_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dashboard_types to fetch.
     */
    orderBy?: Enumerable<dashboard_typeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: dashboard_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dashboard_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dashboard_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned dashboard_types
    **/
    _count?: true | Dashboard_typeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Dashboard_typeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Dashboard_typeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Dashboard_typeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Dashboard_typeMaxAggregateInputType
  }

  export type GetDashboard_typeAggregateType<T extends Dashboard_typeAggregateArgs> = {
        [P in keyof T & keyof AggregateDashboard_type]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDashboard_type[P]>
      : GetScalarType<T[P], AggregateDashboard_type[P]>
  }




  export type Dashboard_typeGroupByArgs = {
    where?: dashboard_typeWhereInput
    orderBy?: Enumerable<dashboard_typeOrderByWithAggregationInput>
    by: Dashboard_typeScalarFieldEnum[]
    having?: dashboard_typeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Dashboard_typeCountAggregateInputType | true
    _avg?: Dashboard_typeAvgAggregateInputType
    _sum?: Dashboard_typeSumAggregateInputType
    _min?: Dashboard_typeMinAggregateInputType
    _max?: Dashboard_typeMaxAggregateInputType
  }


  export type Dashboard_typeGroupByOutputType = {
    id: number
    dashboard_type: string | null
    _count: Dashboard_typeCountAggregateOutputType | null
    _avg: Dashboard_typeAvgAggregateOutputType | null
    _sum: Dashboard_typeSumAggregateOutputType | null
    _min: Dashboard_typeMinAggregateOutputType | null
    _max: Dashboard_typeMaxAggregateOutputType | null
  }

  type GetDashboard_typeGroupByPayload<T extends Dashboard_typeGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Dashboard_typeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Dashboard_typeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Dashboard_typeGroupByOutputType[P]>
            : GetScalarType<T[P], Dashboard_typeGroupByOutputType[P]>
        }
      >
    >


  export type dashboard_typeSelect = {
    id?: boolean
    dashboard_type?: boolean
    dashboards?: boolean | dashboard_type$dashboardsArgs
    _count?: boolean | Dashboard_typeCountOutputTypeArgs
  }


  export type dashboard_typeInclude = {
    dashboards?: boolean | dashboard_type$dashboardsArgs
    _count?: boolean | Dashboard_typeCountOutputTypeArgs
  }

  export type dashboard_typeGetPayload<S extends boolean | null | undefined | dashboard_typeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? dashboard_type :
    S extends undefined ? never :
    S extends { include: any } & (dashboard_typeArgs | dashboard_typeFindManyArgs)
    ? dashboard_type  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'dashboards' ? Array < dashboardsGetPayload<S['include'][P]>>  :
        P extends '_count' ? Dashboard_typeCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (dashboard_typeArgs | dashboard_typeFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'dashboards' ? Array < dashboardsGetPayload<S['select'][P]>>  :
        P extends '_count' ? Dashboard_typeCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof dashboard_type ? dashboard_type[P] : never
  } 
      : dashboard_type


  type dashboard_typeCountArgs = 
    Omit<dashboard_typeFindManyArgs, 'select' | 'include'> & {
      select?: Dashboard_typeCountAggregateInputType | true
    }

  export interface dashboard_typeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Dashboard_type that matches the filter.
     * @param {dashboard_typeFindUniqueArgs} args - Arguments to find a Dashboard_type
     * @example
     * // Get one Dashboard_type
     * const dashboard_type = await prisma.dashboard_type.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends dashboard_typeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, dashboard_typeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'dashboard_type'> extends True ? Prisma__dashboard_typeClient<dashboard_typeGetPayload<T>> : Prisma__dashboard_typeClient<dashboard_typeGetPayload<T> | null, null>

    /**
     * Find one Dashboard_type that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {dashboard_typeFindUniqueOrThrowArgs} args - Arguments to find a Dashboard_type
     * @example
     * // Get one Dashboard_type
     * const dashboard_type = await prisma.dashboard_type.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends dashboard_typeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, dashboard_typeFindUniqueOrThrowArgs>
    ): Prisma__dashboard_typeClient<dashboard_typeGetPayload<T>>

    /**
     * Find the first Dashboard_type that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dashboard_typeFindFirstArgs} args - Arguments to find a Dashboard_type
     * @example
     * // Get one Dashboard_type
     * const dashboard_type = await prisma.dashboard_type.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends dashboard_typeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, dashboard_typeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'dashboard_type'> extends True ? Prisma__dashboard_typeClient<dashboard_typeGetPayload<T>> : Prisma__dashboard_typeClient<dashboard_typeGetPayload<T> | null, null>

    /**
     * Find the first Dashboard_type that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dashboard_typeFindFirstOrThrowArgs} args - Arguments to find a Dashboard_type
     * @example
     * // Get one Dashboard_type
     * const dashboard_type = await prisma.dashboard_type.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends dashboard_typeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, dashboard_typeFindFirstOrThrowArgs>
    ): Prisma__dashboard_typeClient<dashboard_typeGetPayload<T>>

    /**
     * Find zero or more Dashboard_types that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dashboard_typeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dashboard_types
     * const dashboard_types = await prisma.dashboard_type.findMany()
     * 
     * // Get first 10 Dashboard_types
     * const dashboard_types = await prisma.dashboard_type.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dashboard_typeWithIdOnly = await prisma.dashboard_type.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends dashboard_typeFindManyArgs>(
      args?: SelectSubset<T, dashboard_typeFindManyArgs>
    ): PrismaPromise<Array<dashboard_typeGetPayload<T>>>

    /**
     * Create a Dashboard_type.
     * @param {dashboard_typeCreateArgs} args - Arguments to create a Dashboard_type.
     * @example
     * // Create one Dashboard_type
     * const Dashboard_type = await prisma.dashboard_type.create({
     *   data: {
     *     // ... data to create a Dashboard_type
     *   }
     * })
     * 
    **/
    create<T extends dashboard_typeCreateArgs>(
      args: SelectSubset<T, dashboard_typeCreateArgs>
    ): Prisma__dashboard_typeClient<dashboard_typeGetPayload<T>>

    /**
     * Create many Dashboard_types.
     *     @param {dashboard_typeCreateManyArgs} args - Arguments to create many Dashboard_types.
     *     @example
     *     // Create many Dashboard_types
     *     const dashboard_type = await prisma.dashboard_type.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends dashboard_typeCreateManyArgs>(
      args?: SelectSubset<T, dashboard_typeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Dashboard_type.
     * @param {dashboard_typeDeleteArgs} args - Arguments to delete one Dashboard_type.
     * @example
     * // Delete one Dashboard_type
     * const Dashboard_type = await prisma.dashboard_type.delete({
     *   where: {
     *     // ... filter to delete one Dashboard_type
     *   }
     * })
     * 
    **/
    delete<T extends dashboard_typeDeleteArgs>(
      args: SelectSubset<T, dashboard_typeDeleteArgs>
    ): Prisma__dashboard_typeClient<dashboard_typeGetPayload<T>>

    /**
     * Update one Dashboard_type.
     * @param {dashboard_typeUpdateArgs} args - Arguments to update one Dashboard_type.
     * @example
     * // Update one Dashboard_type
     * const dashboard_type = await prisma.dashboard_type.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends dashboard_typeUpdateArgs>(
      args: SelectSubset<T, dashboard_typeUpdateArgs>
    ): Prisma__dashboard_typeClient<dashboard_typeGetPayload<T>>

    /**
     * Delete zero or more Dashboard_types.
     * @param {dashboard_typeDeleteManyArgs} args - Arguments to filter Dashboard_types to delete.
     * @example
     * // Delete a few Dashboard_types
     * const { count } = await prisma.dashboard_type.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends dashboard_typeDeleteManyArgs>(
      args?: SelectSubset<T, dashboard_typeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dashboard_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dashboard_typeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dashboard_types
     * const dashboard_type = await prisma.dashboard_type.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends dashboard_typeUpdateManyArgs>(
      args: SelectSubset<T, dashboard_typeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Dashboard_type.
     * @param {dashboard_typeUpsertArgs} args - Arguments to update or create a Dashboard_type.
     * @example
     * // Update or create a Dashboard_type
     * const dashboard_type = await prisma.dashboard_type.upsert({
     *   create: {
     *     // ... data to create a Dashboard_type
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dashboard_type we want to update
     *   }
     * })
    **/
    upsert<T extends dashboard_typeUpsertArgs>(
      args: SelectSubset<T, dashboard_typeUpsertArgs>
    ): Prisma__dashboard_typeClient<dashboard_typeGetPayload<T>>

    /**
     * Count the number of Dashboard_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dashboard_typeCountArgs} args - Arguments to filter Dashboard_types to count.
     * @example
     * // Count the number of Dashboard_types
     * const count = await prisma.dashboard_type.count({
     *   where: {
     *     // ... the filter for the Dashboard_types we want to count
     *   }
     * })
    **/
    count<T extends dashboard_typeCountArgs>(
      args?: Subset<T, dashboard_typeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Dashboard_typeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dashboard_type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dashboard_typeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Dashboard_typeAggregateArgs>(args: Subset<T, Dashboard_typeAggregateArgs>): PrismaPromise<GetDashboard_typeAggregateType<T>>

    /**
     * Group by Dashboard_type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dashboard_typeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Dashboard_typeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Dashboard_typeGroupByArgs['orderBy'] }
        : { orderBy?: Dashboard_typeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Dashboard_typeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDashboard_typeGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for dashboard_type.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__dashboard_typeClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    dashboards<T extends dashboard_type$dashboardsArgs= {}>(args?: Subset<T, dashboard_type$dashboardsArgs>): PrismaPromise<Array<dashboardsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * dashboard_type base type for findUnique actions
   */
  export type dashboard_typeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the dashboard_type
     */
    select?: dashboard_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboard_typeInclude | null
    /**
     * Filter, which dashboard_type to fetch.
     */
    where: dashboard_typeWhereUniqueInput
  }

  /**
   * dashboard_type findUnique
   */
  export interface dashboard_typeFindUniqueArgs extends dashboard_typeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * dashboard_type findUniqueOrThrow
   */
  export type dashboard_typeFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the dashboard_type
     */
    select?: dashboard_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboard_typeInclude | null
    /**
     * Filter, which dashboard_type to fetch.
     */
    where: dashboard_typeWhereUniqueInput
  }


  /**
   * dashboard_type base type for findFirst actions
   */
  export type dashboard_typeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the dashboard_type
     */
    select?: dashboard_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboard_typeInclude | null
    /**
     * Filter, which dashboard_type to fetch.
     */
    where?: dashboard_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dashboard_types to fetch.
     */
    orderBy?: Enumerable<dashboard_typeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for dashboard_types.
     */
    cursor?: dashboard_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dashboard_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dashboard_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of dashboard_types.
     */
    distinct?: Enumerable<Dashboard_typeScalarFieldEnum>
  }

  /**
   * dashboard_type findFirst
   */
  export interface dashboard_typeFindFirstArgs extends dashboard_typeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * dashboard_type findFirstOrThrow
   */
  export type dashboard_typeFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the dashboard_type
     */
    select?: dashboard_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboard_typeInclude | null
    /**
     * Filter, which dashboard_type to fetch.
     */
    where?: dashboard_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dashboard_types to fetch.
     */
    orderBy?: Enumerable<dashboard_typeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for dashboard_types.
     */
    cursor?: dashboard_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dashboard_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dashboard_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of dashboard_types.
     */
    distinct?: Enumerable<Dashboard_typeScalarFieldEnum>
  }


  /**
   * dashboard_type findMany
   */
  export type dashboard_typeFindManyArgs = {
    /**
     * Select specific fields to fetch from the dashboard_type
     */
    select?: dashboard_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboard_typeInclude | null
    /**
     * Filter, which dashboard_types to fetch.
     */
    where?: dashboard_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dashboard_types to fetch.
     */
    orderBy?: Enumerable<dashboard_typeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing dashboard_types.
     */
    cursor?: dashboard_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dashboard_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dashboard_types.
     */
    skip?: number
    distinct?: Enumerable<Dashboard_typeScalarFieldEnum>
  }


  /**
   * dashboard_type create
   */
  export type dashboard_typeCreateArgs = {
    /**
     * Select specific fields to fetch from the dashboard_type
     */
    select?: dashboard_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboard_typeInclude | null
    /**
     * The data needed to create a dashboard_type.
     */
    data: XOR<dashboard_typeCreateInput, dashboard_typeUncheckedCreateInput>
  }


  /**
   * dashboard_type createMany
   */
  export type dashboard_typeCreateManyArgs = {
    /**
     * The data used to create many dashboard_types.
     */
    data: Enumerable<dashboard_typeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * dashboard_type update
   */
  export type dashboard_typeUpdateArgs = {
    /**
     * Select specific fields to fetch from the dashboard_type
     */
    select?: dashboard_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboard_typeInclude | null
    /**
     * The data needed to update a dashboard_type.
     */
    data: XOR<dashboard_typeUpdateInput, dashboard_typeUncheckedUpdateInput>
    /**
     * Choose, which dashboard_type to update.
     */
    where: dashboard_typeWhereUniqueInput
  }


  /**
   * dashboard_type updateMany
   */
  export type dashboard_typeUpdateManyArgs = {
    /**
     * The data used to update dashboard_types.
     */
    data: XOR<dashboard_typeUpdateManyMutationInput, dashboard_typeUncheckedUpdateManyInput>
    /**
     * Filter which dashboard_types to update
     */
    where?: dashboard_typeWhereInput
  }


  /**
   * dashboard_type upsert
   */
  export type dashboard_typeUpsertArgs = {
    /**
     * Select specific fields to fetch from the dashboard_type
     */
    select?: dashboard_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboard_typeInclude | null
    /**
     * The filter to search for the dashboard_type to update in case it exists.
     */
    where: dashboard_typeWhereUniqueInput
    /**
     * In case the dashboard_type found by the `where` argument doesn't exist, create a new dashboard_type with this data.
     */
    create: XOR<dashboard_typeCreateInput, dashboard_typeUncheckedCreateInput>
    /**
     * In case the dashboard_type was found with the provided `where` argument, update it with this data.
     */
    update: XOR<dashboard_typeUpdateInput, dashboard_typeUncheckedUpdateInput>
  }


  /**
   * dashboard_type delete
   */
  export type dashboard_typeDeleteArgs = {
    /**
     * Select specific fields to fetch from the dashboard_type
     */
    select?: dashboard_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboard_typeInclude | null
    /**
     * Filter which dashboard_type to delete.
     */
    where: dashboard_typeWhereUniqueInput
  }


  /**
   * dashboard_type deleteMany
   */
  export type dashboard_typeDeleteManyArgs = {
    /**
     * Filter which dashboard_types to delete
     */
    where?: dashboard_typeWhereInput
  }


  /**
   * dashboard_type.dashboards
   */
  export type dashboard_type$dashboardsArgs = {
    /**
     * Select specific fields to fetch from the dashboards
     */
    select?: dashboardsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboardsInclude | null
    where?: dashboardsWhereInput
    orderBy?: Enumerable<dashboardsOrderByWithRelationInput>
    cursor?: dashboardsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DashboardsScalarFieldEnum>
  }


  /**
   * dashboard_type without action
   */
  export type dashboard_typeArgs = {
    /**
     * Select specific fields to fetch from the dashboard_type
     */
    select?: dashboard_typeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dashboard_typeInclude | null
  }



  /**
   * Model collection_configs
   */


  export type AggregateCollection_configs = {
    _count: Collection_configsCountAggregateOutputType | null
    _avg: Collection_configsAvgAggregateOutputType | null
    _sum: Collection_configsSumAggregateOutputType | null
    _min: Collection_configsMinAggregateOutputType | null
    _max: Collection_configsMaxAggregateOutputType | null
  }

  export type Collection_configsAvgAggregateOutputType = {
    id: number | null
    value: number | null
  }

  export type Collection_configsSumAggregateOutputType = {
    id: number | null
    value: number | null
  }

  export type Collection_configsMinAggregateOutputType = {
    id: number | null
    title: string | null
    value: number | null
  }

  export type Collection_configsMaxAggregateOutputType = {
    id: number | null
    title: string | null
    value: number | null
  }

  export type Collection_configsCountAggregateOutputType = {
    id: number
    title: number
    value: number
    _all: number
  }


  export type Collection_configsAvgAggregateInputType = {
    id?: true
    value?: true
  }

  export type Collection_configsSumAggregateInputType = {
    id?: true
    value?: true
  }

  export type Collection_configsMinAggregateInputType = {
    id?: true
    title?: true
    value?: true
  }

  export type Collection_configsMaxAggregateInputType = {
    id?: true
    title?: true
    value?: true
  }

  export type Collection_configsCountAggregateInputType = {
    id?: true
    title?: true
    value?: true
    _all?: true
  }

  export type Collection_configsAggregateArgs = {
    /**
     * Filter which collection_configs to aggregate.
     */
    where?: collection_configsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of collection_configs to fetch.
     */
    orderBy?: Enumerable<collection_configsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: collection_configsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` collection_configs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` collection_configs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned collection_configs
    **/
    _count?: true | Collection_configsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Collection_configsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Collection_configsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Collection_configsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Collection_configsMaxAggregateInputType
  }

  export type GetCollection_configsAggregateType<T extends Collection_configsAggregateArgs> = {
        [P in keyof T & keyof AggregateCollection_configs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCollection_configs[P]>
      : GetScalarType<T[P], AggregateCollection_configs[P]>
  }




  export type Collection_configsGroupByArgs = {
    where?: collection_configsWhereInput
    orderBy?: Enumerable<collection_configsOrderByWithAggregationInput>
    by: Collection_configsScalarFieldEnum[]
    having?: collection_configsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Collection_configsCountAggregateInputType | true
    _avg?: Collection_configsAvgAggregateInputType
    _sum?: Collection_configsSumAggregateInputType
    _min?: Collection_configsMinAggregateInputType
    _max?: Collection_configsMaxAggregateInputType
  }


  export type Collection_configsGroupByOutputType = {
    id: number
    title: string
    value: number
    _count: Collection_configsCountAggregateOutputType | null
    _avg: Collection_configsAvgAggregateOutputType | null
    _sum: Collection_configsSumAggregateOutputType | null
    _min: Collection_configsMinAggregateOutputType | null
    _max: Collection_configsMaxAggregateOutputType | null
  }

  type GetCollection_configsGroupByPayload<T extends Collection_configsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Collection_configsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Collection_configsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Collection_configsGroupByOutputType[P]>
            : GetScalarType<T[P], Collection_configsGroupByOutputType[P]>
        }
      >
    >


  export type collection_configsSelect = {
    id?: boolean
    title?: boolean
    value?: boolean
  }


  export type collection_configsGetPayload<S extends boolean | null | undefined | collection_configsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? collection_configs :
    S extends undefined ? never :
    S extends { include: any } & (collection_configsArgs | collection_configsFindManyArgs)
    ? collection_configs 
    : S extends { select: any } & (collection_configsArgs | collection_configsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof collection_configs ? collection_configs[P] : never
  } 
      : collection_configs


  type collection_configsCountArgs = 
    Omit<collection_configsFindManyArgs, 'select' | 'include'> & {
      select?: Collection_configsCountAggregateInputType | true
    }

  export interface collection_configsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Collection_configs that matches the filter.
     * @param {collection_configsFindUniqueArgs} args - Arguments to find a Collection_configs
     * @example
     * // Get one Collection_configs
     * const collection_configs = await prisma.collection_configs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends collection_configsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, collection_configsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'collection_configs'> extends True ? Prisma__collection_configsClient<collection_configsGetPayload<T>> : Prisma__collection_configsClient<collection_configsGetPayload<T> | null, null>

    /**
     * Find one Collection_configs that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {collection_configsFindUniqueOrThrowArgs} args - Arguments to find a Collection_configs
     * @example
     * // Get one Collection_configs
     * const collection_configs = await prisma.collection_configs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends collection_configsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, collection_configsFindUniqueOrThrowArgs>
    ): Prisma__collection_configsClient<collection_configsGetPayload<T>>

    /**
     * Find the first Collection_configs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {collection_configsFindFirstArgs} args - Arguments to find a Collection_configs
     * @example
     * // Get one Collection_configs
     * const collection_configs = await prisma.collection_configs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends collection_configsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, collection_configsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'collection_configs'> extends True ? Prisma__collection_configsClient<collection_configsGetPayload<T>> : Prisma__collection_configsClient<collection_configsGetPayload<T> | null, null>

    /**
     * Find the first Collection_configs that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {collection_configsFindFirstOrThrowArgs} args - Arguments to find a Collection_configs
     * @example
     * // Get one Collection_configs
     * const collection_configs = await prisma.collection_configs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends collection_configsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, collection_configsFindFirstOrThrowArgs>
    ): Prisma__collection_configsClient<collection_configsGetPayload<T>>

    /**
     * Find zero or more Collection_configs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {collection_configsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Collection_configs
     * const collection_configs = await prisma.collection_configs.findMany()
     * 
     * // Get first 10 Collection_configs
     * const collection_configs = await prisma.collection_configs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const collection_configsWithIdOnly = await prisma.collection_configs.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends collection_configsFindManyArgs>(
      args?: SelectSubset<T, collection_configsFindManyArgs>
    ): PrismaPromise<Array<collection_configsGetPayload<T>>>

    /**
     * Create a Collection_configs.
     * @param {collection_configsCreateArgs} args - Arguments to create a Collection_configs.
     * @example
     * // Create one Collection_configs
     * const Collection_configs = await prisma.collection_configs.create({
     *   data: {
     *     // ... data to create a Collection_configs
     *   }
     * })
     * 
    **/
    create<T extends collection_configsCreateArgs>(
      args: SelectSubset<T, collection_configsCreateArgs>
    ): Prisma__collection_configsClient<collection_configsGetPayload<T>>

    /**
     * Create many Collection_configs.
     *     @param {collection_configsCreateManyArgs} args - Arguments to create many Collection_configs.
     *     @example
     *     // Create many Collection_configs
     *     const collection_configs = await prisma.collection_configs.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends collection_configsCreateManyArgs>(
      args?: SelectSubset<T, collection_configsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Collection_configs.
     * @param {collection_configsDeleteArgs} args - Arguments to delete one Collection_configs.
     * @example
     * // Delete one Collection_configs
     * const Collection_configs = await prisma.collection_configs.delete({
     *   where: {
     *     // ... filter to delete one Collection_configs
     *   }
     * })
     * 
    **/
    delete<T extends collection_configsDeleteArgs>(
      args: SelectSubset<T, collection_configsDeleteArgs>
    ): Prisma__collection_configsClient<collection_configsGetPayload<T>>

    /**
     * Update one Collection_configs.
     * @param {collection_configsUpdateArgs} args - Arguments to update one Collection_configs.
     * @example
     * // Update one Collection_configs
     * const collection_configs = await prisma.collection_configs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends collection_configsUpdateArgs>(
      args: SelectSubset<T, collection_configsUpdateArgs>
    ): Prisma__collection_configsClient<collection_configsGetPayload<T>>

    /**
     * Delete zero or more Collection_configs.
     * @param {collection_configsDeleteManyArgs} args - Arguments to filter Collection_configs to delete.
     * @example
     * // Delete a few Collection_configs
     * const { count } = await prisma.collection_configs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends collection_configsDeleteManyArgs>(
      args?: SelectSubset<T, collection_configsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Collection_configs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {collection_configsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Collection_configs
     * const collection_configs = await prisma.collection_configs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends collection_configsUpdateManyArgs>(
      args: SelectSubset<T, collection_configsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Collection_configs.
     * @param {collection_configsUpsertArgs} args - Arguments to update or create a Collection_configs.
     * @example
     * // Update or create a Collection_configs
     * const collection_configs = await prisma.collection_configs.upsert({
     *   create: {
     *     // ... data to create a Collection_configs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Collection_configs we want to update
     *   }
     * })
    **/
    upsert<T extends collection_configsUpsertArgs>(
      args: SelectSubset<T, collection_configsUpsertArgs>
    ): Prisma__collection_configsClient<collection_configsGetPayload<T>>

    /**
     * Count the number of Collection_configs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {collection_configsCountArgs} args - Arguments to filter Collection_configs to count.
     * @example
     * // Count the number of Collection_configs
     * const count = await prisma.collection_configs.count({
     *   where: {
     *     // ... the filter for the Collection_configs we want to count
     *   }
     * })
    **/
    count<T extends collection_configsCountArgs>(
      args?: Subset<T, collection_configsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Collection_configsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Collection_configs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Collection_configsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Collection_configsAggregateArgs>(args: Subset<T, Collection_configsAggregateArgs>): PrismaPromise<GetCollection_configsAggregateType<T>>

    /**
     * Group by Collection_configs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Collection_configsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Collection_configsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Collection_configsGroupByArgs['orderBy'] }
        : { orderBy?: Collection_configsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Collection_configsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCollection_configsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for collection_configs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__collection_configsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * collection_configs base type for findUnique actions
   */
  export type collection_configsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the collection_configs
     */
    select?: collection_configsSelect | null
    /**
     * Filter, which collection_configs to fetch.
     */
    where: collection_configsWhereUniqueInput
  }

  /**
   * collection_configs findUnique
   */
  export interface collection_configsFindUniqueArgs extends collection_configsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * collection_configs findUniqueOrThrow
   */
  export type collection_configsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the collection_configs
     */
    select?: collection_configsSelect | null
    /**
     * Filter, which collection_configs to fetch.
     */
    where: collection_configsWhereUniqueInput
  }


  /**
   * collection_configs base type for findFirst actions
   */
  export type collection_configsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the collection_configs
     */
    select?: collection_configsSelect | null
    /**
     * Filter, which collection_configs to fetch.
     */
    where?: collection_configsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of collection_configs to fetch.
     */
    orderBy?: Enumerable<collection_configsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for collection_configs.
     */
    cursor?: collection_configsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` collection_configs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` collection_configs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of collection_configs.
     */
    distinct?: Enumerable<Collection_configsScalarFieldEnum>
  }

  /**
   * collection_configs findFirst
   */
  export interface collection_configsFindFirstArgs extends collection_configsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * collection_configs findFirstOrThrow
   */
  export type collection_configsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the collection_configs
     */
    select?: collection_configsSelect | null
    /**
     * Filter, which collection_configs to fetch.
     */
    where?: collection_configsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of collection_configs to fetch.
     */
    orderBy?: Enumerable<collection_configsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for collection_configs.
     */
    cursor?: collection_configsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` collection_configs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` collection_configs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of collection_configs.
     */
    distinct?: Enumerable<Collection_configsScalarFieldEnum>
  }


  /**
   * collection_configs findMany
   */
  export type collection_configsFindManyArgs = {
    /**
     * Select specific fields to fetch from the collection_configs
     */
    select?: collection_configsSelect | null
    /**
     * Filter, which collection_configs to fetch.
     */
    where?: collection_configsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of collection_configs to fetch.
     */
    orderBy?: Enumerable<collection_configsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing collection_configs.
     */
    cursor?: collection_configsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` collection_configs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` collection_configs.
     */
    skip?: number
    distinct?: Enumerable<Collection_configsScalarFieldEnum>
  }


  /**
   * collection_configs create
   */
  export type collection_configsCreateArgs = {
    /**
     * Select specific fields to fetch from the collection_configs
     */
    select?: collection_configsSelect | null
    /**
     * The data needed to create a collection_configs.
     */
    data: XOR<collection_configsCreateInput, collection_configsUncheckedCreateInput>
  }


  /**
   * collection_configs createMany
   */
  export type collection_configsCreateManyArgs = {
    /**
     * The data used to create many collection_configs.
     */
    data: Enumerable<collection_configsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * collection_configs update
   */
  export type collection_configsUpdateArgs = {
    /**
     * Select specific fields to fetch from the collection_configs
     */
    select?: collection_configsSelect | null
    /**
     * The data needed to update a collection_configs.
     */
    data: XOR<collection_configsUpdateInput, collection_configsUncheckedUpdateInput>
    /**
     * Choose, which collection_configs to update.
     */
    where: collection_configsWhereUniqueInput
  }


  /**
   * collection_configs updateMany
   */
  export type collection_configsUpdateManyArgs = {
    /**
     * The data used to update collection_configs.
     */
    data: XOR<collection_configsUpdateManyMutationInput, collection_configsUncheckedUpdateManyInput>
    /**
     * Filter which collection_configs to update
     */
    where?: collection_configsWhereInput
  }


  /**
   * collection_configs upsert
   */
  export type collection_configsUpsertArgs = {
    /**
     * Select specific fields to fetch from the collection_configs
     */
    select?: collection_configsSelect | null
    /**
     * The filter to search for the collection_configs to update in case it exists.
     */
    where: collection_configsWhereUniqueInput
    /**
     * In case the collection_configs found by the `where` argument doesn't exist, create a new collection_configs with this data.
     */
    create: XOR<collection_configsCreateInput, collection_configsUncheckedCreateInput>
    /**
     * In case the collection_configs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<collection_configsUpdateInput, collection_configsUncheckedUpdateInput>
  }


  /**
   * collection_configs delete
   */
  export type collection_configsDeleteArgs = {
    /**
     * Select specific fields to fetch from the collection_configs
     */
    select?: collection_configsSelect | null
    /**
     * Filter which collection_configs to delete.
     */
    where: collection_configsWhereUniqueInput
  }


  /**
   * collection_configs deleteMany
   */
  export type collection_configsDeleteManyArgs = {
    /**
     * Filter which collection_configs to delete
     */
    where?: collection_configsWhereInput
  }


  /**
   * collection_configs without action
   */
  export type collection_configsArgs = {
    /**
     * Select specific fields to fetch from the collection_configs
     */
    select?: collection_configsSelect | null
  }



  /**
   * Model collection_admin_configs
   */


  export type AggregateCollection_admin_configs = {
    _count: Collection_admin_configsCountAggregateOutputType | null
    _avg: Collection_admin_configsAvgAggregateOutputType | null
    _sum: Collection_admin_configsSumAggregateOutputType | null
    _min: Collection_admin_configsMinAggregateOutputType | null
    _max: Collection_admin_configsMaxAggregateOutputType | null
  }

  export type Collection_admin_configsAvgAggregateOutputType = {
    id: number | null
    workspace_id: number | null
    total_posts: number | null
    total_comments: number | null
    profile_collection_freq: number | null
    posts_collection_freq: number | null
    campaign_post_collection_freq: number | null
    stories_collection_freq: number | null
    created_by_user_id: number | null
  }

  export type Collection_admin_configsSumAggregateOutputType = {
    id: number | null
    workspace_id: number | null
    total_posts: number | null
    total_comments: number | null
    profile_collection_freq: number | null
    posts_collection_freq: number | null
    campaign_post_collection_freq: number | null
    stories_collection_freq: number | null
    created_by_user_id: number | null
  }

  export type Collection_admin_configsMinAggregateOutputType = {
    id: number | null
    workspace_id: number | null
    total_posts: number | null
    total_comments: number | null
    profile_collection_freq: number | null
    posts_collection_freq: number | null
    campaign_post_collection_freq: number | null
    stories_collection_freq: number | null
    created_by_user_id: number | null
    created_ts: Date | null
    updated_ts: Date | null
  }

  export type Collection_admin_configsMaxAggregateOutputType = {
    id: number | null
    workspace_id: number | null
    total_posts: number | null
    total_comments: number | null
    profile_collection_freq: number | null
    posts_collection_freq: number | null
    campaign_post_collection_freq: number | null
    stories_collection_freq: number | null
    created_by_user_id: number | null
    created_ts: Date | null
    updated_ts: Date | null
  }

  export type Collection_admin_configsCountAggregateOutputType = {
    id: number
    workspace_id: number
    total_posts: number
    total_comments: number
    profile_collection_freq: number
    posts_collection_freq: number
    campaign_post_collection_freq: number
    stories_collection_freq: number
    created_by_user_id: number
    created_ts: number
    updated_ts: number
    _all: number
  }


  export type Collection_admin_configsAvgAggregateInputType = {
    id?: true
    workspace_id?: true
    total_posts?: true
    total_comments?: true
    profile_collection_freq?: true
    posts_collection_freq?: true
    campaign_post_collection_freq?: true
    stories_collection_freq?: true
    created_by_user_id?: true
  }

  export type Collection_admin_configsSumAggregateInputType = {
    id?: true
    workspace_id?: true
    total_posts?: true
    total_comments?: true
    profile_collection_freq?: true
    posts_collection_freq?: true
    campaign_post_collection_freq?: true
    stories_collection_freq?: true
    created_by_user_id?: true
  }

  export type Collection_admin_configsMinAggregateInputType = {
    id?: true
    workspace_id?: true
    total_posts?: true
    total_comments?: true
    profile_collection_freq?: true
    posts_collection_freq?: true
    campaign_post_collection_freq?: true
    stories_collection_freq?: true
    created_by_user_id?: true
    created_ts?: true
    updated_ts?: true
  }

  export type Collection_admin_configsMaxAggregateInputType = {
    id?: true
    workspace_id?: true
    total_posts?: true
    total_comments?: true
    profile_collection_freq?: true
    posts_collection_freq?: true
    campaign_post_collection_freq?: true
    stories_collection_freq?: true
    created_by_user_id?: true
    created_ts?: true
    updated_ts?: true
  }

  export type Collection_admin_configsCountAggregateInputType = {
    id?: true
    workspace_id?: true
    total_posts?: true
    total_comments?: true
    profile_collection_freq?: true
    posts_collection_freq?: true
    campaign_post_collection_freq?: true
    stories_collection_freq?: true
    created_by_user_id?: true
    created_ts?: true
    updated_ts?: true
    _all?: true
  }

  export type Collection_admin_configsAggregateArgs = {
    /**
     * Filter which collection_admin_configs to aggregate.
     */
    where?: collection_admin_configsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of collection_admin_configs to fetch.
     */
    orderBy?: Enumerable<collection_admin_configsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: collection_admin_configsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` collection_admin_configs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` collection_admin_configs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned collection_admin_configs
    **/
    _count?: true | Collection_admin_configsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Collection_admin_configsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Collection_admin_configsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Collection_admin_configsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Collection_admin_configsMaxAggregateInputType
  }

  export type GetCollection_admin_configsAggregateType<T extends Collection_admin_configsAggregateArgs> = {
        [P in keyof T & keyof AggregateCollection_admin_configs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCollection_admin_configs[P]>
      : GetScalarType<T[P], AggregateCollection_admin_configs[P]>
  }




  export type Collection_admin_configsGroupByArgs = {
    where?: collection_admin_configsWhereInput
    orderBy?: Enumerable<collection_admin_configsOrderByWithAggregationInput>
    by: Collection_admin_configsScalarFieldEnum[]
    having?: collection_admin_configsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Collection_admin_configsCountAggregateInputType | true
    _avg?: Collection_admin_configsAvgAggregateInputType
    _sum?: Collection_admin_configsSumAggregateInputType
    _min?: Collection_admin_configsMinAggregateInputType
    _max?: Collection_admin_configsMaxAggregateInputType
  }


  export type Collection_admin_configsGroupByOutputType = {
    id: number
    workspace_id: number
    total_posts: number | null
    total_comments: number | null
    profile_collection_freq: number | null
    posts_collection_freq: number | null
    campaign_post_collection_freq: number | null
    stories_collection_freq: number | null
    created_by_user_id: number
    created_ts: Date | null
    updated_ts: Date | null
    _count: Collection_admin_configsCountAggregateOutputType | null
    _avg: Collection_admin_configsAvgAggregateOutputType | null
    _sum: Collection_admin_configsSumAggregateOutputType | null
    _min: Collection_admin_configsMinAggregateOutputType | null
    _max: Collection_admin_configsMaxAggregateOutputType | null
  }

  type GetCollection_admin_configsGroupByPayload<T extends Collection_admin_configsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Collection_admin_configsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Collection_admin_configsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Collection_admin_configsGroupByOutputType[P]>
            : GetScalarType<T[P], Collection_admin_configsGroupByOutputType[P]>
        }
      >
    >


  export type collection_admin_configsSelect = {
    id?: boolean
    workspace_id?: boolean
    total_posts?: boolean
    total_comments?: boolean
    profile_collection_freq?: boolean
    posts_collection_freq?: boolean
    campaign_post_collection_freq?: boolean
    stories_collection_freq?: boolean
    created_by_user_id?: boolean
    created_ts?: boolean
    updated_ts?: boolean
  }


  export type collection_admin_configsGetPayload<S extends boolean | null | undefined | collection_admin_configsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? collection_admin_configs :
    S extends undefined ? never :
    S extends { include: any } & (collection_admin_configsArgs | collection_admin_configsFindManyArgs)
    ? collection_admin_configs 
    : S extends { select: any } & (collection_admin_configsArgs | collection_admin_configsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof collection_admin_configs ? collection_admin_configs[P] : never
  } 
      : collection_admin_configs


  type collection_admin_configsCountArgs = 
    Omit<collection_admin_configsFindManyArgs, 'select' | 'include'> & {
      select?: Collection_admin_configsCountAggregateInputType | true
    }

  export interface collection_admin_configsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Collection_admin_configs that matches the filter.
     * @param {collection_admin_configsFindUniqueArgs} args - Arguments to find a Collection_admin_configs
     * @example
     * // Get one Collection_admin_configs
     * const collection_admin_configs = await prisma.collection_admin_configs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends collection_admin_configsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, collection_admin_configsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'collection_admin_configs'> extends True ? Prisma__collection_admin_configsClient<collection_admin_configsGetPayload<T>> : Prisma__collection_admin_configsClient<collection_admin_configsGetPayload<T> | null, null>

    /**
     * Find one Collection_admin_configs that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {collection_admin_configsFindUniqueOrThrowArgs} args - Arguments to find a Collection_admin_configs
     * @example
     * // Get one Collection_admin_configs
     * const collection_admin_configs = await prisma.collection_admin_configs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends collection_admin_configsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, collection_admin_configsFindUniqueOrThrowArgs>
    ): Prisma__collection_admin_configsClient<collection_admin_configsGetPayload<T>>

    /**
     * Find the first Collection_admin_configs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {collection_admin_configsFindFirstArgs} args - Arguments to find a Collection_admin_configs
     * @example
     * // Get one Collection_admin_configs
     * const collection_admin_configs = await prisma.collection_admin_configs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends collection_admin_configsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, collection_admin_configsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'collection_admin_configs'> extends True ? Prisma__collection_admin_configsClient<collection_admin_configsGetPayload<T>> : Prisma__collection_admin_configsClient<collection_admin_configsGetPayload<T> | null, null>

    /**
     * Find the first Collection_admin_configs that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {collection_admin_configsFindFirstOrThrowArgs} args - Arguments to find a Collection_admin_configs
     * @example
     * // Get one Collection_admin_configs
     * const collection_admin_configs = await prisma.collection_admin_configs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends collection_admin_configsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, collection_admin_configsFindFirstOrThrowArgs>
    ): Prisma__collection_admin_configsClient<collection_admin_configsGetPayload<T>>

    /**
     * Find zero or more Collection_admin_configs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {collection_admin_configsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Collection_admin_configs
     * const collection_admin_configs = await prisma.collection_admin_configs.findMany()
     * 
     * // Get first 10 Collection_admin_configs
     * const collection_admin_configs = await prisma.collection_admin_configs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const collection_admin_configsWithIdOnly = await prisma.collection_admin_configs.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends collection_admin_configsFindManyArgs>(
      args?: SelectSubset<T, collection_admin_configsFindManyArgs>
    ): PrismaPromise<Array<collection_admin_configsGetPayload<T>>>

    /**
     * Create a Collection_admin_configs.
     * @param {collection_admin_configsCreateArgs} args - Arguments to create a Collection_admin_configs.
     * @example
     * // Create one Collection_admin_configs
     * const Collection_admin_configs = await prisma.collection_admin_configs.create({
     *   data: {
     *     // ... data to create a Collection_admin_configs
     *   }
     * })
     * 
    **/
    create<T extends collection_admin_configsCreateArgs>(
      args: SelectSubset<T, collection_admin_configsCreateArgs>
    ): Prisma__collection_admin_configsClient<collection_admin_configsGetPayload<T>>

    /**
     * Create many Collection_admin_configs.
     *     @param {collection_admin_configsCreateManyArgs} args - Arguments to create many Collection_admin_configs.
     *     @example
     *     // Create many Collection_admin_configs
     *     const collection_admin_configs = await prisma.collection_admin_configs.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends collection_admin_configsCreateManyArgs>(
      args?: SelectSubset<T, collection_admin_configsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Collection_admin_configs.
     * @param {collection_admin_configsDeleteArgs} args - Arguments to delete one Collection_admin_configs.
     * @example
     * // Delete one Collection_admin_configs
     * const Collection_admin_configs = await prisma.collection_admin_configs.delete({
     *   where: {
     *     // ... filter to delete one Collection_admin_configs
     *   }
     * })
     * 
    **/
    delete<T extends collection_admin_configsDeleteArgs>(
      args: SelectSubset<T, collection_admin_configsDeleteArgs>
    ): Prisma__collection_admin_configsClient<collection_admin_configsGetPayload<T>>

    /**
     * Update one Collection_admin_configs.
     * @param {collection_admin_configsUpdateArgs} args - Arguments to update one Collection_admin_configs.
     * @example
     * // Update one Collection_admin_configs
     * const collection_admin_configs = await prisma.collection_admin_configs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends collection_admin_configsUpdateArgs>(
      args: SelectSubset<T, collection_admin_configsUpdateArgs>
    ): Prisma__collection_admin_configsClient<collection_admin_configsGetPayload<T>>

    /**
     * Delete zero or more Collection_admin_configs.
     * @param {collection_admin_configsDeleteManyArgs} args - Arguments to filter Collection_admin_configs to delete.
     * @example
     * // Delete a few Collection_admin_configs
     * const { count } = await prisma.collection_admin_configs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends collection_admin_configsDeleteManyArgs>(
      args?: SelectSubset<T, collection_admin_configsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Collection_admin_configs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {collection_admin_configsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Collection_admin_configs
     * const collection_admin_configs = await prisma.collection_admin_configs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends collection_admin_configsUpdateManyArgs>(
      args: SelectSubset<T, collection_admin_configsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Collection_admin_configs.
     * @param {collection_admin_configsUpsertArgs} args - Arguments to update or create a Collection_admin_configs.
     * @example
     * // Update or create a Collection_admin_configs
     * const collection_admin_configs = await prisma.collection_admin_configs.upsert({
     *   create: {
     *     // ... data to create a Collection_admin_configs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Collection_admin_configs we want to update
     *   }
     * })
    **/
    upsert<T extends collection_admin_configsUpsertArgs>(
      args: SelectSubset<T, collection_admin_configsUpsertArgs>
    ): Prisma__collection_admin_configsClient<collection_admin_configsGetPayload<T>>

    /**
     * Count the number of Collection_admin_configs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {collection_admin_configsCountArgs} args - Arguments to filter Collection_admin_configs to count.
     * @example
     * // Count the number of Collection_admin_configs
     * const count = await prisma.collection_admin_configs.count({
     *   where: {
     *     // ... the filter for the Collection_admin_configs we want to count
     *   }
     * })
    **/
    count<T extends collection_admin_configsCountArgs>(
      args?: Subset<T, collection_admin_configsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Collection_admin_configsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Collection_admin_configs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Collection_admin_configsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Collection_admin_configsAggregateArgs>(args: Subset<T, Collection_admin_configsAggregateArgs>): PrismaPromise<GetCollection_admin_configsAggregateType<T>>

    /**
     * Group by Collection_admin_configs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Collection_admin_configsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Collection_admin_configsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Collection_admin_configsGroupByArgs['orderBy'] }
        : { orderBy?: Collection_admin_configsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Collection_admin_configsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCollection_admin_configsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for collection_admin_configs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__collection_admin_configsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * collection_admin_configs base type for findUnique actions
   */
  export type collection_admin_configsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the collection_admin_configs
     */
    select?: collection_admin_configsSelect | null
    /**
     * Filter, which collection_admin_configs to fetch.
     */
    where: collection_admin_configsWhereUniqueInput
  }

  /**
   * collection_admin_configs findUnique
   */
  export interface collection_admin_configsFindUniqueArgs extends collection_admin_configsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * collection_admin_configs findUniqueOrThrow
   */
  export type collection_admin_configsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the collection_admin_configs
     */
    select?: collection_admin_configsSelect | null
    /**
     * Filter, which collection_admin_configs to fetch.
     */
    where: collection_admin_configsWhereUniqueInput
  }


  /**
   * collection_admin_configs base type for findFirst actions
   */
  export type collection_admin_configsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the collection_admin_configs
     */
    select?: collection_admin_configsSelect | null
    /**
     * Filter, which collection_admin_configs to fetch.
     */
    where?: collection_admin_configsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of collection_admin_configs to fetch.
     */
    orderBy?: Enumerable<collection_admin_configsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for collection_admin_configs.
     */
    cursor?: collection_admin_configsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` collection_admin_configs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` collection_admin_configs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of collection_admin_configs.
     */
    distinct?: Enumerable<Collection_admin_configsScalarFieldEnum>
  }

  /**
   * collection_admin_configs findFirst
   */
  export interface collection_admin_configsFindFirstArgs extends collection_admin_configsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * collection_admin_configs findFirstOrThrow
   */
  export type collection_admin_configsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the collection_admin_configs
     */
    select?: collection_admin_configsSelect | null
    /**
     * Filter, which collection_admin_configs to fetch.
     */
    where?: collection_admin_configsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of collection_admin_configs to fetch.
     */
    orderBy?: Enumerable<collection_admin_configsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for collection_admin_configs.
     */
    cursor?: collection_admin_configsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` collection_admin_configs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` collection_admin_configs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of collection_admin_configs.
     */
    distinct?: Enumerable<Collection_admin_configsScalarFieldEnum>
  }


  /**
   * collection_admin_configs findMany
   */
  export type collection_admin_configsFindManyArgs = {
    /**
     * Select specific fields to fetch from the collection_admin_configs
     */
    select?: collection_admin_configsSelect | null
    /**
     * Filter, which collection_admin_configs to fetch.
     */
    where?: collection_admin_configsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of collection_admin_configs to fetch.
     */
    orderBy?: Enumerable<collection_admin_configsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing collection_admin_configs.
     */
    cursor?: collection_admin_configsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` collection_admin_configs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` collection_admin_configs.
     */
    skip?: number
    distinct?: Enumerable<Collection_admin_configsScalarFieldEnum>
  }


  /**
   * collection_admin_configs create
   */
  export type collection_admin_configsCreateArgs = {
    /**
     * Select specific fields to fetch from the collection_admin_configs
     */
    select?: collection_admin_configsSelect | null
    /**
     * The data needed to create a collection_admin_configs.
     */
    data: XOR<collection_admin_configsCreateInput, collection_admin_configsUncheckedCreateInput>
  }


  /**
   * collection_admin_configs createMany
   */
  export type collection_admin_configsCreateManyArgs = {
    /**
     * The data used to create many collection_admin_configs.
     */
    data: Enumerable<collection_admin_configsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * collection_admin_configs update
   */
  export type collection_admin_configsUpdateArgs = {
    /**
     * Select specific fields to fetch from the collection_admin_configs
     */
    select?: collection_admin_configsSelect | null
    /**
     * The data needed to update a collection_admin_configs.
     */
    data: XOR<collection_admin_configsUpdateInput, collection_admin_configsUncheckedUpdateInput>
    /**
     * Choose, which collection_admin_configs to update.
     */
    where: collection_admin_configsWhereUniqueInput
  }


  /**
   * collection_admin_configs updateMany
   */
  export type collection_admin_configsUpdateManyArgs = {
    /**
     * The data used to update collection_admin_configs.
     */
    data: XOR<collection_admin_configsUpdateManyMutationInput, collection_admin_configsUncheckedUpdateManyInput>
    /**
     * Filter which collection_admin_configs to update
     */
    where?: collection_admin_configsWhereInput
  }


  /**
   * collection_admin_configs upsert
   */
  export type collection_admin_configsUpsertArgs = {
    /**
     * Select specific fields to fetch from the collection_admin_configs
     */
    select?: collection_admin_configsSelect | null
    /**
     * The filter to search for the collection_admin_configs to update in case it exists.
     */
    where: collection_admin_configsWhereUniqueInput
    /**
     * In case the collection_admin_configs found by the `where` argument doesn't exist, create a new collection_admin_configs with this data.
     */
    create: XOR<collection_admin_configsCreateInput, collection_admin_configsUncheckedCreateInput>
    /**
     * In case the collection_admin_configs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<collection_admin_configsUpdateInput, collection_admin_configsUncheckedUpdateInput>
  }


  /**
   * collection_admin_configs delete
   */
  export type collection_admin_configsDeleteArgs = {
    /**
     * Select specific fields to fetch from the collection_admin_configs
     */
    select?: collection_admin_configsSelect | null
    /**
     * Filter which collection_admin_configs to delete.
     */
    where: collection_admin_configsWhereUniqueInput
  }


  /**
   * collection_admin_configs deleteMany
   */
  export type collection_admin_configsDeleteManyArgs = {
    /**
     * Filter which collection_admin_configs to delete
     */
    where?: collection_admin_configsWhereInput
  }


  /**
   * collection_admin_configs without action
   */
  export type collection_admin_configsArgs = {
    /**
     * Select specific fields to fetch from the collection_admin_configs
     */
    select?: collection_admin_configsSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const Collection_admin_configsScalarFieldEnum: {
    id: 'id',
    workspace_id: 'workspace_id',
    total_posts: 'total_posts',
    total_comments: 'total_comments',
    profile_collection_freq: 'profile_collection_freq',
    posts_collection_freq: 'posts_collection_freq',
    campaign_post_collection_freq: 'campaign_post_collection_freq',
    stories_collection_freq: 'stories_collection_freq',
    created_by_user_id: 'created_by_user_id',
    created_ts: 'created_ts',
    updated_ts: 'updated_ts'
  };

  export type Collection_admin_configsScalarFieldEnum = (typeof Collection_admin_configsScalarFieldEnum)[keyof typeof Collection_admin_configsScalarFieldEnum]


  export const Collection_configsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    value: 'value'
  };

  export type Collection_configsScalarFieldEnum = (typeof Collection_configsScalarFieldEnum)[keyof typeof Collection_configsScalarFieldEnum]


  export const Dashboard_statusesScalarFieldEnum: {
    id: 'id',
    status: 'status'
  };

  export type Dashboard_statusesScalarFieldEnum = (typeof Dashboard_statusesScalarFieldEnum)[keyof typeof Dashboard_statusesScalarFieldEnum]


  export const Dashboard_typeScalarFieldEnum: {
    id: 'id',
    dashboard_type: 'dashboard_type'
  };

  export type Dashboard_typeScalarFieldEnum = (typeof Dashboard_typeScalarFieldEnum)[keyof typeof Dashboard_typeScalarFieldEnum]


  export const DashboardsScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    dashboard_name: 'dashboard_name',
    dashboard_status_id: 'dashboard_status_id',
    start_ts: 'start_ts',
    end_ts: 'end_ts',
    dashboard_settings: 'dashboard_settings',
    dashboard_type_id: 'dashboard_type_id',
    reference_id: 'reference_id'
  };

  export type DashboardsScalarFieldEnum = (typeof DashboardsScalarFieldEnum)[keyof typeof DashboardsScalarFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const PlatformsScalarFieldEnum: {
    id: 'id',
    platform: 'platform'
  };

  export type PlatformsScalarFieldEnum = (typeof PlatformsScalarFieldEnum)[keyof typeof PlatformsScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const Sharing_infoScalarFieldEnum: {
    id: 'id',
    dashboard_id: 'dashboard_id',
    email: 'email',
    user_id: 'user_id'
  };

  export type Sharing_infoScalarFieldEnum = (typeof Sharing_infoScalarFieldEnum)[keyof typeof Sharing_infoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Widget_templatesScalarFieldEnum: {
    id: 'id',
    widget_title: 'widget_title',
    widget_description: 'widget_description',
    platform_id: 'platform_id',
    default_settings: 'default_settings',
    widget_sizes: 'widget_sizes',
    widget_types: 'widget_types'
  };

  export type Widget_templatesScalarFieldEnum = (typeof Widget_templatesScalarFieldEnum)[keyof typeof Widget_templatesScalarFieldEnum]


  export const WidgetsScalarFieldEnum: {
    id: 'id',
    dashboard_id: 'dashboard_id',
    platform_id: 'platform_id',
    widget_template_id: 'widget_template_id',
    widget_account_id: 'widget_account_id',
    widget_property_id: 'widget_property_id',
    widget_start_ts: 'widget_start_ts',
    widget_end_ts: 'widget_end_ts',
    widget_settings: 'widget_settings',
    widget_size: 'widget_size',
    widget_type: 'widget_type',
    is_hidden: 'is_hidden',
    widget_name: 'widget_name'
  };

  export type WidgetsScalarFieldEnum = (typeof WidgetsScalarFieldEnum)[keyof typeof WidgetsScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type dashboard_statusesWhereInput = {
    AND?: Enumerable<dashboard_statusesWhereInput>
    OR?: Enumerable<dashboard_statusesWhereInput>
    NOT?: Enumerable<dashboard_statusesWhereInput>
    id?: IntFilter | number
    status?: StringNullableFilter | string | null
    dashboards?: DashboardsListRelationFilter
  }

  export type dashboard_statusesOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    dashboards?: dashboardsOrderByRelationAggregateInput
  }

  export type dashboard_statusesWhereUniqueInput = {
    id?: number
  }

  export type dashboard_statusesOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    _count?: dashboard_statusesCountOrderByAggregateInput
    _avg?: dashboard_statusesAvgOrderByAggregateInput
    _max?: dashboard_statusesMaxOrderByAggregateInput
    _min?: dashboard_statusesMinOrderByAggregateInput
    _sum?: dashboard_statusesSumOrderByAggregateInput
  }

  export type dashboard_statusesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<dashboard_statusesScalarWhereWithAggregatesInput>
    OR?: Enumerable<dashboard_statusesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<dashboard_statusesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    status?: StringNullableWithAggregatesFilter | string | null
  }

  export type platformsWhereInput = {
    AND?: Enumerable<platformsWhereInput>
    OR?: Enumerable<platformsWhereInput>
    NOT?: Enumerable<platformsWhereInput>
    id?: IntFilter | number
    platform?: StringNullableFilter | string | null
    widget_templates?: Widget_templatesListRelationFilter
    widgets?: WidgetsListRelationFilter
  }

  export type platformsOrderByWithRelationInput = {
    id?: SortOrder
    platform?: SortOrder
    widget_templates?: widget_templatesOrderByRelationAggregateInput
    widgets?: widgetsOrderByRelationAggregateInput
  }

  export type platformsWhereUniqueInput = {
    id?: number
  }

  export type platformsOrderByWithAggregationInput = {
    id?: SortOrder
    platform?: SortOrder
    _count?: platformsCountOrderByAggregateInput
    _avg?: platformsAvgOrderByAggregateInput
    _max?: platformsMaxOrderByAggregateInput
    _min?: platformsMinOrderByAggregateInput
    _sum?: platformsSumOrderByAggregateInput
  }

  export type platformsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<platformsScalarWhereWithAggregatesInput>
    OR?: Enumerable<platformsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<platformsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    platform?: StringNullableWithAggregatesFilter | string | null
  }

  export type widget_templatesWhereInput = {
    AND?: Enumerable<widget_templatesWhereInput>
    OR?: Enumerable<widget_templatesWhereInput>
    NOT?: Enumerable<widget_templatesWhereInput>
    id?: IntFilter | number
    widget_title?: StringNullableFilter | string | null
    widget_description?: StringNullableFilter | string | null
    platform_id?: IntNullableFilter | number | null
    default_settings?: JsonNullableFilter
    widget_sizes?: JsonNullableFilter
    widget_types?: JsonNullableFilter
    platforms?: XOR<PlatformsRelationFilter, platformsWhereInput> | null
    widgets?: WidgetsListRelationFilter
  }

  export type widget_templatesOrderByWithRelationInput = {
    id?: SortOrder
    widget_title?: SortOrder
    widget_description?: SortOrder
    platform_id?: SortOrder
    default_settings?: SortOrder
    widget_sizes?: SortOrder
    widget_types?: SortOrder
    platforms?: platformsOrderByWithRelationInput
    widgets?: widgetsOrderByRelationAggregateInput
  }

  export type widget_templatesWhereUniqueInput = {
    id?: number
  }

  export type widget_templatesOrderByWithAggregationInput = {
    id?: SortOrder
    widget_title?: SortOrder
    widget_description?: SortOrder
    platform_id?: SortOrder
    default_settings?: SortOrder
    widget_sizes?: SortOrder
    widget_types?: SortOrder
    _count?: widget_templatesCountOrderByAggregateInput
    _avg?: widget_templatesAvgOrderByAggregateInput
    _max?: widget_templatesMaxOrderByAggregateInput
    _min?: widget_templatesMinOrderByAggregateInput
    _sum?: widget_templatesSumOrderByAggregateInput
  }

  export type widget_templatesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<widget_templatesScalarWhereWithAggregatesInput>
    OR?: Enumerable<widget_templatesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<widget_templatesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    widget_title?: StringNullableWithAggregatesFilter | string | null
    widget_description?: StringNullableWithAggregatesFilter | string | null
    platform_id?: IntNullableWithAggregatesFilter | number | null
    default_settings?: JsonNullableWithAggregatesFilter
    widget_sizes?: JsonNullableWithAggregatesFilter
    widget_types?: JsonNullableWithAggregatesFilter
  }

  export type dashboardsWhereInput = {
    AND?: Enumerable<dashboardsWhereInput>
    OR?: Enumerable<dashboardsWhereInput>
    NOT?: Enumerable<dashboardsWhereInput>
    id?: IntFilter | number
    user_id?: IntNullableFilter | number | null
    dashboard_name?: StringNullableFilter | string | null
    dashboard_status_id?: IntNullableFilter | number | null
    start_ts?: DateTimeNullableFilter | Date | string | null
    end_ts?: DateTimeNullableFilter | Date | string | null
    dashboard_settings?: JsonNullableFilter
    dashboard_type_id?: IntNullableFilter | number | null
    reference_id?: IntNullableFilter | number | null
    dashboard_statuses?: XOR<Dashboard_statusesRelationFilter, dashboard_statusesWhereInput> | null
    dashboard_type?: XOR<Dashboard_typeRelationFilter, dashboard_typeWhereInput> | null
    sharing_info?: Sharing_infoListRelationFilter
    widgets?: WidgetsListRelationFilter
  }

  export type dashboardsOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    dashboard_name?: SortOrder
    dashboard_status_id?: SortOrder
    start_ts?: SortOrder
    end_ts?: SortOrder
    dashboard_settings?: SortOrder
    dashboard_type_id?: SortOrder
    reference_id?: SortOrder
    dashboard_statuses?: dashboard_statusesOrderByWithRelationInput
    dashboard_type?: dashboard_typeOrderByWithRelationInput
    sharing_info?: sharing_infoOrderByRelationAggregateInput
    widgets?: widgetsOrderByRelationAggregateInput
  }

  export type dashboardsWhereUniqueInput = {
    id?: number
  }

  export type dashboardsOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    dashboard_name?: SortOrder
    dashboard_status_id?: SortOrder
    start_ts?: SortOrder
    end_ts?: SortOrder
    dashboard_settings?: SortOrder
    dashboard_type_id?: SortOrder
    reference_id?: SortOrder
    _count?: dashboardsCountOrderByAggregateInput
    _avg?: dashboardsAvgOrderByAggregateInput
    _max?: dashboardsMaxOrderByAggregateInput
    _min?: dashboardsMinOrderByAggregateInput
    _sum?: dashboardsSumOrderByAggregateInput
  }

  export type dashboardsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<dashboardsScalarWhereWithAggregatesInput>
    OR?: Enumerable<dashboardsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<dashboardsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_id?: IntNullableWithAggregatesFilter | number | null
    dashboard_name?: StringNullableWithAggregatesFilter | string | null
    dashboard_status_id?: IntNullableWithAggregatesFilter | number | null
    start_ts?: DateTimeNullableWithAggregatesFilter | Date | string | null
    end_ts?: DateTimeNullableWithAggregatesFilter | Date | string | null
    dashboard_settings?: JsonNullableWithAggregatesFilter
    dashboard_type_id?: IntNullableWithAggregatesFilter | number | null
    reference_id?: IntNullableWithAggregatesFilter | number | null
  }

  export type sharing_infoWhereInput = {
    AND?: Enumerable<sharing_infoWhereInput>
    OR?: Enumerable<sharing_infoWhereInput>
    NOT?: Enumerable<sharing_infoWhereInput>
    id?: IntFilter | number
    dashboard_id?: IntNullableFilter | number | null
    email?: StringNullableFilter | string | null
    user_id?: IntNullableFilter | number | null
    dashboards?: XOR<DashboardsRelationFilter, dashboardsWhereInput> | null
  }

  export type sharing_infoOrderByWithRelationInput = {
    id?: SortOrder
    dashboard_id?: SortOrder
    email?: SortOrder
    user_id?: SortOrder
    dashboards?: dashboardsOrderByWithRelationInput
  }

  export type sharing_infoWhereUniqueInput = {
    id?: number
  }

  export type sharing_infoOrderByWithAggregationInput = {
    id?: SortOrder
    dashboard_id?: SortOrder
    email?: SortOrder
    user_id?: SortOrder
    _count?: sharing_infoCountOrderByAggregateInput
    _avg?: sharing_infoAvgOrderByAggregateInput
    _max?: sharing_infoMaxOrderByAggregateInput
    _min?: sharing_infoMinOrderByAggregateInput
    _sum?: sharing_infoSumOrderByAggregateInput
  }

  export type sharing_infoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<sharing_infoScalarWhereWithAggregatesInput>
    OR?: Enumerable<sharing_infoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<sharing_infoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    dashboard_id?: IntNullableWithAggregatesFilter | number | null
    email?: StringNullableWithAggregatesFilter | string | null
    user_id?: IntNullableWithAggregatesFilter | number | null
  }

  export type widgetsWhereInput = {
    AND?: Enumerable<widgetsWhereInput>
    OR?: Enumerable<widgetsWhereInput>
    NOT?: Enumerable<widgetsWhereInput>
    id?: IntFilter | number
    dashboard_id?: IntNullableFilter | number | null
    platform_id?: IntNullableFilter | number | null
    widget_template_id?: IntNullableFilter | number | null
    widget_account_id?: StringNullableFilter | string | null
    widget_property_id?: StringNullableFilter | string | null
    widget_start_ts?: DateTimeNullableFilter | Date | string | null
    widget_end_ts?: DateTimeNullableFilter | Date | string | null
    widget_settings?: JsonNullableFilter
    widget_size?: Enumwidget_sizeNullableFilter | widget_size | null
    widget_type?: Enumwidget_typeNullableFilter | widget_type | null
    is_hidden?: BoolNullableFilter | boolean | null
    widget_name?: StringNullableFilter | string | null
    platforms?: XOR<PlatformsRelationFilter, platformsWhereInput> | null
    widget_templates?: XOR<Widget_templatesRelationFilter, widget_templatesWhereInput> | null
    dashboards?: XOR<DashboardsRelationFilter, dashboardsWhereInput> | null
  }

  export type widgetsOrderByWithRelationInput = {
    id?: SortOrder
    dashboard_id?: SortOrder
    platform_id?: SortOrder
    widget_template_id?: SortOrder
    widget_account_id?: SortOrder
    widget_property_id?: SortOrder
    widget_start_ts?: SortOrder
    widget_end_ts?: SortOrder
    widget_settings?: SortOrder
    widget_size?: SortOrder
    widget_type?: SortOrder
    is_hidden?: SortOrder
    widget_name?: SortOrder
    platforms?: platformsOrderByWithRelationInput
    widget_templates?: widget_templatesOrderByWithRelationInput
    dashboards?: dashboardsOrderByWithRelationInput
  }

  export type widgetsWhereUniqueInput = {
    id?: number
  }

  export type widgetsOrderByWithAggregationInput = {
    id?: SortOrder
    dashboard_id?: SortOrder
    platform_id?: SortOrder
    widget_template_id?: SortOrder
    widget_account_id?: SortOrder
    widget_property_id?: SortOrder
    widget_start_ts?: SortOrder
    widget_end_ts?: SortOrder
    widget_settings?: SortOrder
    widget_size?: SortOrder
    widget_type?: SortOrder
    is_hidden?: SortOrder
    widget_name?: SortOrder
    _count?: widgetsCountOrderByAggregateInput
    _avg?: widgetsAvgOrderByAggregateInput
    _max?: widgetsMaxOrderByAggregateInput
    _min?: widgetsMinOrderByAggregateInput
    _sum?: widgetsSumOrderByAggregateInput
  }

  export type widgetsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<widgetsScalarWhereWithAggregatesInput>
    OR?: Enumerable<widgetsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<widgetsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    dashboard_id?: IntNullableWithAggregatesFilter | number | null
    platform_id?: IntNullableWithAggregatesFilter | number | null
    widget_template_id?: IntNullableWithAggregatesFilter | number | null
    widget_account_id?: StringNullableWithAggregatesFilter | string | null
    widget_property_id?: StringNullableWithAggregatesFilter | string | null
    widget_start_ts?: DateTimeNullableWithAggregatesFilter | Date | string | null
    widget_end_ts?: DateTimeNullableWithAggregatesFilter | Date | string | null
    widget_settings?: JsonNullableWithAggregatesFilter
    widget_size?: Enumwidget_sizeNullableWithAggregatesFilter | widget_size | null
    widget_type?: Enumwidget_typeNullableWithAggregatesFilter | widget_type | null
    is_hidden?: BoolNullableWithAggregatesFilter | boolean | null
    widget_name?: StringNullableWithAggregatesFilter | string | null
  }

  export type dashboard_typeWhereInput = {
    AND?: Enumerable<dashboard_typeWhereInput>
    OR?: Enumerable<dashboard_typeWhereInput>
    NOT?: Enumerable<dashboard_typeWhereInput>
    id?: IntFilter | number
    dashboard_type?: StringNullableFilter | string | null
    dashboards?: DashboardsListRelationFilter
  }

  export type dashboard_typeOrderByWithRelationInput = {
    id?: SortOrder
    dashboard_type?: SortOrder
    dashboards?: dashboardsOrderByRelationAggregateInput
  }

  export type dashboard_typeWhereUniqueInput = {
    id?: number
  }

  export type dashboard_typeOrderByWithAggregationInput = {
    id?: SortOrder
    dashboard_type?: SortOrder
    _count?: dashboard_typeCountOrderByAggregateInput
    _avg?: dashboard_typeAvgOrderByAggregateInput
    _max?: dashboard_typeMaxOrderByAggregateInput
    _min?: dashboard_typeMinOrderByAggregateInput
    _sum?: dashboard_typeSumOrderByAggregateInput
  }

  export type dashboard_typeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<dashboard_typeScalarWhereWithAggregatesInput>
    OR?: Enumerable<dashboard_typeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<dashboard_typeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    dashboard_type?: StringNullableWithAggregatesFilter | string | null
  }

  export type collection_configsWhereInput = {
    AND?: Enumerable<collection_configsWhereInput>
    OR?: Enumerable<collection_configsWhereInput>
    NOT?: Enumerable<collection_configsWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    value?: IntFilter | number
  }

  export type collection_configsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    value?: SortOrder
  }

  export type collection_configsWhereUniqueInput = {
    id?: number
  }

  export type collection_configsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    value?: SortOrder
    _count?: collection_configsCountOrderByAggregateInput
    _avg?: collection_configsAvgOrderByAggregateInput
    _max?: collection_configsMaxOrderByAggregateInput
    _min?: collection_configsMinOrderByAggregateInput
    _sum?: collection_configsSumOrderByAggregateInput
  }

  export type collection_configsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<collection_configsScalarWhereWithAggregatesInput>
    OR?: Enumerable<collection_configsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<collection_configsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    value?: IntWithAggregatesFilter | number
  }

  export type collection_admin_configsWhereInput = {
    AND?: Enumerable<collection_admin_configsWhereInput>
    OR?: Enumerable<collection_admin_configsWhereInput>
    NOT?: Enumerable<collection_admin_configsWhereInput>
    id?: IntFilter | number
    workspace_id?: IntFilter | number
    total_posts?: IntNullableFilter | number | null
    total_comments?: IntNullableFilter | number | null
    profile_collection_freq?: IntNullableFilter | number | null
    posts_collection_freq?: IntNullableFilter | number | null
    campaign_post_collection_freq?: IntNullableFilter | number | null
    stories_collection_freq?: IntNullableFilter | number | null
    created_by_user_id?: IntFilter | number
    created_ts?: DateTimeNullableFilter | Date | string | null
    updated_ts?: DateTimeNullableFilter | Date | string | null
  }

  export type collection_admin_configsOrderByWithRelationInput = {
    id?: SortOrder
    workspace_id?: SortOrder
    total_posts?: SortOrder
    total_comments?: SortOrder
    profile_collection_freq?: SortOrder
    posts_collection_freq?: SortOrder
    campaign_post_collection_freq?: SortOrder
    stories_collection_freq?: SortOrder
    created_by_user_id?: SortOrder
    created_ts?: SortOrder
    updated_ts?: SortOrder
  }

  export type collection_admin_configsWhereUniqueInput = {
    id?: number
  }

  export type collection_admin_configsOrderByWithAggregationInput = {
    id?: SortOrder
    workspace_id?: SortOrder
    total_posts?: SortOrder
    total_comments?: SortOrder
    profile_collection_freq?: SortOrder
    posts_collection_freq?: SortOrder
    campaign_post_collection_freq?: SortOrder
    stories_collection_freq?: SortOrder
    created_by_user_id?: SortOrder
    created_ts?: SortOrder
    updated_ts?: SortOrder
    _count?: collection_admin_configsCountOrderByAggregateInput
    _avg?: collection_admin_configsAvgOrderByAggregateInput
    _max?: collection_admin_configsMaxOrderByAggregateInput
    _min?: collection_admin_configsMinOrderByAggregateInput
    _sum?: collection_admin_configsSumOrderByAggregateInput
  }

  export type collection_admin_configsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<collection_admin_configsScalarWhereWithAggregatesInput>
    OR?: Enumerable<collection_admin_configsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<collection_admin_configsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    workspace_id?: IntWithAggregatesFilter | number
    total_posts?: IntNullableWithAggregatesFilter | number | null
    total_comments?: IntNullableWithAggregatesFilter | number | null
    profile_collection_freq?: IntNullableWithAggregatesFilter | number | null
    posts_collection_freq?: IntNullableWithAggregatesFilter | number | null
    campaign_post_collection_freq?: IntNullableWithAggregatesFilter | number | null
    stories_collection_freq?: IntNullableWithAggregatesFilter | number | null
    created_by_user_id?: IntWithAggregatesFilter | number
    created_ts?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_ts?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type dashboard_statusesCreateInput = {
    status?: string | null
    dashboards?: dashboardsCreateNestedManyWithoutDashboard_statusesInput
  }

  export type dashboard_statusesUncheckedCreateInput = {
    id?: number
    status?: string | null
    dashboards?: dashboardsUncheckedCreateNestedManyWithoutDashboard_statusesInput
  }

  export type dashboard_statusesUpdateInput = {
    status?: NullableStringFieldUpdateOperationsInput | string | null
    dashboards?: dashboardsUpdateManyWithoutDashboard_statusesNestedInput
  }

  export type dashboard_statusesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    dashboards?: dashboardsUncheckedUpdateManyWithoutDashboard_statusesNestedInput
  }

  export type dashboard_statusesCreateManyInput = {
    id?: number
    status?: string | null
  }

  export type dashboard_statusesUpdateManyMutationInput = {
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type dashboard_statusesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type platformsCreateInput = {
    platform?: string | null
    widget_templates?: widget_templatesCreateNestedManyWithoutPlatformsInput
    widgets?: widgetsCreateNestedManyWithoutPlatformsInput
  }

  export type platformsUncheckedCreateInput = {
    id?: number
    platform?: string | null
    widget_templates?: widget_templatesUncheckedCreateNestedManyWithoutPlatformsInput
    widgets?: widgetsUncheckedCreateNestedManyWithoutPlatformsInput
  }

  export type platformsUpdateInput = {
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    widget_templates?: widget_templatesUpdateManyWithoutPlatformsNestedInput
    widgets?: widgetsUpdateManyWithoutPlatformsNestedInput
  }

  export type platformsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    widget_templates?: widget_templatesUncheckedUpdateManyWithoutPlatformsNestedInput
    widgets?: widgetsUncheckedUpdateManyWithoutPlatformsNestedInput
  }

  export type platformsCreateManyInput = {
    id?: number
    platform?: string | null
  }

  export type platformsUpdateManyMutationInput = {
    platform?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type platformsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    platform?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type widget_templatesCreateInput = {
    widget_title?: string | null
    widget_description?: string | null
    default_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_sizes?: NullableJsonNullValueInput | InputJsonValue
    widget_types?: NullableJsonNullValueInput | InputJsonValue
    platforms?: platformsCreateNestedOneWithoutWidget_templatesInput
    widgets?: widgetsCreateNestedManyWithoutWidget_templatesInput
  }

  export type widget_templatesUncheckedCreateInput = {
    id?: number
    widget_title?: string | null
    widget_description?: string | null
    platform_id?: number | null
    default_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_sizes?: NullableJsonNullValueInput | InputJsonValue
    widget_types?: NullableJsonNullValueInput | InputJsonValue
    widgets?: widgetsUncheckedCreateNestedManyWithoutWidget_templatesInput
  }

  export type widget_templatesUpdateInput = {
    widget_title?: NullableStringFieldUpdateOperationsInput | string | null
    widget_description?: NullableStringFieldUpdateOperationsInput | string | null
    default_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_sizes?: NullableJsonNullValueInput | InputJsonValue
    widget_types?: NullableJsonNullValueInput | InputJsonValue
    platforms?: platformsUpdateOneWithoutWidget_templatesNestedInput
    widgets?: widgetsUpdateManyWithoutWidget_templatesNestedInput
  }

  export type widget_templatesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    widget_title?: NullableStringFieldUpdateOperationsInput | string | null
    widget_description?: NullableStringFieldUpdateOperationsInput | string | null
    platform_id?: NullableIntFieldUpdateOperationsInput | number | null
    default_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_sizes?: NullableJsonNullValueInput | InputJsonValue
    widget_types?: NullableJsonNullValueInput | InputJsonValue
    widgets?: widgetsUncheckedUpdateManyWithoutWidget_templatesNestedInput
  }

  export type widget_templatesCreateManyInput = {
    id?: number
    widget_title?: string | null
    widget_description?: string | null
    platform_id?: number | null
    default_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_sizes?: NullableJsonNullValueInput | InputJsonValue
    widget_types?: NullableJsonNullValueInput | InputJsonValue
  }

  export type widget_templatesUpdateManyMutationInput = {
    widget_title?: NullableStringFieldUpdateOperationsInput | string | null
    widget_description?: NullableStringFieldUpdateOperationsInput | string | null
    default_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_sizes?: NullableJsonNullValueInput | InputJsonValue
    widget_types?: NullableJsonNullValueInput | InputJsonValue
  }

  export type widget_templatesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    widget_title?: NullableStringFieldUpdateOperationsInput | string | null
    widget_description?: NullableStringFieldUpdateOperationsInput | string | null
    platform_id?: NullableIntFieldUpdateOperationsInput | number | null
    default_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_sizes?: NullableJsonNullValueInput | InputJsonValue
    widget_types?: NullableJsonNullValueInput | InputJsonValue
  }

  export type dashboardsCreateInput = {
    user_id?: number | null
    dashboard_name?: string | null
    start_ts?: Date | string | null
    end_ts?: Date | string | null
    dashboard_settings?: NullableJsonNullValueInput | InputJsonValue
    reference_id?: number | null
    dashboard_statuses?: dashboard_statusesCreateNestedOneWithoutDashboardsInput
    dashboard_type?: dashboard_typeCreateNestedOneWithoutDashboardsInput
    sharing_info?: sharing_infoCreateNestedManyWithoutDashboardsInput
    widgets?: widgetsCreateNestedManyWithoutDashboardsInput
  }

  export type dashboardsUncheckedCreateInput = {
    id?: number
    user_id?: number | null
    dashboard_name?: string | null
    dashboard_status_id?: number | null
    start_ts?: Date | string | null
    end_ts?: Date | string | null
    dashboard_settings?: NullableJsonNullValueInput | InputJsonValue
    dashboard_type_id?: number | null
    reference_id?: number | null
    sharing_info?: sharing_infoUncheckedCreateNestedManyWithoutDashboardsInput
    widgets?: widgetsUncheckedCreateNestedManyWithoutDashboardsInput
  }

  export type dashboardsUpdateInput = {
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    dashboard_name?: NullableStringFieldUpdateOperationsInput | string | null
    start_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dashboard_settings?: NullableJsonNullValueInput | InputJsonValue
    reference_id?: NullableIntFieldUpdateOperationsInput | number | null
    dashboard_statuses?: dashboard_statusesUpdateOneWithoutDashboardsNestedInput
    dashboard_type?: dashboard_typeUpdateOneWithoutDashboardsNestedInput
    sharing_info?: sharing_infoUpdateManyWithoutDashboardsNestedInput
    widgets?: widgetsUpdateManyWithoutDashboardsNestedInput
  }

  export type dashboardsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    dashboard_name?: NullableStringFieldUpdateOperationsInput | string | null
    dashboard_status_id?: NullableIntFieldUpdateOperationsInput | number | null
    start_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dashboard_settings?: NullableJsonNullValueInput | InputJsonValue
    dashboard_type_id?: NullableIntFieldUpdateOperationsInput | number | null
    reference_id?: NullableIntFieldUpdateOperationsInput | number | null
    sharing_info?: sharing_infoUncheckedUpdateManyWithoutDashboardsNestedInput
    widgets?: widgetsUncheckedUpdateManyWithoutDashboardsNestedInput
  }

  export type dashboardsCreateManyInput = {
    id?: number
    user_id?: number | null
    dashboard_name?: string | null
    dashboard_status_id?: number | null
    start_ts?: Date | string | null
    end_ts?: Date | string | null
    dashboard_settings?: NullableJsonNullValueInput | InputJsonValue
    dashboard_type_id?: number | null
    reference_id?: number | null
  }

  export type dashboardsUpdateManyMutationInput = {
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    dashboard_name?: NullableStringFieldUpdateOperationsInput | string | null
    start_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dashboard_settings?: NullableJsonNullValueInput | InputJsonValue
    reference_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type dashboardsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    dashboard_name?: NullableStringFieldUpdateOperationsInput | string | null
    dashboard_status_id?: NullableIntFieldUpdateOperationsInput | number | null
    start_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dashboard_settings?: NullableJsonNullValueInput | InputJsonValue
    dashboard_type_id?: NullableIntFieldUpdateOperationsInput | number | null
    reference_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type sharing_infoCreateInput = {
    email?: string | null
    user_id?: number | null
    dashboards?: dashboardsCreateNestedOneWithoutSharing_infoInput
  }

  export type sharing_infoUncheckedCreateInput = {
    id?: number
    dashboard_id?: number | null
    email?: string | null
    user_id?: number | null
  }

  export type sharing_infoUpdateInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    dashboards?: dashboardsUpdateOneWithoutSharing_infoNestedInput
  }

  export type sharing_infoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dashboard_id?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type sharing_infoCreateManyInput = {
    id?: number
    dashboard_id?: number | null
    email?: string | null
    user_id?: number | null
  }

  export type sharing_infoUpdateManyMutationInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type sharing_infoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dashboard_id?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type widgetsCreateInput = {
    widget_account_id?: string | null
    widget_property_id?: string | null
    widget_start_ts?: Date | string | null
    widget_end_ts?: Date | string | null
    widget_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_size?: widget_size | null
    widget_type?: widget_type | null
    is_hidden?: boolean | null
    widget_name?: string | null
    platforms?: platformsCreateNestedOneWithoutWidgetsInput
    widget_templates?: widget_templatesCreateNestedOneWithoutWidgetsInput
    dashboards?: dashboardsCreateNestedOneWithoutWidgetsInput
  }

  export type widgetsUncheckedCreateInput = {
    id?: number
    dashboard_id?: number | null
    platform_id?: number | null
    widget_template_id?: number | null
    widget_account_id?: string | null
    widget_property_id?: string | null
    widget_start_ts?: Date | string | null
    widget_end_ts?: Date | string | null
    widget_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_size?: widget_size | null
    widget_type?: widget_type | null
    is_hidden?: boolean | null
    widget_name?: string | null
  }

  export type widgetsUpdateInput = {
    widget_account_id?: NullableStringFieldUpdateOperationsInput | string | null
    widget_property_id?: NullableStringFieldUpdateOperationsInput | string | null
    widget_start_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    widget_end_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    widget_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_size?: NullableEnumwidget_sizeFieldUpdateOperationsInput | widget_size | null
    widget_type?: NullableEnumwidget_typeFieldUpdateOperationsInput | widget_type | null
    is_hidden?: NullableBoolFieldUpdateOperationsInput | boolean | null
    widget_name?: NullableStringFieldUpdateOperationsInput | string | null
    platforms?: platformsUpdateOneWithoutWidgetsNestedInput
    widget_templates?: widget_templatesUpdateOneWithoutWidgetsNestedInput
    dashboards?: dashboardsUpdateOneWithoutWidgetsNestedInput
  }

  export type widgetsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dashboard_id?: NullableIntFieldUpdateOperationsInput | number | null
    platform_id?: NullableIntFieldUpdateOperationsInput | number | null
    widget_template_id?: NullableIntFieldUpdateOperationsInput | number | null
    widget_account_id?: NullableStringFieldUpdateOperationsInput | string | null
    widget_property_id?: NullableStringFieldUpdateOperationsInput | string | null
    widget_start_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    widget_end_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    widget_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_size?: NullableEnumwidget_sizeFieldUpdateOperationsInput | widget_size | null
    widget_type?: NullableEnumwidget_typeFieldUpdateOperationsInput | widget_type | null
    is_hidden?: NullableBoolFieldUpdateOperationsInput | boolean | null
    widget_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type widgetsCreateManyInput = {
    id?: number
    dashboard_id?: number | null
    platform_id?: number | null
    widget_template_id?: number | null
    widget_account_id?: string | null
    widget_property_id?: string | null
    widget_start_ts?: Date | string | null
    widget_end_ts?: Date | string | null
    widget_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_size?: widget_size | null
    widget_type?: widget_type | null
    is_hidden?: boolean | null
    widget_name?: string | null
  }

  export type widgetsUpdateManyMutationInput = {
    widget_account_id?: NullableStringFieldUpdateOperationsInput | string | null
    widget_property_id?: NullableStringFieldUpdateOperationsInput | string | null
    widget_start_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    widget_end_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    widget_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_size?: NullableEnumwidget_sizeFieldUpdateOperationsInput | widget_size | null
    widget_type?: NullableEnumwidget_typeFieldUpdateOperationsInput | widget_type | null
    is_hidden?: NullableBoolFieldUpdateOperationsInput | boolean | null
    widget_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type widgetsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dashboard_id?: NullableIntFieldUpdateOperationsInput | number | null
    platform_id?: NullableIntFieldUpdateOperationsInput | number | null
    widget_template_id?: NullableIntFieldUpdateOperationsInput | number | null
    widget_account_id?: NullableStringFieldUpdateOperationsInput | string | null
    widget_property_id?: NullableStringFieldUpdateOperationsInput | string | null
    widget_start_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    widget_end_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    widget_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_size?: NullableEnumwidget_sizeFieldUpdateOperationsInput | widget_size | null
    widget_type?: NullableEnumwidget_typeFieldUpdateOperationsInput | widget_type | null
    is_hidden?: NullableBoolFieldUpdateOperationsInput | boolean | null
    widget_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type dashboard_typeCreateInput = {
    dashboard_type?: string | null
    dashboards?: dashboardsCreateNestedManyWithoutDashboard_typeInput
  }

  export type dashboard_typeUncheckedCreateInput = {
    id?: number
    dashboard_type?: string | null
    dashboards?: dashboardsUncheckedCreateNestedManyWithoutDashboard_typeInput
  }

  export type dashboard_typeUpdateInput = {
    dashboard_type?: NullableStringFieldUpdateOperationsInput | string | null
    dashboards?: dashboardsUpdateManyWithoutDashboard_typeNestedInput
  }

  export type dashboard_typeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dashboard_type?: NullableStringFieldUpdateOperationsInput | string | null
    dashboards?: dashboardsUncheckedUpdateManyWithoutDashboard_typeNestedInput
  }

  export type dashboard_typeCreateManyInput = {
    id?: number
    dashboard_type?: string | null
  }

  export type dashboard_typeUpdateManyMutationInput = {
    dashboard_type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type dashboard_typeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dashboard_type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type collection_configsCreateInput = {
    title: string
    value: number
  }

  export type collection_configsUncheckedCreateInput = {
    id?: number
    title: string
    value: number
  }

  export type collection_configsUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
  }

  export type collection_configsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
  }

  export type collection_configsCreateManyInput = {
    id?: number
    title: string
    value: number
  }

  export type collection_configsUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
  }

  export type collection_configsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
  }

  export type collection_admin_configsCreateInput = {
    workspace_id: number
    total_posts?: number | null
    total_comments?: number | null
    profile_collection_freq?: number | null
    posts_collection_freq?: number | null
    campaign_post_collection_freq?: number | null
    stories_collection_freq?: number | null
    created_by_user_id: number
    created_ts?: Date | string | null
    updated_ts?: Date | string | null
  }

  export type collection_admin_configsUncheckedCreateInput = {
    id?: number
    workspace_id: number
    total_posts?: number | null
    total_comments?: number | null
    profile_collection_freq?: number | null
    posts_collection_freq?: number | null
    campaign_post_collection_freq?: number | null
    stories_collection_freq?: number | null
    created_by_user_id: number
    created_ts?: Date | string | null
    updated_ts?: Date | string | null
  }

  export type collection_admin_configsUpdateInput = {
    workspace_id?: IntFieldUpdateOperationsInput | number
    total_posts?: NullableIntFieldUpdateOperationsInput | number | null
    total_comments?: NullableIntFieldUpdateOperationsInput | number | null
    profile_collection_freq?: NullableIntFieldUpdateOperationsInput | number | null
    posts_collection_freq?: NullableIntFieldUpdateOperationsInput | number | null
    campaign_post_collection_freq?: NullableIntFieldUpdateOperationsInput | number | null
    stories_collection_freq?: NullableIntFieldUpdateOperationsInput | number | null
    created_by_user_id?: IntFieldUpdateOperationsInput | number
    created_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type collection_admin_configsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspace_id?: IntFieldUpdateOperationsInput | number
    total_posts?: NullableIntFieldUpdateOperationsInput | number | null
    total_comments?: NullableIntFieldUpdateOperationsInput | number | null
    profile_collection_freq?: NullableIntFieldUpdateOperationsInput | number | null
    posts_collection_freq?: NullableIntFieldUpdateOperationsInput | number | null
    campaign_post_collection_freq?: NullableIntFieldUpdateOperationsInput | number | null
    stories_collection_freq?: NullableIntFieldUpdateOperationsInput | number | null
    created_by_user_id?: IntFieldUpdateOperationsInput | number
    created_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type collection_admin_configsCreateManyInput = {
    id?: number
    workspace_id: number
    total_posts?: number | null
    total_comments?: number | null
    profile_collection_freq?: number | null
    posts_collection_freq?: number | null
    campaign_post_collection_freq?: number | null
    stories_collection_freq?: number | null
    created_by_user_id: number
    created_ts?: Date | string | null
    updated_ts?: Date | string | null
  }

  export type collection_admin_configsUpdateManyMutationInput = {
    workspace_id?: IntFieldUpdateOperationsInput | number
    total_posts?: NullableIntFieldUpdateOperationsInput | number | null
    total_comments?: NullableIntFieldUpdateOperationsInput | number | null
    profile_collection_freq?: NullableIntFieldUpdateOperationsInput | number | null
    posts_collection_freq?: NullableIntFieldUpdateOperationsInput | number | null
    campaign_post_collection_freq?: NullableIntFieldUpdateOperationsInput | number | null
    stories_collection_freq?: NullableIntFieldUpdateOperationsInput | number | null
    created_by_user_id?: IntFieldUpdateOperationsInput | number
    created_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type collection_admin_configsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    workspace_id?: IntFieldUpdateOperationsInput | number
    total_posts?: NullableIntFieldUpdateOperationsInput | number | null
    total_comments?: NullableIntFieldUpdateOperationsInput | number | null
    profile_collection_freq?: NullableIntFieldUpdateOperationsInput | number | null
    posts_collection_freq?: NullableIntFieldUpdateOperationsInput | number | null
    campaign_post_collection_freq?: NullableIntFieldUpdateOperationsInput | number | null
    stories_collection_freq?: NullableIntFieldUpdateOperationsInput | number | null
    created_by_user_id?: IntFieldUpdateOperationsInput | number
    created_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DashboardsListRelationFilter = {
    every?: dashboardsWhereInput
    some?: dashboardsWhereInput
    none?: dashboardsWhereInput
  }

  export type dashboardsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type dashboard_statusesCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
  }

  export type dashboard_statusesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type dashboard_statusesMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
  }

  export type dashboard_statusesMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
  }

  export type dashboard_statusesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type Widget_templatesListRelationFilter = {
    every?: widget_templatesWhereInput
    some?: widget_templatesWhereInput
    none?: widget_templatesWhereInput
  }

  export type WidgetsListRelationFilter = {
    every?: widgetsWhereInput
    some?: widgetsWhereInput
    none?: widgetsWhereInput
  }

  export type widget_templatesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type widgetsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type platformsCountOrderByAggregateInput = {
    id?: SortOrder
    platform?: SortOrder
  }

  export type platformsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type platformsMaxOrderByAggregateInput = {
    id?: SortOrder
    platform?: SortOrder
  }

  export type platformsMinOrderByAggregateInput = {
    id?: SortOrder
    platform?: SortOrder
  }

  export type platformsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type PlatformsRelationFilter = {
    is?: platformsWhereInput | null
    isNot?: platformsWhereInput | null
  }

  export type widget_templatesCountOrderByAggregateInput = {
    id?: SortOrder
    widget_title?: SortOrder
    widget_description?: SortOrder
    platform_id?: SortOrder
    default_settings?: SortOrder
    widget_sizes?: SortOrder
    widget_types?: SortOrder
  }

  export type widget_templatesAvgOrderByAggregateInput = {
    id?: SortOrder
    platform_id?: SortOrder
  }

  export type widget_templatesMaxOrderByAggregateInput = {
    id?: SortOrder
    widget_title?: SortOrder
    widget_description?: SortOrder
    platform_id?: SortOrder
  }

  export type widget_templatesMinOrderByAggregateInput = {
    id?: SortOrder
    widget_title?: SortOrder
    widget_description?: SortOrder
    platform_id?: SortOrder
  }

  export type widget_templatesSumOrderByAggregateInput = {
    id?: SortOrder
    platform_id?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntNullableFilter
    _min?: NestedJsonNullableFilter
    _max?: NestedJsonNullableFilter
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type Dashboard_statusesRelationFilter = {
    is?: dashboard_statusesWhereInput | null
    isNot?: dashboard_statusesWhereInput | null
  }

  export type Dashboard_typeRelationFilter = {
    is?: dashboard_typeWhereInput | null
    isNot?: dashboard_typeWhereInput | null
  }

  export type Sharing_infoListRelationFilter = {
    every?: sharing_infoWhereInput
    some?: sharing_infoWhereInput
    none?: sharing_infoWhereInput
  }

  export type sharing_infoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type dashboardsCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    dashboard_name?: SortOrder
    dashboard_status_id?: SortOrder
    start_ts?: SortOrder
    end_ts?: SortOrder
    dashboard_settings?: SortOrder
    dashboard_type_id?: SortOrder
    reference_id?: SortOrder
  }

  export type dashboardsAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    dashboard_status_id?: SortOrder
    dashboard_type_id?: SortOrder
    reference_id?: SortOrder
  }

  export type dashboardsMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    dashboard_name?: SortOrder
    dashboard_status_id?: SortOrder
    start_ts?: SortOrder
    end_ts?: SortOrder
    dashboard_type_id?: SortOrder
    reference_id?: SortOrder
  }

  export type dashboardsMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    dashboard_name?: SortOrder
    dashboard_status_id?: SortOrder
    start_ts?: SortOrder
    end_ts?: SortOrder
    dashboard_type_id?: SortOrder
    reference_id?: SortOrder
  }

  export type dashboardsSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    dashboard_status_id?: SortOrder
    dashboard_type_id?: SortOrder
    reference_id?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type DashboardsRelationFilter = {
    is?: dashboardsWhereInput | null
    isNot?: dashboardsWhereInput | null
  }

  export type sharing_infoCountOrderByAggregateInput = {
    id?: SortOrder
    dashboard_id?: SortOrder
    email?: SortOrder
    user_id?: SortOrder
  }

  export type sharing_infoAvgOrderByAggregateInput = {
    id?: SortOrder
    dashboard_id?: SortOrder
    user_id?: SortOrder
  }

  export type sharing_infoMaxOrderByAggregateInput = {
    id?: SortOrder
    dashboard_id?: SortOrder
    email?: SortOrder
    user_id?: SortOrder
  }

  export type sharing_infoMinOrderByAggregateInput = {
    id?: SortOrder
    dashboard_id?: SortOrder
    email?: SortOrder
    user_id?: SortOrder
  }

  export type sharing_infoSumOrderByAggregateInput = {
    id?: SortOrder
    dashboard_id?: SortOrder
    user_id?: SortOrder
  }

  export type Enumwidget_sizeNullableFilter = {
    equals?: widget_size | null
    in?: Enumerable<widget_size> | null
    notIn?: Enumerable<widget_size> | null
    not?: NestedEnumwidget_sizeNullableFilter | widget_size | null
  }

  export type Enumwidget_typeNullableFilter = {
    equals?: widget_type | null
    in?: Enumerable<widget_type> | null
    notIn?: Enumerable<widget_type> | null
    not?: NestedEnumwidget_typeNullableFilter | widget_type | null
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type Widget_templatesRelationFilter = {
    is?: widget_templatesWhereInput | null
    isNot?: widget_templatesWhereInput | null
  }

  export type widgetsCountOrderByAggregateInput = {
    id?: SortOrder
    dashboard_id?: SortOrder
    platform_id?: SortOrder
    widget_template_id?: SortOrder
    widget_account_id?: SortOrder
    widget_property_id?: SortOrder
    widget_start_ts?: SortOrder
    widget_end_ts?: SortOrder
    widget_settings?: SortOrder
    widget_size?: SortOrder
    widget_type?: SortOrder
    is_hidden?: SortOrder
    widget_name?: SortOrder
  }

  export type widgetsAvgOrderByAggregateInput = {
    id?: SortOrder
    dashboard_id?: SortOrder
    platform_id?: SortOrder
    widget_template_id?: SortOrder
  }

  export type widgetsMaxOrderByAggregateInput = {
    id?: SortOrder
    dashboard_id?: SortOrder
    platform_id?: SortOrder
    widget_template_id?: SortOrder
    widget_account_id?: SortOrder
    widget_property_id?: SortOrder
    widget_start_ts?: SortOrder
    widget_end_ts?: SortOrder
    widget_size?: SortOrder
    widget_type?: SortOrder
    is_hidden?: SortOrder
    widget_name?: SortOrder
  }

  export type widgetsMinOrderByAggregateInput = {
    id?: SortOrder
    dashboard_id?: SortOrder
    platform_id?: SortOrder
    widget_template_id?: SortOrder
    widget_account_id?: SortOrder
    widget_property_id?: SortOrder
    widget_start_ts?: SortOrder
    widget_end_ts?: SortOrder
    widget_size?: SortOrder
    widget_type?: SortOrder
    is_hidden?: SortOrder
    widget_name?: SortOrder
  }

  export type widgetsSumOrderByAggregateInput = {
    id?: SortOrder
    dashboard_id?: SortOrder
    platform_id?: SortOrder
    widget_template_id?: SortOrder
  }

  export type Enumwidget_sizeNullableWithAggregatesFilter = {
    equals?: widget_size | null
    in?: Enumerable<widget_size> | null
    notIn?: Enumerable<widget_size> | null
    not?: NestedEnumwidget_sizeNullableWithAggregatesFilter | widget_size | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumwidget_sizeNullableFilter
    _max?: NestedEnumwidget_sizeNullableFilter
  }

  export type Enumwidget_typeNullableWithAggregatesFilter = {
    equals?: widget_type | null
    in?: Enumerable<widget_type> | null
    notIn?: Enumerable<widget_type> | null
    not?: NestedEnumwidget_typeNullableWithAggregatesFilter | widget_type | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumwidget_typeNullableFilter
    _max?: NestedEnumwidget_typeNullableFilter
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type dashboard_typeCountOrderByAggregateInput = {
    id?: SortOrder
    dashboard_type?: SortOrder
  }

  export type dashboard_typeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type dashboard_typeMaxOrderByAggregateInput = {
    id?: SortOrder
    dashboard_type?: SortOrder
  }

  export type dashboard_typeMinOrderByAggregateInput = {
    id?: SortOrder
    dashboard_type?: SortOrder
  }

  export type dashboard_typeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type collection_configsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    value?: SortOrder
  }

  export type collection_configsAvgOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
  }

  export type collection_configsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    value?: SortOrder
  }

  export type collection_configsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    value?: SortOrder
  }

  export type collection_configsSumOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type collection_admin_configsCountOrderByAggregateInput = {
    id?: SortOrder
    workspace_id?: SortOrder
    total_posts?: SortOrder
    total_comments?: SortOrder
    profile_collection_freq?: SortOrder
    posts_collection_freq?: SortOrder
    campaign_post_collection_freq?: SortOrder
    stories_collection_freq?: SortOrder
    created_by_user_id?: SortOrder
    created_ts?: SortOrder
    updated_ts?: SortOrder
  }

  export type collection_admin_configsAvgOrderByAggregateInput = {
    id?: SortOrder
    workspace_id?: SortOrder
    total_posts?: SortOrder
    total_comments?: SortOrder
    profile_collection_freq?: SortOrder
    posts_collection_freq?: SortOrder
    campaign_post_collection_freq?: SortOrder
    stories_collection_freq?: SortOrder
    created_by_user_id?: SortOrder
  }

  export type collection_admin_configsMaxOrderByAggregateInput = {
    id?: SortOrder
    workspace_id?: SortOrder
    total_posts?: SortOrder
    total_comments?: SortOrder
    profile_collection_freq?: SortOrder
    posts_collection_freq?: SortOrder
    campaign_post_collection_freq?: SortOrder
    stories_collection_freq?: SortOrder
    created_by_user_id?: SortOrder
    created_ts?: SortOrder
    updated_ts?: SortOrder
  }

  export type collection_admin_configsMinOrderByAggregateInput = {
    id?: SortOrder
    workspace_id?: SortOrder
    total_posts?: SortOrder
    total_comments?: SortOrder
    profile_collection_freq?: SortOrder
    posts_collection_freq?: SortOrder
    campaign_post_collection_freq?: SortOrder
    stories_collection_freq?: SortOrder
    created_by_user_id?: SortOrder
    created_ts?: SortOrder
    updated_ts?: SortOrder
  }

  export type collection_admin_configsSumOrderByAggregateInput = {
    id?: SortOrder
    workspace_id?: SortOrder
    total_posts?: SortOrder
    total_comments?: SortOrder
    profile_collection_freq?: SortOrder
    posts_collection_freq?: SortOrder
    campaign_post_collection_freq?: SortOrder
    stories_collection_freq?: SortOrder
    created_by_user_id?: SortOrder
  }

  export type dashboardsCreateNestedManyWithoutDashboard_statusesInput = {
    create?: XOR<Enumerable<dashboardsCreateWithoutDashboard_statusesInput>, Enumerable<dashboardsUncheckedCreateWithoutDashboard_statusesInput>>
    connectOrCreate?: Enumerable<dashboardsCreateOrConnectWithoutDashboard_statusesInput>
    createMany?: dashboardsCreateManyDashboard_statusesInputEnvelope
    connect?: Enumerable<dashboardsWhereUniqueInput>
  }

  export type dashboardsUncheckedCreateNestedManyWithoutDashboard_statusesInput = {
    create?: XOR<Enumerable<dashboardsCreateWithoutDashboard_statusesInput>, Enumerable<dashboardsUncheckedCreateWithoutDashboard_statusesInput>>
    connectOrCreate?: Enumerable<dashboardsCreateOrConnectWithoutDashboard_statusesInput>
    createMany?: dashboardsCreateManyDashboard_statusesInputEnvelope
    connect?: Enumerable<dashboardsWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type dashboardsUpdateManyWithoutDashboard_statusesNestedInput = {
    create?: XOR<Enumerable<dashboardsCreateWithoutDashboard_statusesInput>, Enumerable<dashboardsUncheckedCreateWithoutDashboard_statusesInput>>
    connectOrCreate?: Enumerable<dashboardsCreateOrConnectWithoutDashboard_statusesInput>
    upsert?: Enumerable<dashboardsUpsertWithWhereUniqueWithoutDashboard_statusesInput>
    createMany?: dashboardsCreateManyDashboard_statusesInputEnvelope
    set?: Enumerable<dashboardsWhereUniqueInput>
    disconnect?: Enumerable<dashboardsWhereUniqueInput>
    delete?: Enumerable<dashboardsWhereUniqueInput>
    connect?: Enumerable<dashboardsWhereUniqueInput>
    update?: Enumerable<dashboardsUpdateWithWhereUniqueWithoutDashboard_statusesInput>
    updateMany?: Enumerable<dashboardsUpdateManyWithWhereWithoutDashboard_statusesInput>
    deleteMany?: Enumerable<dashboardsScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type dashboardsUncheckedUpdateManyWithoutDashboard_statusesNestedInput = {
    create?: XOR<Enumerable<dashboardsCreateWithoutDashboard_statusesInput>, Enumerable<dashboardsUncheckedCreateWithoutDashboard_statusesInput>>
    connectOrCreate?: Enumerable<dashboardsCreateOrConnectWithoutDashboard_statusesInput>
    upsert?: Enumerable<dashboardsUpsertWithWhereUniqueWithoutDashboard_statusesInput>
    createMany?: dashboardsCreateManyDashboard_statusesInputEnvelope
    set?: Enumerable<dashboardsWhereUniqueInput>
    disconnect?: Enumerable<dashboardsWhereUniqueInput>
    delete?: Enumerable<dashboardsWhereUniqueInput>
    connect?: Enumerable<dashboardsWhereUniqueInput>
    update?: Enumerable<dashboardsUpdateWithWhereUniqueWithoutDashboard_statusesInput>
    updateMany?: Enumerable<dashboardsUpdateManyWithWhereWithoutDashboard_statusesInput>
    deleteMany?: Enumerable<dashboardsScalarWhereInput>
  }

  export type widget_templatesCreateNestedManyWithoutPlatformsInput = {
    create?: XOR<Enumerable<widget_templatesCreateWithoutPlatformsInput>, Enumerable<widget_templatesUncheckedCreateWithoutPlatformsInput>>
    connectOrCreate?: Enumerable<widget_templatesCreateOrConnectWithoutPlatformsInput>
    createMany?: widget_templatesCreateManyPlatformsInputEnvelope
    connect?: Enumerable<widget_templatesWhereUniqueInput>
  }

  export type widgetsCreateNestedManyWithoutPlatformsInput = {
    create?: XOR<Enumerable<widgetsCreateWithoutPlatformsInput>, Enumerable<widgetsUncheckedCreateWithoutPlatformsInput>>
    connectOrCreate?: Enumerable<widgetsCreateOrConnectWithoutPlatformsInput>
    createMany?: widgetsCreateManyPlatformsInputEnvelope
    connect?: Enumerable<widgetsWhereUniqueInput>
  }

  export type widget_templatesUncheckedCreateNestedManyWithoutPlatformsInput = {
    create?: XOR<Enumerable<widget_templatesCreateWithoutPlatformsInput>, Enumerable<widget_templatesUncheckedCreateWithoutPlatformsInput>>
    connectOrCreate?: Enumerable<widget_templatesCreateOrConnectWithoutPlatformsInput>
    createMany?: widget_templatesCreateManyPlatformsInputEnvelope
    connect?: Enumerable<widget_templatesWhereUniqueInput>
  }

  export type widgetsUncheckedCreateNestedManyWithoutPlatformsInput = {
    create?: XOR<Enumerable<widgetsCreateWithoutPlatformsInput>, Enumerable<widgetsUncheckedCreateWithoutPlatformsInput>>
    connectOrCreate?: Enumerable<widgetsCreateOrConnectWithoutPlatformsInput>
    createMany?: widgetsCreateManyPlatformsInputEnvelope
    connect?: Enumerable<widgetsWhereUniqueInput>
  }

  export type widget_templatesUpdateManyWithoutPlatformsNestedInput = {
    create?: XOR<Enumerable<widget_templatesCreateWithoutPlatformsInput>, Enumerable<widget_templatesUncheckedCreateWithoutPlatformsInput>>
    connectOrCreate?: Enumerable<widget_templatesCreateOrConnectWithoutPlatformsInput>
    upsert?: Enumerable<widget_templatesUpsertWithWhereUniqueWithoutPlatformsInput>
    createMany?: widget_templatesCreateManyPlatformsInputEnvelope
    set?: Enumerable<widget_templatesWhereUniqueInput>
    disconnect?: Enumerable<widget_templatesWhereUniqueInput>
    delete?: Enumerable<widget_templatesWhereUniqueInput>
    connect?: Enumerable<widget_templatesWhereUniqueInput>
    update?: Enumerable<widget_templatesUpdateWithWhereUniqueWithoutPlatformsInput>
    updateMany?: Enumerable<widget_templatesUpdateManyWithWhereWithoutPlatformsInput>
    deleteMany?: Enumerable<widget_templatesScalarWhereInput>
  }

  export type widgetsUpdateManyWithoutPlatformsNestedInput = {
    create?: XOR<Enumerable<widgetsCreateWithoutPlatformsInput>, Enumerable<widgetsUncheckedCreateWithoutPlatformsInput>>
    connectOrCreate?: Enumerable<widgetsCreateOrConnectWithoutPlatformsInput>
    upsert?: Enumerable<widgetsUpsertWithWhereUniqueWithoutPlatformsInput>
    createMany?: widgetsCreateManyPlatformsInputEnvelope
    set?: Enumerable<widgetsWhereUniqueInput>
    disconnect?: Enumerable<widgetsWhereUniqueInput>
    delete?: Enumerable<widgetsWhereUniqueInput>
    connect?: Enumerable<widgetsWhereUniqueInput>
    update?: Enumerable<widgetsUpdateWithWhereUniqueWithoutPlatformsInput>
    updateMany?: Enumerable<widgetsUpdateManyWithWhereWithoutPlatformsInput>
    deleteMany?: Enumerable<widgetsScalarWhereInput>
  }

  export type widget_templatesUncheckedUpdateManyWithoutPlatformsNestedInput = {
    create?: XOR<Enumerable<widget_templatesCreateWithoutPlatformsInput>, Enumerable<widget_templatesUncheckedCreateWithoutPlatformsInput>>
    connectOrCreate?: Enumerable<widget_templatesCreateOrConnectWithoutPlatformsInput>
    upsert?: Enumerable<widget_templatesUpsertWithWhereUniqueWithoutPlatformsInput>
    createMany?: widget_templatesCreateManyPlatformsInputEnvelope
    set?: Enumerable<widget_templatesWhereUniqueInput>
    disconnect?: Enumerable<widget_templatesWhereUniqueInput>
    delete?: Enumerable<widget_templatesWhereUniqueInput>
    connect?: Enumerable<widget_templatesWhereUniqueInput>
    update?: Enumerable<widget_templatesUpdateWithWhereUniqueWithoutPlatformsInput>
    updateMany?: Enumerable<widget_templatesUpdateManyWithWhereWithoutPlatformsInput>
    deleteMany?: Enumerable<widget_templatesScalarWhereInput>
  }

  export type widgetsUncheckedUpdateManyWithoutPlatformsNestedInput = {
    create?: XOR<Enumerable<widgetsCreateWithoutPlatformsInput>, Enumerable<widgetsUncheckedCreateWithoutPlatformsInput>>
    connectOrCreate?: Enumerable<widgetsCreateOrConnectWithoutPlatformsInput>
    upsert?: Enumerable<widgetsUpsertWithWhereUniqueWithoutPlatformsInput>
    createMany?: widgetsCreateManyPlatformsInputEnvelope
    set?: Enumerable<widgetsWhereUniqueInput>
    disconnect?: Enumerable<widgetsWhereUniqueInput>
    delete?: Enumerable<widgetsWhereUniqueInput>
    connect?: Enumerable<widgetsWhereUniqueInput>
    update?: Enumerable<widgetsUpdateWithWhereUniqueWithoutPlatformsInput>
    updateMany?: Enumerable<widgetsUpdateManyWithWhereWithoutPlatformsInput>
    deleteMany?: Enumerable<widgetsScalarWhereInput>
  }

  export type platformsCreateNestedOneWithoutWidget_templatesInput = {
    create?: XOR<platformsCreateWithoutWidget_templatesInput, platformsUncheckedCreateWithoutWidget_templatesInput>
    connectOrCreate?: platformsCreateOrConnectWithoutWidget_templatesInput
    connect?: platformsWhereUniqueInput
  }

  export type widgetsCreateNestedManyWithoutWidget_templatesInput = {
    create?: XOR<Enumerable<widgetsCreateWithoutWidget_templatesInput>, Enumerable<widgetsUncheckedCreateWithoutWidget_templatesInput>>
    connectOrCreate?: Enumerable<widgetsCreateOrConnectWithoutWidget_templatesInput>
    createMany?: widgetsCreateManyWidget_templatesInputEnvelope
    connect?: Enumerable<widgetsWhereUniqueInput>
  }

  export type widgetsUncheckedCreateNestedManyWithoutWidget_templatesInput = {
    create?: XOR<Enumerable<widgetsCreateWithoutWidget_templatesInput>, Enumerable<widgetsUncheckedCreateWithoutWidget_templatesInput>>
    connectOrCreate?: Enumerable<widgetsCreateOrConnectWithoutWidget_templatesInput>
    createMany?: widgetsCreateManyWidget_templatesInputEnvelope
    connect?: Enumerable<widgetsWhereUniqueInput>
  }

  export type platformsUpdateOneWithoutWidget_templatesNestedInput = {
    create?: XOR<platformsCreateWithoutWidget_templatesInput, platformsUncheckedCreateWithoutWidget_templatesInput>
    connectOrCreate?: platformsCreateOrConnectWithoutWidget_templatesInput
    upsert?: platformsUpsertWithoutWidget_templatesInput
    disconnect?: boolean
    delete?: boolean
    connect?: platformsWhereUniqueInput
    update?: XOR<platformsUpdateWithoutWidget_templatesInput, platformsUncheckedUpdateWithoutWidget_templatesInput>
  }

  export type widgetsUpdateManyWithoutWidget_templatesNestedInput = {
    create?: XOR<Enumerable<widgetsCreateWithoutWidget_templatesInput>, Enumerable<widgetsUncheckedCreateWithoutWidget_templatesInput>>
    connectOrCreate?: Enumerable<widgetsCreateOrConnectWithoutWidget_templatesInput>
    upsert?: Enumerable<widgetsUpsertWithWhereUniqueWithoutWidget_templatesInput>
    createMany?: widgetsCreateManyWidget_templatesInputEnvelope
    set?: Enumerable<widgetsWhereUniqueInput>
    disconnect?: Enumerable<widgetsWhereUniqueInput>
    delete?: Enumerable<widgetsWhereUniqueInput>
    connect?: Enumerable<widgetsWhereUniqueInput>
    update?: Enumerable<widgetsUpdateWithWhereUniqueWithoutWidget_templatesInput>
    updateMany?: Enumerable<widgetsUpdateManyWithWhereWithoutWidget_templatesInput>
    deleteMany?: Enumerable<widgetsScalarWhereInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type widgetsUncheckedUpdateManyWithoutWidget_templatesNestedInput = {
    create?: XOR<Enumerable<widgetsCreateWithoutWidget_templatesInput>, Enumerable<widgetsUncheckedCreateWithoutWidget_templatesInput>>
    connectOrCreate?: Enumerable<widgetsCreateOrConnectWithoutWidget_templatesInput>
    upsert?: Enumerable<widgetsUpsertWithWhereUniqueWithoutWidget_templatesInput>
    createMany?: widgetsCreateManyWidget_templatesInputEnvelope
    set?: Enumerable<widgetsWhereUniqueInput>
    disconnect?: Enumerable<widgetsWhereUniqueInput>
    delete?: Enumerable<widgetsWhereUniqueInput>
    connect?: Enumerable<widgetsWhereUniqueInput>
    update?: Enumerable<widgetsUpdateWithWhereUniqueWithoutWidget_templatesInput>
    updateMany?: Enumerable<widgetsUpdateManyWithWhereWithoutWidget_templatesInput>
    deleteMany?: Enumerable<widgetsScalarWhereInput>
  }

  export type dashboard_statusesCreateNestedOneWithoutDashboardsInput = {
    create?: XOR<dashboard_statusesCreateWithoutDashboardsInput, dashboard_statusesUncheckedCreateWithoutDashboardsInput>
    connectOrCreate?: dashboard_statusesCreateOrConnectWithoutDashboardsInput
    connect?: dashboard_statusesWhereUniqueInput
  }

  export type dashboard_typeCreateNestedOneWithoutDashboardsInput = {
    create?: XOR<dashboard_typeCreateWithoutDashboardsInput, dashboard_typeUncheckedCreateWithoutDashboardsInput>
    connectOrCreate?: dashboard_typeCreateOrConnectWithoutDashboardsInput
    connect?: dashboard_typeWhereUniqueInput
  }

  export type sharing_infoCreateNestedManyWithoutDashboardsInput = {
    create?: XOR<Enumerable<sharing_infoCreateWithoutDashboardsInput>, Enumerable<sharing_infoUncheckedCreateWithoutDashboardsInput>>
    connectOrCreate?: Enumerable<sharing_infoCreateOrConnectWithoutDashboardsInput>
    createMany?: sharing_infoCreateManyDashboardsInputEnvelope
    connect?: Enumerable<sharing_infoWhereUniqueInput>
  }

  export type widgetsCreateNestedManyWithoutDashboardsInput = {
    create?: XOR<Enumerable<widgetsCreateWithoutDashboardsInput>, Enumerable<widgetsUncheckedCreateWithoutDashboardsInput>>
    connectOrCreate?: Enumerable<widgetsCreateOrConnectWithoutDashboardsInput>
    createMany?: widgetsCreateManyDashboardsInputEnvelope
    connect?: Enumerable<widgetsWhereUniqueInput>
  }

  export type sharing_infoUncheckedCreateNestedManyWithoutDashboardsInput = {
    create?: XOR<Enumerable<sharing_infoCreateWithoutDashboardsInput>, Enumerable<sharing_infoUncheckedCreateWithoutDashboardsInput>>
    connectOrCreate?: Enumerable<sharing_infoCreateOrConnectWithoutDashboardsInput>
    createMany?: sharing_infoCreateManyDashboardsInputEnvelope
    connect?: Enumerable<sharing_infoWhereUniqueInput>
  }

  export type widgetsUncheckedCreateNestedManyWithoutDashboardsInput = {
    create?: XOR<Enumerable<widgetsCreateWithoutDashboardsInput>, Enumerable<widgetsUncheckedCreateWithoutDashboardsInput>>
    connectOrCreate?: Enumerable<widgetsCreateOrConnectWithoutDashboardsInput>
    createMany?: widgetsCreateManyDashboardsInputEnvelope
    connect?: Enumerable<widgetsWhereUniqueInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type dashboard_statusesUpdateOneWithoutDashboardsNestedInput = {
    create?: XOR<dashboard_statusesCreateWithoutDashboardsInput, dashboard_statusesUncheckedCreateWithoutDashboardsInput>
    connectOrCreate?: dashboard_statusesCreateOrConnectWithoutDashboardsInput
    upsert?: dashboard_statusesUpsertWithoutDashboardsInput
    disconnect?: boolean
    delete?: boolean
    connect?: dashboard_statusesWhereUniqueInput
    update?: XOR<dashboard_statusesUpdateWithoutDashboardsInput, dashboard_statusesUncheckedUpdateWithoutDashboardsInput>
  }

  export type dashboard_typeUpdateOneWithoutDashboardsNestedInput = {
    create?: XOR<dashboard_typeCreateWithoutDashboardsInput, dashboard_typeUncheckedCreateWithoutDashboardsInput>
    connectOrCreate?: dashboard_typeCreateOrConnectWithoutDashboardsInput
    upsert?: dashboard_typeUpsertWithoutDashboardsInput
    disconnect?: boolean
    delete?: boolean
    connect?: dashboard_typeWhereUniqueInput
    update?: XOR<dashboard_typeUpdateWithoutDashboardsInput, dashboard_typeUncheckedUpdateWithoutDashboardsInput>
  }

  export type sharing_infoUpdateManyWithoutDashboardsNestedInput = {
    create?: XOR<Enumerable<sharing_infoCreateWithoutDashboardsInput>, Enumerable<sharing_infoUncheckedCreateWithoutDashboardsInput>>
    connectOrCreate?: Enumerable<sharing_infoCreateOrConnectWithoutDashboardsInput>
    upsert?: Enumerable<sharing_infoUpsertWithWhereUniqueWithoutDashboardsInput>
    createMany?: sharing_infoCreateManyDashboardsInputEnvelope
    set?: Enumerable<sharing_infoWhereUniqueInput>
    disconnect?: Enumerable<sharing_infoWhereUniqueInput>
    delete?: Enumerable<sharing_infoWhereUniqueInput>
    connect?: Enumerable<sharing_infoWhereUniqueInput>
    update?: Enumerable<sharing_infoUpdateWithWhereUniqueWithoutDashboardsInput>
    updateMany?: Enumerable<sharing_infoUpdateManyWithWhereWithoutDashboardsInput>
    deleteMany?: Enumerable<sharing_infoScalarWhereInput>
  }

  export type widgetsUpdateManyWithoutDashboardsNestedInput = {
    create?: XOR<Enumerable<widgetsCreateWithoutDashboardsInput>, Enumerable<widgetsUncheckedCreateWithoutDashboardsInput>>
    connectOrCreate?: Enumerable<widgetsCreateOrConnectWithoutDashboardsInput>
    upsert?: Enumerable<widgetsUpsertWithWhereUniqueWithoutDashboardsInput>
    createMany?: widgetsCreateManyDashboardsInputEnvelope
    set?: Enumerable<widgetsWhereUniqueInput>
    disconnect?: Enumerable<widgetsWhereUniqueInput>
    delete?: Enumerable<widgetsWhereUniqueInput>
    connect?: Enumerable<widgetsWhereUniqueInput>
    update?: Enumerable<widgetsUpdateWithWhereUniqueWithoutDashboardsInput>
    updateMany?: Enumerable<widgetsUpdateManyWithWhereWithoutDashboardsInput>
    deleteMany?: Enumerable<widgetsScalarWhereInput>
  }

  export type sharing_infoUncheckedUpdateManyWithoutDashboardsNestedInput = {
    create?: XOR<Enumerable<sharing_infoCreateWithoutDashboardsInput>, Enumerable<sharing_infoUncheckedCreateWithoutDashboardsInput>>
    connectOrCreate?: Enumerable<sharing_infoCreateOrConnectWithoutDashboardsInput>
    upsert?: Enumerable<sharing_infoUpsertWithWhereUniqueWithoutDashboardsInput>
    createMany?: sharing_infoCreateManyDashboardsInputEnvelope
    set?: Enumerable<sharing_infoWhereUniqueInput>
    disconnect?: Enumerable<sharing_infoWhereUniqueInput>
    delete?: Enumerable<sharing_infoWhereUniqueInput>
    connect?: Enumerable<sharing_infoWhereUniqueInput>
    update?: Enumerable<sharing_infoUpdateWithWhereUniqueWithoutDashboardsInput>
    updateMany?: Enumerable<sharing_infoUpdateManyWithWhereWithoutDashboardsInput>
    deleteMany?: Enumerable<sharing_infoScalarWhereInput>
  }

  export type widgetsUncheckedUpdateManyWithoutDashboardsNestedInput = {
    create?: XOR<Enumerable<widgetsCreateWithoutDashboardsInput>, Enumerable<widgetsUncheckedCreateWithoutDashboardsInput>>
    connectOrCreate?: Enumerable<widgetsCreateOrConnectWithoutDashboardsInput>
    upsert?: Enumerable<widgetsUpsertWithWhereUniqueWithoutDashboardsInput>
    createMany?: widgetsCreateManyDashboardsInputEnvelope
    set?: Enumerable<widgetsWhereUniqueInput>
    disconnect?: Enumerable<widgetsWhereUniqueInput>
    delete?: Enumerable<widgetsWhereUniqueInput>
    connect?: Enumerable<widgetsWhereUniqueInput>
    update?: Enumerable<widgetsUpdateWithWhereUniqueWithoutDashboardsInput>
    updateMany?: Enumerable<widgetsUpdateManyWithWhereWithoutDashboardsInput>
    deleteMany?: Enumerable<widgetsScalarWhereInput>
  }

  export type dashboardsCreateNestedOneWithoutSharing_infoInput = {
    create?: XOR<dashboardsCreateWithoutSharing_infoInput, dashboardsUncheckedCreateWithoutSharing_infoInput>
    connectOrCreate?: dashboardsCreateOrConnectWithoutSharing_infoInput
    connect?: dashboardsWhereUniqueInput
  }

  export type dashboardsUpdateOneWithoutSharing_infoNestedInput = {
    create?: XOR<dashboardsCreateWithoutSharing_infoInput, dashboardsUncheckedCreateWithoutSharing_infoInput>
    connectOrCreate?: dashboardsCreateOrConnectWithoutSharing_infoInput
    upsert?: dashboardsUpsertWithoutSharing_infoInput
    disconnect?: boolean
    delete?: boolean
    connect?: dashboardsWhereUniqueInput
    update?: XOR<dashboardsUpdateWithoutSharing_infoInput, dashboardsUncheckedUpdateWithoutSharing_infoInput>
  }

  export type platformsCreateNestedOneWithoutWidgetsInput = {
    create?: XOR<platformsCreateWithoutWidgetsInput, platformsUncheckedCreateWithoutWidgetsInput>
    connectOrCreate?: platformsCreateOrConnectWithoutWidgetsInput
    connect?: platformsWhereUniqueInput
  }

  export type widget_templatesCreateNestedOneWithoutWidgetsInput = {
    create?: XOR<widget_templatesCreateWithoutWidgetsInput, widget_templatesUncheckedCreateWithoutWidgetsInput>
    connectOrCreate?: widget_templatesCreateOrConnectWithoutWidgetsInput
    connect?: widget_templatesWhereUniqueInput
  }

  export type dashboardsCreateNestedOneWithoutWidgetsInput = {
    create?: XOR<dashboardsCreateWithoutWidgetsInput, dashboardsUncheckedCreateWithoutWidgetsInput>
    connectOrCreate?: dashboardsCreateOrConnectWithoutWidgetsInput
    connect?: dashboardsWhereUniqueInput
  }

  export type NullableEnumwidget_sizeFieldUpdateOperationsInput = {
    set?: widget_size | null
  }

  export type NullableEnumwidget_typeFieldUpdateOperationsInput = {
    set?: widget_type | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type platformsUpdateOneWithoutWidgetsNestedInput = {
    create?: XOR<platformsCreateWithoutWidgetsInput, platformsUncheckedCreateWithoutWidgetsInput>
    connectOrCreate?: platformsCreateOrConnectWithoutWidgetsInput
    upsert?: platformsUpsertWithoutWidgetsInput
    disconnect?: boolean
    delete?: boolean
    connect?: platformsWhereUniqueInput
    update?: XOR<platformsUpdateWithoutWidgetsInput, platformsUncheckedUpdateWithoutWidgetsInput>
  }

  export type widget_templatesUpdateOneWithoutWidgetsNestedInput = {
    create?: XOR<widget_templatesCreateWithoutWidgetsInput, widget_templatesUncheckedCreateWithoutWidgetsInput>
    connectOrCreate?: widget_templatesCreateOrConnectWithoutWidgetsInput
    upsert?: widget_templatesUpsertWithoutWidgetsInput
    disconnect?: boolean
    delete?: boolean
    connect?: widget_templatesWhereUniqueInput
    update?: XOR<widget_templatesUpdateWithoutWidgetsInput, widget_templatesUncheckedUpdateWithoutWidgetsInput>
  }

  export type dashboardsUpdateOneWithoutWidgetsNestedInput = {
    create?: XOR<dashboardsCreateWithoutWidgetsInput, dashboardsUncheckedCreateWithoutWidgetsInput>
    connectOrCreate?: dashboardsCreateOrConnectWithoutWidgetsInput
    upsert?: dashboardsUpsertWithoutWidgetsInput
    disconnect?: boolean
    delete?: boolean
    connect?: dashboardsWhereUniqueInput
    update?: XOR<dashboardsUpdateWithoutWidgetsInput, dashboardsUncheckedUpdateWithoutWidgetsInput>
  }

  export type dashboardsCreateNestedManyWithoutDashboard_typeInput = {
    create?: XOR<Enumerable<dashboardsCreateWithoutDashboard_typeInput>, Enumerable<dashboardsUncheckedCreateWithoutDashboard_typeInput>>
    connectOrCreate?: Enumerable<dashboardsCreateOrConnectWithoutDashboard_typeInput>
    createMany?: dashboardsCreateManyDashboard_typeInputEnvelope
    connect?: Enumerable<dashboardsWhereUniqueInput>
  }

  export type dashboardsUncheckedCreateNestedManyWithoutDashboard_typeInput = {
    create?: XOR<Enumerable<dashboardsCreateWithoutDashboard_typeInput>, Enumerable<dashboardsUncheckedCreateWithoutDashboard_typeInput>>
    connectOrCreate?: Enumerable<dashboardsCreateOrConnectWithoutDashboard_typeInput>
    createMany?: dashboardsCreateManyDashboard_typeInputEnvelope
    connect?: Enumerable<dashboardsWhereUniqueInput>
  }

  export type dashboardsUpdateManyWithoutDashboard_typeNestedInput = {
    create?: XOR<Enumerable<dashboardsCreateWithoutDashboard_typeInput>, Enumerable<dashboardsUncheckedCreateWithoutDashboard_typeInput>>
    connectOrCreate?: Enumerable<dashboardsCreateOrConnectWithoutDashboard_typeInput>
    upsert?: Enumerable<dashboardsUpsertWithWhereUniqueWithoutDashboard_typeInput>
    createMany?: dashboardsCreateManyDashboard_typeInputEnvelope
    set?: Enumerable<dashboardsWhereUniqueInput>
    disconnect?: Enumerable<dashboardsWhereUniqueInput>
    delete?: Enumerable<dashboardsWhereUniqueInput>
    connect?: Enumerable<dashboardsWhereUniqueInput>
    update?: Enumerable<dashboardsUpdateWithWhereUniqueWithoutDashboard_typeInput>
    updateMany?: Enumerable<dashboardsUpdateManyWithWhereWithoutDashboard_typeInput>
    deleteMany?: Enumerable<dashboardsScalarWhereInput>
  }

  export type dashboardsUncheckedUpdateManyWithoutDashboard_typeNestedInput = {
    create?: XOR<Enumerable<dashboardsCreateWithoutDashboard_typeInput>, Enumerable<dashboardsUncheckedCreateWithoutDashboard_typeInput>>
    connectOrCreate?: Enumerable<dashboardsCreateOrConnectWithoutDashboard_typeInput>
    upsert?: Enumerable<dashboardsUpsertWithWhereUniqueWithoutDashboard_typeInput>
    createMany?: dashboardsCreateManyDashboard_typeInputEnvelope
    set?: Enumerable<dashboardsWhereUniqueInput>
    disconnect?: Enumerable<dashboardsWhereUniqueInput>
    delete?: Enumerable<dashboardsWhereUniqueInput>
    connect?: Enumerable<dashboardsWhereUniqueInput>
    update?: Enumerable<dashboardsUpdateWithWhereUniqueWithoutDashboard_typeInput>
    updateMany?: Enumerable<dashboardsUpdateManyWithWhereWithoutDashboard_typeInput>
    deleteMany?: Enumerable<dashboardsScalarWhereInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedEnumwidget_sizeNullableFilter = {
    equals?: widget_size | null
    in?: Enumerable<widget_size> | null
    notIn?: Enumerable<widget_size> | null
    not?: NestedEnumwidget_sizeNullableFilter | widget_size | null
  }

  export type NestedEnumwidget_typeNullableFilter = {
    equals?: widget_type | null
    in?: Enumerable<widget_type> | null
    notIn?: Enumerable<widget_type> | null
    not?: NestedEnumwidget_typeNullableFilter | widget_type | null
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedEnumwidget_sizeNullableWithAggregatesFilter = {
    equals?: widget_size | null
    in?: Enumerable<widget_size> | null
    notIn?: Enumerable<widget_size> | null
    not?: NestedEnumwidget_sizeNullableWithAggregatesFilter | widget_size | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumwidget_sizeNullableFilter
    _max?: NestedEnumwidget_sizeNullableFilter
  }

  export type NestedEnumwidget_typeNullableWithAggregatesFilter = {
    equals?: widget_type | null
    in?: Enumerable<widget_type> | null
    notIn?: Enumerable<widget_type> | null
    not?: NestedEnumwidget_typeNullableWithAggregatesFilter | widget_type | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumwidget_typeNullableFilter
    _max?: NestedEnumwidget_typeNullableFilter
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type dashboardsCreateWithoutDashboard_statusesInput = {
    user_id?: number | null
    dashboard_name?: string | null
    start_ts?: Date | string | null
    end_ts?: Date | string | null
    dashboard_settings?: NullableJsonNullValueInput | InputJsonValue
    reference_id?: number | null
    dashboard_type?: dashboard_typeCreateNestedOneWithoutDashboardsInput
    sharing_info?: sharing_infoCreateNestedManyWithoutDashboardsInput
    widgets?: widgetsCreateNestedManyWithoutDashboardsInput
  }

  export type dashboardsUncheckedCreateWithoutDashboard_statusesInput = {
    id?: number
    user_id?: number | null
    dashboard_name?: string | null
    start_ts?: Date | string | null
    end_ts?: Date | string | null
    dashboard_settings?: NullableJsonNullValueInput | InputJsonValue
    dashboard_type_id?: number | null
    reference_id?: number | null
    sharing_info?: sharing_infoUncheckedCreateNestedManyWithoutDashboardsInput
    widgets?: widgetsUncheckedCreateNestedManyWithoutDashboardsInput
  }

  export type dashboardsCreateOrConnectWithoutDashboard_statusesInput = {
    where: dashboardsWhereUniqueInput
    create: XOR<dashboardsCreateWithoutDashboard_statusesInput, dashboardsUncheckedCreateWithoutDashboard_statusesInput>
  }

  export type dashboardsCreateManyDashboard_statusesInputEnvelope = {
    data: Enumerable<dashboardsCreateManyDashboard_statusesInput>
    skipDuplicates?: boolean
  }

  export type dashboardsUpsertWithWhereUniqueWithoutDashboard_statusesInput = {
    where: dashboardsWhereUniqueInput
    update: XOR<dashboardsUpdateWithoutDashboard_statusesInput, dashboardsUncheckedUpdateWithoutDashboard_statusesInput>
    create: XOR<dashboardsCreateWithoutDashboard_statusesInput, dashboardsUncheckedCreateWithoutDashboard_statusesInput>
  }

  export type dashboardsUpdateWithWhereUniqueWithoutDashboard_statusesInput = {
    where: dashboardsWhereUniqueInput
    data: XOR<dashboardsUpdateWithoutDashboard_statusesInput, dashboardsUncheckedUpdateWithoutDashboard_statusesInput>
  }

  export type dashboardsUpdateManyWithWhereWithoutDashboard_statusesInput = {
    where: dashboardsScalarWhereInput
    data: XOR<dashboardsUpdateManyMutationInput, dashboardsUncheckedUpdateManyWithoutDashboardsInput>
  }

  export type dashboardsScalarWhereInput = {
    AND?: Enumerable<dashboardsScalarWhereInput>
    OR?: Enumerable<dashboardsScalarWhereInput>
    NOT?: Enumerable<dashboardsScalarWhereInput>
    id?: IntFilter | number
    user_id?: IntNullableFilter | number | null
    dashboard_name?: StringNullableFilter | string | null
    dashboard_status_id?: IntNullableFilter | number | null
    start_ts?: DateTimeNullableFilter | Date | string | null
    end_ts?: DateTimeNullableFilter | Date | string | null
    dashboard_settings?: JsonNullableFilter
    dashboard_type_id?: IntNullableFilter | number | null
    reference_id?: IntNullableFilter | number | null
  }

  export type widget_templatesCreateWithoutPlatformsInput = {
    widget_title?: string | null
    widget_description?: string | null
    default_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_sizes?: NullableJsonNullValueInput | InputJsonValue
    widget_types?: NullableJsonNullValueInput | InputJsonValue
    widgets?: widgetsCreateNestedManyWithoutWidget_templatesInput
  }

  export type widget_templatesUncheckedCreateWithoutPlatformsInput = {
    id?: number
    widget_title?: string | null
    widget_description?: string | null
    default_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_sizes?: NullableJsonNullValueInput | InputJsonValue
    widget_types?: NullableJsonNullValueInput | InputJsonValue
    widgets?: widgetsUncheckedCreateNestedManyWithoutWidget_templatesInput
  }

  export type widget_templatesCreateOrConnectWithoutPlatformsInput = {
    where: widget_templatesWhereUniqueInput
    create: XOR<widget_templatesCreateWithoutPlatformsInput, widget_templatesUncheckedCreateWithoutPlatformsInput>
  }

  export type widget_templatesCreateManyPlatformsInputEnvelope = {
    data: Enumerable<widget_templatesCreateManyPlatformsInput>
    skipDuplicates?: boolean
  }

  export type widgetsCreateWithoutPlatformsInput = {
    widget_account_id?: string | null
    widget_property_id?: string | null
    widget_start_ts?: Date | string | null
    widget_end_ts?: Date | string | null
    widget_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_size?: widget_size | null
    widget_type?: widget_type | null
    is_hidden?: boolean | null
    widget_name?: string | null
    widget_templates?: widget_templatesCreateNestedOneWithoutWidgetsInput
    dashboards?: dashboardsCreateNestedOneWithoutWidgetsInput
  }

  export type widgetsUncheckedCreateWithoutPlatformsInput = {
    id?: number
    dashboard_id?: number | null
    widget_template_id?: number | null
    widget_account_id?: string | null
    widget_property_id?: string | null
    widget_start_ts?: Date | string | null
    widget_end_ts?: Date | string | null
    widget_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_size?: widget_size | null
    widget_type?: widget_type | null
    is_hidden?: boolean | null
    widget_name?: string | null
  }

  export type widgetsCreateOrConnectWithoutPlatformsInput = {
    where: widgetsWhereUniqueInput
    create: XOR<widgetsCreateWithoutPlatformsInput, widgetsUncheckedCreateWithoutPlatformsInput>
  }

  export type widgetsCreateManyPlatformsInputEnvelope = {
    data: Enumerable<widgetsCreateManyPlatformsInput>
    skipDuplicates?: boolean
  }

  export type widget_templatesUpsertWithWhereUniqueWithoutPlatformsInput = {
    where: widget_templatesWhereUniqueInput
    update: XOR<widget_templatesUpdateWithoutPlatformsInput, widget_templatesUncheckedUpdateWithoutPlatformsInput>
    create: XOR<widget_templatesCreateWithoutPlatformsInput, widget_templatesUncheckedCreateWithoutPlatformsInput>
  }

  export type widget_templatesUpdateWithWhereUniqueWithoutPlatformsInput = {
    where: widget_templatesWhereUniqueInput
    data: XOR<widget_templatesUpdateWithoutPlatformsInput, widget_templatesUncheckedUpdateWithoutPlatformsInput>
  }

  export type widget_templatesUpdateManyWithWhereWithoutPlatformsInput = {
    where: widget_templatesScalarWhereInput
    data: XOR<widget_templatesUpdateManyMutationInput, widget_templatesUncheckedUpdateManyWithoutWidget_templatesInput>
  }

  export type widget_templatesScalarWhereInput = {
    AND?: Enumerable<widget_templatesScalarWhereInput>
    OR?: Enumerable<widget_templatesScalarWhereInput>
    NOT?: Enumerable<widget_templatesScalarWhereInput>
    id?: IntFilter | number
    widget_title?: StringNullableFilter | string | null
    widget_description?: StringNullableFilter | string | null
    platform_id?: IntNullableFilter | number | null
    default_settings?: JsonNullableFilter
    widget_sizes?: JsonNullableFilter
    widget_types?: JsonNullableFilter
  }

  export type widgetsUpsertWithWhereUniqueWithoutPlatformsInput = {
    where: widgetsWhereUniqueInput
    update: XOR<widgetsUpdateWithoutPlatformsInput, widgetsUncheckedUpdateWithoutPlatformsInput>
    create: XOR<widgetsCreateWithoutPlatformsInput, widgetsUncheckedCreateWithoutPlatformsInput>
  }

  export type widgetsUpdateWithWhereUniqueWithoutPlatformsInput = {
    where: widgetsWhereUniqueInput
    data: XOR<widgetsUpdateWithoutPlatformsInput, widgetsUncheckedUpdateWithoutPlatformsInput>
  }

  export type widgetsUpdateManyWithWhereWithoutPlatformsInput = {
    where: widgetsScalarWhereInput
    data: XOR<widgetsUpdateManyMutationInput, widgetsUncheckedUpdateManyWithoutWidgetsInput>
  }

  export type widgetsScalarWhereInput = {
    AND?: Enumerable<widgetsScalarWhereInput>
    OR?: Enumerable<widgetsScalarWhereInput>
    NOT?: Enumerable<widgetsScalarWhereInput>
    id?: IntFilter | number
    dashboard_id?: IntNullableFilter | number | null
    platform_id?: IntNullableFilter | number | null
    widget_template_id?: IntNullableFilter | number | null
    widget_account_id?: StringNullableFilter | string | null
    widget_property_id?: StringNullableFilter | string | null
    widget_start_ts?: DateTimeNullableFilter | Date | string | null
    widget_end_ts?: DateTimeNullableFilter | Date | string | null
    widget_settings?: JsonNullableFilter
    widget_size?: Enumwidget_sizeNullableFilter | widget_size | null
    widget_type?: Enumwidget_typeNullableFilter | widget_type | null
    is_hidden?: BoolNullableFilter | boolean | null
    widget_name?: StringNullableFilter | string | null
  }

  export type platformsCreateWithoutWidget_templatesInput = {
    platform?: string | null
    widgets?: widgetsCreateNestedManyWithoutPlatformsInput
  }

  export type platformsUncheckedCreateWithoutWidget_templatesInput = {
    id?: number
    platform?: string | null
    widgets?: widgetsUncheckedCreateNestedManyWithoutPlatformsInput
  }

  export type platformsCreateOrConnectWithoutWidget_templatesInput = {
    where: platformsWhereUniqueInput
    create: XOR<platformsCreateWithoutWidget_templatesInput, platformsUncheckedCreateWithoutWidget_templatesInput>
  }

  export type widgetsCreateWithoutWidget_templatesInput = {
    widget_account_id?: string | null
    widget_property_id?: string | null
    widget_start_ts?: Date | string | null
    widget_end_ts?: Date | string | null
    widget_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_size?: widget_size | null
    widget_type?: widget_type | null
    is_hidden?: boolean | null
    widget_name?: string | null
    platforms?: platformsCreateNestedOneWithoutWidgetsInput
    dashboards?: dashboardsCreateNestedOneWithoutWidgetsInput
  }

  export type widgetsUncheckedCreateWithoutWidget_templatesInput = {
    id?: number
    dashboard_id?: number | null
    platform_id?: number | null
    widget_account_id?: string | null
    widget_property_id?: string | null
    widget_start_ts?: Date | string | null
    widget_end_ts?: Date | string | null
    widget_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_size?: widget_size | null
    widget_type?: widget_type | null
    is_hidden?: boolean | null
    widget_name?: string | null
  }

  export type widgetsCreateOrConnectWithoutWidget_templatesInput = {
    where: widgetsWhereUniqueInput
    create: XOR<widgetsCreateWithoutWidget_templatesInput, widgetsUncheckedCreateWithoutWidget_templatesInput>
  }

  export type widgetsCreateManyWidget_templatesInputEnvelope = {
    data: Enumerable<widgetsCreateManyWidget_templatesInput>
    skipDuplicates?: boolean
  }

  export type platformsUpsertWithoutWidget_templatesInput = {
    update: XOR<platformsUpdateWithoutWidget_templatesInput, platformsUncheckedUpdateWithoutWidget_templatesInput>
    create: XOR<platformsCreateWithoutWidget_templatesInput, platformsUncheckedCreateWithoutWidget_templatesInput>
  }

  export type platformsUpdateWithoutWidget_templatesInput = {
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    widgets?: widgetsUpdateManyWithoutPlatformsNestedInput
  }

  export type platformsUncheckedUpdateWithoutWidget_templatesInput = {
    id?: IntFieldUpdateOperationsInput | number
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    widgets?: widgetsUncheckedUpdateManyWithoutPlatformsNestedInput
  }

  export type widgetsUpsertWithWhereUniqueWithoutWidget_templatesInput = {
    where: widgetsWhereUniqueInput
    update: XOR<widgetsUpdateWithoutWidget_templatesInput, widgetsUncheckedUpdateWithoutWidget_templatesInput>
    create: XOR<widgetsCreateWithoutWidget_templatesInput, widgetsUncheckedCreateWithoutWidget_templatesInput>
  }

  export type widgetsUpdateWithWhereUniqueWithoutWidget_templatesInput = {
    where: widgetsWhereUniqueInput
    data: XOR<widgetsUpdateWithoutWidget_templatesInput, widgetsUncheckedUpdateWithoutWidget_templatesInput>
  }

  export type widgetsUpdateManyWithWhereWithoutWidget_templatesInput = {
    where: widgetsScalarWhereInput
    data: XOR<widgetsUpdateManyMutationInput, widgetsUncheckedUpdateManyWithoutWidgetsInput>
  }

  export type dashboard_statusesCreateWithoutDashboardsInput = {
    status?: string | null
  }

  export type dashboard_statusesUncheckedCreateWithoutDashboardsInput = {
    id?: number
    status?: string | null
  }

  export type dashboard_statusesCreateOrConnectWithoutDashboardsInput = {
    where: dashboard_statusesWhereUniqueInput
    create: XOR<dashboard_statusesCreateWithoutDashboardsInput, dashboard_statusesUncheckedCreateWithoutDashboardsInput>
  }

  export type dashboard_typeCreateWithoutDashboardsInput = {
    dashboard_type?: string | null
  }

  export type dashboard_typeUncheckedCreateWithoutDashboardsInput = {
    id?: number
    dashboard_type?: string | null
  }

  export type dashboard_typeCreateOrConnectWithoutDashboardsInput = {
    where: dashboard_typeWhereUniqueInput
    create: XOR<dashboard_typeCreateWithoutDashboardsInput, dashboard_typeUncheckedCreateWithoutDashboardsInput>
  }

  export type sharing_infoCreateWithoutDashboardsInput = {
    email?: string | null
    user_id?: number | null
  }

  export type sharing_infoUncheckedCreateWithoutDashboardsInput = {
    id?: number
    email?: string | null
    user_id?: number | null
  }

  export type sharing_infoCreateOrConnectWithoutDashboardsInput = {
    where: sharing_infoWhereUniqueInput
    create: XOR<sharing_infoCreateWithoutDashboardsInput, sharing_infoUncheckedCreateWithoutDashboardsInput>
  }

  export type sharing_infoCreateManyDashboardsInputEnvelope = {
    data: Enumerable<sharing_infoCreateManyDashboardsInput>
    skipDuplicates?: boolean
  }

  export type widgetsCreateWithoutDashboardsInput = {
    widget_account_id?: string | null
    widget_property_id?: string | null
    widget_start_ts?: Date | string | null
    widget_end_ts?: Date | string | null
    widget_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_size?: widget_size | null
    widget_type?: widget_type | null
    is_hidden?: boolean | null
    widget_name?: string | null
    platforms?: platformsCreateNestedOneWithoutWidgetsInput
    widget_templates?: widget_templatesCreateNestedOneWithoutWidgetsInput
  }

  export type widgetsUncheckedCreateWithoutDashboardsInput = {
    id?: number
    platform_id?: number | null
    widget_template_id?: number | null
    widget_account_id?: string | null
    widget_property_id?: string | null
    widget_start_ts?: Date | string | null
    widget_end_ts?: Date | string | null
    widget_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_size?: widget_size | null
    widget_type?: widget_type | null
    is_hidden?: boolean | null
    widget_name?: string | null
  }

  export type widgetsCreateOrConnectWithoutDashboardsInput = {
    where: widgetsWhereUniqueInput
    create: XOR<widgetsCreateWithoutDashboardsInput, widgetsUncheckedCreateWithoutDashboardsInput>
  }

  export type widgetsCreateManyDashboardsInputEnvelope = {
    data: Enumerable<widgetsCreateManyDashboardsInput>
    skipDuplicates?: boolean
  }

  export type dashboard_statusesUpsertWithoutDashboardsInput = {
    update: XOR<dashboard_statusesUpdateWithoutDashboardsInput, dashboard_statusesUncheckedUpdateWithoutDashboardsInput>
    create: XOR<dashboard_statusesCreateWithoutDashboardsInput, dashboard_statusesUncheckedCreateWithoutDashboardsInput>
  }

  export type dashboard_statusesUpdateWithoutDashboardsInput = {
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type dashboard_statusesUncheckedUpdateWithoutDashboardsInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type dashboard_typeUpsertWithoutDashboardsInput = {
    update: XOR<dashboard_typeUpdateWithoutDashboardsInput, dashboard_typeUncheckedUpdateWithoutDashboardsInput>
    create: XOR<dashboard_typeCreateWithoutDashboardsInput, dashboard_typeUncheckedCreateWithoutDashboardsInput>
  }

  export type dashboard_typeUpdateWithoutDashboardsInput = {
    dashboard_type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type dashboard_typeUncheckedUpdateWithoutDashboardsInput = {
    id?: IntFieldUpdateOperationsInput | number
    dashboard_type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type sharing_infoUpsertWithWhereUniqueWithoutDashboardsInput = {
    where: sharing_infoWhereUniqueInput
    update: XOR<sharing_infoUpdateWithoutDashboardsInput, sharing_infoUncheckedUpdateWithoutDashboardsInput>
    create: XOR<sharing_infoCreateWithoutDashboardsInput, sharing_infoUncheckedCreateWithoutDashboardsInput>
  }

  export type sharing_infoUpdateWithWhereUniqueWithoutDashboardsInput = {
    where: sharing_infoWhereUniqueInput
    data: XOR<sharing_infoUpdateWithoutDashboardsInput, sharing_infoUncheckedUpdateWithoutDashboardsInput>
  }

  export type sharing_infoUpdateManyWithWhereWithoutDashboardsInput = {
    where: sharing_infoScalarWhereInput
    data: XOR<sharing_infoUpdateManyMutationInput, sharing_infoUncheckedUpdateManyWithoutSharing_infoInput>
  }

  export type sharing_infoScalarWhereInput = {
    AND?: Enumerable<sharing_infoScalarWhereInput>
    OR?: Enumerable<sharing_infoScalarWhereInput>
    NOT?: Enumerable<sharing_infoScalarWhereInput>
    id?: IntFilter | number
    dashboard_id?: IntNullableFilter | number | null
    email?: StringNullableFilter | string | null
    user_id?: IntNullableFilter | number | null
  }

  export type widgetsUpsertWithWhereUniqueWithoutDashboardsInput = {
    where: widgetsWhereUniqueInput
    update: XOR<widgetsUpdateWithoutDashboardsInput, widgetsUncheckedUpdateWithoutDashboardsInput>
    create: XOR<widgetsCreateWithoutDashboardsInput, widgetsUncheckedCreateWithoutDashboardsInput>
  }

  export type widgetsUpdateWithWhereUniqueWithoutDashboardsInput = {
    where: widgetsWhereUniqueInput
    data: XOR<widgetsUpdateWithoutDashboardsInput, widgetsUncheckedUpdateWithoutDashboardsInput>
  }

  export type widgetsUpdateManyWithWhereWithoutDashboardsInput = {
    where: widgetsScalarWhereInput
    data: XOR<widgetsUpdateManyMutationInput, widgetsUncheckedUpdateManyWithoutWidgetsInput>
  }

  export type dashboardsCreateWithoutSharing_infoInput = {
    user_id?: number | null
    dashboard_name?: string | null
    start_ts?: Date | string | null
    end_ts?: Date | string | null
    dashboard_settings?: NullableJsonNullValueInput | InputJsonValue
    reference_id?: number | null
    dashboard_statuses?: dashboard_statusesCreateNestedOneWithoutDashboardsInput
    dashboard_type?: dashboard_typeCreateNestedOneWithoutDashboardsInput
    widgets?: widgetsCreateNestedManyWithoutDashboardsInput
  }

  export type dashboardsUncheckedCreateWithoutSharing_infoInput = {
    id?: number
    user_id?: number | null
    dashboard_name?: string | null
    dashboard_status_id?: number | null
    start_ts?: Date | string | null
    end_ts?: Date | string | null
    dashboard_settings?: NullableJsonNullValueInput | InputJsonValue
    dashboard_type_id?: number | null
    reference_id?: number | null
    widgets?: widgetsUncheckedCreateNestedManyWithoutDashboardsInput
  }

  export type dashboardsCreateOrConnectWithoutSharing_infoInput = {
    where: dashboardsWhereUniqueInput
    create: XOR<dashboardsCreateWithoutSharing_infoInput, dashboardsUncheckedCreateWithoutSharing_infoInput>
  }

  export type dashboardsUpsertWithoutSharing_infoInput = {
    update: XOR<dashboardsUpdateWithoutSharing_infoInput, dashboardsUncheckedUpdateWithoutSharing_infoInput>
    create: XOR<dashboardsCreateWithoutSharing_infoInput, dashboardsUncheckedCreateWithoutSharing_infoInput>
  }

  export type dashboardsUpdateWithoutSharing_infoInput = {
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    dashboard_name?: NullableStringFieldUpdateOperationsInput | string | null
    start_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dashboard_settings?: NullableJsonNullValueInput | InputJsonValue
    reference_id?: NullableIntFieldUpdateOperationsInput | number | null
    dashboard_statuses?: dashboard_statusesUpdateOneWithoutDashboardsNestedInput
    dashboard_type?: dashboard_typeUpdateOneWithoutDashboardsNestedInput
    widgets?: widgetsUpdateManyWithoutDashboardsNestedInput
  }

  export type dashboardsUncheckedUpdateWithoutSharing_infoInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    dashboard_name?: NullableStringFieldUpdateOperationsInput | string | null
    dashboard_status_id?: NullableIntFieldUpdateOperationsInput | number | null
    start_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dashboard_settings?: NullableJsonNullValueInput | InputJsonValue
    dashboard_type_id?: NullableIntFieldUpdateOperationsInput | number | null
    reference_id?: NullableIntFieldUpdateOperationsInput | number | null
    widgets?: widgetsUncheckedUpdateManyWithoutDashboardsNestedInput
  }

  export type platformsCreateWithoutWidgetsInput = {
    platform?: string | null
    widget_templates?: widget_templatesCreateNestedManyWithoutPlatformsInput
  }

  export type platformsUncheckedCreateWithoutWidgetsInput = {
    id?: number
    platform?: string | null
    widget_templates?: widget_templatesUncheckedCreateNestedManyWithoutPlatformsInput
  }

  export type platformsCreateOrConnectWithoutWidgetsInput = {
    where: platformsWhereUniqueInput
    create: XOR<platformsCreateWithoutWidgetsInput, platformsUncheckedCreateWithoutWidgetsInput>
  }

  export type widget_templatesCreateWithoutWidgetsInput = {
    widget_title?: string | null
    widget_description?: string | null
    default_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_sizes?: NullableJsonNullValueInput | InputJsonValue
    widget_types?: NullableJsonNullValueInput | InputJsonValue
    platforms?: platformsCreateNestedOneWithoutWidget_templatesInput
  }

  export type widget_templatesUncheckedCreateWithoutWidgetsInput = {
    id?: number
    widget_title?: string | null
    widget_description?: string | null
    platform_id?: number | null
    default_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_sizes?: NullableJsonNullValueInput | InputJsonValue
    widget_types?: NullableJsonNullValueInput | InputJsonValue
  }

  export type widget_templatesCreateOrConnectWithoutWidgetsInput = {
    where: widget_templatesWhereUniqueInput
    create: XOR<widget_templatesCreateWithoutWidgetsInput, widget_templatesUncheckedCreateWithoutWidgetsInput>
  }

  export type dashboardsCreateWithoutWidgetsInput = {
    user_id?: number | null
    dashboard_name?: string | null
    start_ts?: Date | string | null
    end_ts?: Date | string | null
    dashboard_settings?: NullableJsonNullValueInput | InputJsonValue
    reference_id?: number | null
    dashboard_statuses?: dashboard_statusesCreateNestedOneWithoutDashboardsInput
    dashboard_type?: dashboard_typeCreateNestedOneWithoutDashboardsInput
    sharing_info?: sharing_infoCreateNestedManyWithoutDashboardsInput
  }

  export type dashboardsUncheckedCreateWithoutWidgetsInput = {
    id?: number
    user_id?: number | null
    dashboard_name?: string | null
    dashboard_status_id?: number | null
    start_ts?: Date | string | null
    end_ts?: Date | string | null
    dashboard_settings?: NullableJsonNullValueInput | InputJsonValue
    dashboard_type_id?: number | null
    reference_id?: number | null
    sharing_info?: sharing_infoUncheckedCreateNestedManyWithoutDashboardsInput
  }

  export type dashboardsCreateOrConnectWithoutWidgetsInput = {
    where: dashboardsWhereUniqueInput
    create: XOR<dashboardsCreateWithoutWidgetsInput, dashboardsUncheckedCreateWithoutWidgetsInput>
  }

  export type platformsUpsertWithoutWidgetsInput = {
    update: XOR<platformsUpdateWithoutWidgetsInput, platformsUncheckedUpdateWithoutWidgetsInput>
    create: XOR<platformsCreateWithoutWidgetsInput, platformsUncheckedCreateWithoutWidgetsInput>
  }

  export type platformsUpdateWithoutWidgetsInput = {
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    widget_templates?: widget_templatesUpdateManyWithoutPlatformsNestedInput
  }

  export type platformsUncheckedUpdateWithoutWidgetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    widget_templates?: widget_templatesUncheckedUpdateManyWithoutPlatformsNestedInput
  }

  export type widget_templatesUpsertWithoutWidgetsInput = {
    update: XOR<widget_templatesUpdateWithoutWidgetsInput, widget_templatesUncheckedUpdateWithoutWidgetsInput>
    create: XOR<widget_templatesCreateWithoutWidgetsInput, widget_templatesUncheckedCreateWithoutWidgetsInput>
  }

  export type widget_templatesUpdateWithoutWidgetsInput = {
    widget_title?: NullableStringFieldUpdateOperationsInput | string | null
    widget_description?: NullableStringFieldUpdateOperationsInput | string | null
    default_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_sizes?: NullableJsonNullValueInput | InputJsonValue
    widget_types?: NullableJsonNullValueInput | InputJsonValue
    platforms?: platformsUpdateOneWithoutWidget_templatesNestedInput
  }

  export type widget_templatesUncheckedUpdateWithoutWidgetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    widget_title?: NullableStringFieldUpdateOperationsInput | string | null
    widget_description?: NullableStringFieldUpdateOperationsInput | string | null
    platform_id?: NullableIntFieldUpdateOperationsInput | number | null
    default_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_sizes?: NullableJsonNullValueInput | InputJsonValue
    widget_types?: NullableJsonNullValueInput | InputJsonValue
  }

  export type dashboardsUpsertWithoutWidgetsInput = {
    update: XOR<dashboardsUpdateWithoutWidgetsInput, dashboardsUncheckedUpdateWithoutWidgetsInput>
    create: XOR<dashboardsCreateWithoutWidgetsInput, dashboardsUncheckedCreateWithoutWidgetsInput>
  }

  export type dashboardsUpdateWithoutWidgetsInput = {
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    dashboard_name?: NullableStringFieldUpdateOperationsInput | string | null
    start_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dashboard_settings?: NullableJsonNullValueInput | InputJsonValue
    reference_id?: NullableIntFieldUpdateOperationsInput | number | null
    dashboard_statuses?: dashboard_statusesUpdateOneWithoutDashboardsNestedInput
    dashboard_type?: dashboard_typeUpdateOneWithoutDashboardsNestedInput
    sharing_info?: sharing_infoUpdateManyWithoutDashboardsNestedInput
  }

  export type dashboardsUncheckedUpdateWithoutWidgetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    dashboard_name?: NullableStringFieldUpdateOperationsInput | string | null
    dashboard_status_id?: NullableIntFieldUpdateOperationsInput | number | null
    start_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dashboard_settings?: NullableJsonNullValueInput | InputJsonValue
    dashboard_type_id?: NullableIntFieldUpdateOperationsInput | number | null
    reference_id?: NullableIntFieldUpdateOperationsInput | number | null
    sharing_info?: sharing_infoUncheckedUpdateManyWithoutDashboardsNestedInput
  }

  export type dashboardsCreateWithoutDashboard_typeInput = {
    user_id?: number | null
    dashboard_name?: string | null
    start_ts?: Date | string | null
    end_ts?: Date | string | null
    dashboard_settings?: NullableJsonNullValueInput | InputJsonValue
    reference_id?: number | null
    dashboard_statuses?: dashboard_statusesCreateNestedOneWithoutDashboardsInput
    sharing_info?: sharing_infoCreateNestedManyWithoutDashboardsInput
    widgets?: widgetsCreateNestedManyWithoutDashboardsInput
  }

  export type dashboardsUncheckedCreateWithoutDashboard_typeInput = {
    id?: number
    user_id?: number | null
    dashboard_name?: string | null
    dashboard_status_id?: number | null
    start_ts?: Date | string | null
    end_ts?: Date | string | null
    dashboard_settings?: NullableJsonNullValueInput | InputJsonValue
    reference_id?: number | null
    sharing_info?: sharing_infoUncheckedCreateNestedManyWithoutDashboardsInput
    widgets?: widgetsUncheckedCreateNestedManyWithoutDashboardsInput
  }

  export type dashboardsCreateOrConnectWithoutDashboard_typeInput = {
    where: dashboardsWhereUniqueInput
    create: XOR<dashboardsCreateWithoutDashboard_typeInput, dashboardsUncheckedCreateWithoutDashboard_typeInput>
  }

  export type dashboardsCreateManyDashboard_typeInputEnvelope = {
    data: Enumerable<dashboardsCreateManyDashboard_typeInput>
    skipDuplicates?: boolean
  }

  export type dashboardsUpsertWithWhereUniqueWithoutDashboard_typeInput = {
    where: dashboardsWhereUniqueInput
    update: XOR<dashboardsUpdateWithoutDashboard_typeInput, dashboardsUncheckedUpdateWithoutDashboard_typeInput>
    create: XOR<dashboardsCreateWithoutDashboard_typeInput, dashboardsUncheckedCreateWithoutDashboard_typeInput>
  }

  export type dashboardsUpdateWithWhereUniqueWithoutDashboard_typeInput = {
    where: dashboardsWhereUniqueInput
    data: XOR<dashboardsUpdateWithoutDashboard_typeInput, dashboardsUncheckedUpdateWithoutDashboard_typeInput>
  }

  export type dashboardsUpdateManyWithWhereWithoutDashboard_typeInput = {
    where: dashboardsScalarWhereInput
    data: XOR<dashboardsUpdateManyMutationInput, dashboardsUncheckedUpdateManyWithoutDashboardsInput>
  }

  export type dashboardsCreateManyDashboard_statusesInput = {
    id?: number
    user_id?: number | null
    dashboard_name?: string | null
    start_ts?: Date | string | null
    end_ts?: Date | string | null
    dashboard_settings?: NullableJsonNullValueInput | InputJsonValue
    dashboard_type_id?: number | null
    reference_id?: number | null
  }

  export type dashboardsUpdateWithoutDashboard_statusesInput = {
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    dashboard_name?: NullableStringFieldUpdateOperationsInput | string | null
    start_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dashboard_settings?: NullableJsonNullValueInput | InputJsonValue
    reference_id?: NullableIntFieldUpdateOperationsInput | number | null
    dashboard_type?: dashboard_typeUpdateOneWithoutDashboardsNestedInput
    sharing_info?: sharing_infoUpdateManyWithoutDashboardsNestedInput
    widgets?: widgetsUpdateManyWithoutDashboardsNestedInput
  }

  export type dashboardsUncheckedUpdateWithoutDashboard_statusesInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    dashboard_name?: NullableStringFieldUpdateOperationsInput | string | null
    start_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dashboard_settings?: NullableJsonNullValueInput | InputJsonValue
    dashboard_type_id?: NullableIntFieldUpdateOperationsInput | number | null
    reference_id?: NullableIntFieldUpdateOperationsInput | number | null
    sharing_info?: sharing_infoUncheckedUpdateManyWithoutDashboardsNestedInput
    widgets?: widgetsUncheckedUpdateManyWithoutDashboardsNestedInput
  }

  export type dashboardsUncheckedUpdateManyWithoutDashboardsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    dashboard_name?: NullableStringFieldUpdateOperationsInput | string | null
    start_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dashboard_settings?: NullableJsonNullValueInput | InputJsonValue
    dashboard_type_id?: NullableIntFieldUpdateOperationsInput | number | null
    reference_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type widget_templatesCreateManyPlatformsInput = {
    id?: number
    widget_title?: string | null
    widget_description?: string | null
    default_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_sizes?: NullableJsonNullValueInput | InputJsonValue
    widget_types?: NullableJsonNullValueInput | InputJsonValue
  }

  export type widgetsCreateManyPlatformsInput = {
    id?: number
    dashboard_id?: number | null
    widget_template_id?: number | null
    widget_account_id?: string | null
    widget_property_id?: string | null
    widget_start_ts?: Date | string | null
    widget_end_ts?: Date | string | null
    widget_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_size?: widget_size | null
    widget_type?: widget_type | null
    is_hidden?: boolean | null
    widget_name?: string | null
  }

  export type widget_templatesUpdateWithoutPlatformsInput = {
    widget_title?: NullableStringFieldUpdateOperationsInput | string | null
    widget_description?: NullableStringFieldUpdateOperationsInput | string | null
    default_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_sizes?: NullableJsonNullValueInput | InputJsonValue
    widget_types?: NullableJsonNullValueInput | InputJsonValue
    widgets?: widgetsUpdateManyWithoutWidget_templatesNestedInput
  }

  export type widget_templatesUncheckedUpdateWithoutPlatformsInput = {
    id?: IntFieldUpdateOperationsInput | number
    widget_title?: NullableStringFieldUpdateOperationsInput | string | null
    widget_description?: NullableStringFieldUpdateOperationsInput | string | null
    default_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_sizes?: NullableJsonNullValueInput | InputJsonValue
    widget_types?: NullableJsonNullValueInput | InputJsonValue
    widgets?: widgetsUncheckedUpdateManyWithoutWidget_templatesNestedInput
  }

  export type widget_templatesUncheckedUpdateManyWithoutWidget_templatesInput = {
    id?: IntFieldUpdateOperationsInput | number
    widget_title?: NullableStringFieldUpdateOperationsInput | string | null
    widget_description?: NullableStringFieldUpdateOperationsInput | string | null
    default_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_sizes?: NullableJsonNullValueInput | InputJsonValue
    widget_types?: NullableJsonNullValueInput | InputJsonValue
  }

  export type widgetsUpdateWithoutPlatformsInput = {
    widget_account_id?: NullableStringFieldUpdateOperationsInput | string | null
    widget_property_id?: NullableStringFieldUpdateOperationsInput | string | null
    widget_start_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    widget_end_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    widget_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_size?: NullableEnumwidget_sizeFieldUpdateOperationsInput | widget_size | null
    widget_type?: NullableEnumwidget_typeFieldUpdateOperationsInput | widget_type | null
    is_hidden?: NullableBoolFieldUpdateOperationsInput | boolean | null
    widget_name?: NullableStringFieldUpdateOperationsInput | string | null
    widget_templates?: widget_templatesUpdateOneWithoutWidgetsNestedInput
    dashboards?: dashboardsUpdateOneWithoutWidgetsNestedInput
  }

  export type widgetsUncheckedUpdateWithoutPlatformsInput = {
    id?: IntFieldUpdateOperationsInput | number
    dashboard_id?: NullableIntFieldUpdateOperationsInput | number | null
    widget_template_id?: NullableIntFieldUpdateOperationsInput | number | null
    widget_account_id?: NullableStringFieldUpdateOperationsInput | string | null
    widget_property_id?: NullableStringFieldUpdateOperationsInput | string | null
    widget_start_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    widget_end_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    widget_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_size?: NullableEnumwidget_sizeFieldUpdateOperationsInput | widget_size | null
    widget_type?: NullableEnumwidget_typeFieldUpdateOperationsInput | widget_type | null
    is_hidden?: NullableBoolFieldUpdateOperationsInput | boolean | null
    widget_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type widgetsUncheckedUpdateManyWithoutWidgetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    dashboard_id?: NullableIntFieldUpdateOperationsInput | number | null
    widget_template_id?: NullableIntFieldUpdateOperationsInput | number | null
    widget_account_id?: NullableStringFieldUpdateOperationsInput | string | null
    widget_property_id?: NullableStringFieldUpdateOperationsInput | string | null
    widget_start_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    widget_end_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    widget_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_size?: NullableEnumwidget_sizeFieldUpdateOperationsInput | widget_size | null
    widget_type?: NullableEnumwidget_typeFieldUpdateOperationsInput | widget_type | null
    is_hidden?: NullableBoolFieldUpdateOperationsInput | boolean | null
    widget_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type widgetsCreateManyWidget_templatesInput = {
    id?: number
    dashboard_id?: number | null
    platform_id?: number | null
    widget_account_id?: string | null
    widget_property_id?: string | null
    widget_start_ts?: Date | string | null
    widget_end_ts?: Date | string | null
    widget_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_size?: widget_size | null
    widget_type?: widget_type | null
    is_hidden?: boolean | null
    widget_name?: string | null
  }

  export type widgetsUpdateWithoutWidget_templatesInput = {
    widget_account_id?: NullableStringFieldUpdateOperationsInput | string | null
    widget_property_id?: NullableStringFieldUpdateOperationsInput | string | null
    widget_start_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    widget_end_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    widget_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_size?: NullableEnumwidget_sizeFieldUpdateOperationsInput | widget_size | null
    widget_type?: NullableEnumwidget_typeFieldUpdateOperationsInput | widget_type | null
    is_hidden?: NullableBoolFieldUpdateOperationsInput | boolean | null
    widget_name?: NullableStringFieldUpdateOperationsInput | string | null
    platforms?: platformsUpdateOneWithoutWidgetsNestedInput
    dashboards?: dashboardsUpdateOneWithoutWidgetsNestedInput
  }

  export type widgetsUncheckedUpdateWithoutWidget_templatesInput = {
    id?: IntFieldUpdateOperationsInput | number
    dashboard_id?: NullableIntFieldUpdateOperationsInput | number | null
    platform_id?: NullableIntFieldUpdateOperationsInput | number | null
    widget_account_id?: NullableStringFieldUpdateOperationsInput | string | null
    widget_property_id?: NullableStringFieldUpdateOperationsInput | string | null
    widget_start_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    widget_end_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    widget_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_size?: NullableEnumwidget_sizeFieldUpdateOperationsInput | widget_size | null
    widget_type?: NullableEnumwidget_typeFieldUpdateOperationsInput | widget_type | null
    is_hidden?: NullableBoolFieldUpdateOperationsInput | boolean | null
    widget_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type sharing_infoCreateManyDashboardsInput = {
    id?: number
    email?: string | null
    user_id?: number | null
  }

  export type widgetsCreateManyDashboardsInput = {
    id?: number
    platform_id?: number | null
    widget_template_id?: number | null
    widget_account_id?: string | null
    widget_property_id?: string | null
    widget_start_ts?: Date | string | null
    widget_end_ts?: Date | string | null
    widget_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_size?: widget_size | null
    widget_type?: widget_type | null
    is_hidden?: boolean | null
    widget_name?: string | null
  }

  export type sharing_infoUpdateWithoutDashboardsInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type sharing_infoUncheckedUpdateWithoutDashboardsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type sharing_infoUncheckedUpdateManyWithoutSharing_infoInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type widgetsUpdateWithoutDashboardsInput = {
    widget_account_id?: NullableStringFieldUpdateOperationsInput | string | null
    widget_property_id?: NullableStringFieldUpdateOperationsInput | string | null
    widget_start_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    widget_end_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    widget_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_size?: NullableEnumwidget_sizeFieldUpdateOperationsInput | widget_size | null
    widget_type?: NullableEnumwidget_typeFieldUpdateOperationsInput | widget_type | null
    is_hidden?: NullableBoolFieldUpdateOperationsInput | boolean | null
    widget_name?: NullableStringFieldUpdateOperationsInput | string | null
    platforms?: platformsUpdateOneWithoutWidgetsNestedInput
    widget_templates?: widget_templatesUpdateOneWithoutWidgetsNestedInput
  }

  export type widgetsUncheckedUpdateWithoutDashboardsInput = {
    id?: IntFieldUpdateOperationsInput | number
    platform_id?: NullableIntFieldUpdateOperationsInput | number | null
    widget_template_id?: NullableIntFieldUpdateOperationsInput | number | null
    widget_account_id?: NullableStringFieldUpdateOperationsInput | string | null
    widget_property_id?: NullableStringFieldUpdateOperationsInput | string | null
    widget_start_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    widget_end_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    widget_settings?: NullableJsonNullValueInput | InputJsonValue
    widget_size?: NullableEnumwidget_sizeFieldUpdateOperationsInput | widget_size | null
    widget_type?: NullableEnumwidget_typeFieldUpdateOperationsInput | widget_type | null
    is_hidden?: NullableBoolFieldUpdateOperationsInput | boolean | null
    widget_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type dashboardsCreateManyDashboard_typeInput = {
    id?: number
    user_id?: number | null
    dashboard_name?: string | null
    dashboard_status_id?: number | null
    start_ts?: Date | string | null
    end_ts?: Date | string | null
    dashboard_settings?: NullableJsonNullValueInput | InputJsonValue
    reference_id?: number | null
  }

  export type dashboardsUpdateWithoutDashboard_typeInput = {
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    dashboard_name?: NullableStringFieldUpdateOperationsInput | string | null
    start_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dashboard_settings?: NullableJsonNullValueInput | InputJsonValue
    reference_id?: NullableIntFieldUpdateOperationsInput | number | null
    dashboard_statuses?: dashboard_statusesUpdateOneWithoutDashboardsNestedInput
    sharing_info?: sharing_infoUpdateManyWithoutDashboardsNestedInput
    widgets?: widgetsUpdateManyWithoutDashboardsNestedInput
  }

  export type dashboardsUncheckedUpdateWithoutDashboard_typeInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    dashboard_name?: NullableStringFieldUpdateOperationsInput | string | null
    dashboard_status_id?: NullableIntFieldUpdateOperationsInput | number | null
    start_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_ts?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dashboard_settings?: NullableJsonNullValueInput | InputJsonValue
    reference_id?: NullableIntFieldUpdateOperationsInput | number | null
    sharing_info?: sharing_infoUncheckedUpdateManyWithoutDashboardsNestedInput
    widgets?: widgetsUncheckedUpdateManyWithoutDashboardsNestedInput
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}