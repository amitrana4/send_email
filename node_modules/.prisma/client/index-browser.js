
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.9.0
 * Query Engine version: ceb5c99003b99c9ee2c1d2e618e359c14aef2ea5
 */
Prisma.prismaVersion = {
  client: "4.9.0",
  engine: "ceb5c99003b99c9ee2c1d2e618e359c14aef2ea5"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.Collection_admin_configsScalarFieldEnum = makeEnum({
  id: 'id',
  workspace_id: 'workspace_id',
  total_posts: 'total_posts',
  total_comments: 'total_comments',
  profile_collection_freq: 'profile_collection_freq',
  posts_collection_freq: 'posts_collection_freq',
  campaign_post_collection_freq: 'campaign_post_collection_freq',
  stories_collection_freq: 'stories_collection_freq',
  created_by_user_id: 'created_by_user_id',
  created_ts: 'created_ts',
  updated_ts: 'updated_ts'
});

exports.Prisma.Collection_configsScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  value: 'value'
});

exports.Prisma.Dashboard_statusesScalarFieldEnum = makeEnum({
  id: 'id',
  status: 'status'
});

exports.Prisma.Dashboard_typeScalarFieldEnum = makeEnum({
  id: 'id',
  dashboard_type: 'dashboard_type'
});

exports.Prisma.DashboardsScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  dashboard_name: 'dashboard_name',
  dashboard_status_id: 'dashboard_status_id',
  start_ts: 'start_ts',
  end_ts: 'end_ts',
  dashboard_settings: 'dashboard_settings',
  dashboard_type_id: 'dashboard_type_id',
  reference_id: 'reference_id'
});

exports.Prisma.JsonNullValueFilter = makeEnum({
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
});

exports.Prisma.NullableJsonNullValueInput = makeEnum({
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
});

exports.Prisma.PlatformsScalarFieldEnum = makeEnum({
  id: 'id',
  platform: 'platform'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.Sharing_infoScalarFieldEnum = makeEnum({
  id: 'id',
  dashboard_id: 'dashboard_id',
  email: 'email',
  user_id: 'user_id'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Widget_templatesScalarFieldEnum = makeEnum({
  id: 'id',
  widget_title: 'widget_title',
  widget_description: 'widget_description',
  platform_id: 'platform_id',
  default_settings: 'default_settings',
  widget_sizes: 'widget_sizes',
  widget_types: 'widget_types'
});

exports.Prisma.WidgetsScalarFieldEnum = makeEnum({
  id: 'id',
  dashboard_id: 'dashboard_id',
  platform_id: 'platform_id',
  widget_template_id: 'widget_template_id',
  widget_account_id: 'widget_account_id',
  widget_property_id: 'widget_property_id',
  widget_start_ts: 'widget_start_ts',
  widget_end_ts: 'widget_end_ts',
  widget_settings: 'widget_settings',
  widget_size: 'widget_size',
  widget_type: 'widget_type',
  is_hidden: 'is_hidden',
  widget_name: 'widget_name'
});
exports.widget_size = makeEnum({
  default: 'default',
  large: 'large',
  medium: 'medium',
  small: 'small'
});

exports.widget_type = makeEnum({
  piechart: 'piechart',
  barchart: 'barchart',
  linegraph: 'linegraph',
  counter: 'counter',
  table: 'table',
  areachart: 'areachart'
});

exports.Prisma.ModelName = makeEnum({
  dashboard_statuses: 'dashboard_statuses',
  platforms: 'platforms',
  widget_templates: 'widget_templates',
  dashboards: 'dashboards',
  sharing_info: 'sharing_info',
  widgets: 'widgets',
  dashboard_type: 'dashboard_type',
  collection_configs: 'collection_configs',
  collection_admin_configs: 'collection_admin_configs'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
